
PWM_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096fc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa4  08009fa4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa4  08009fa4  00019fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fac  08009fac  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009fc4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800a024  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000634  240000d0  0800a084  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000704  0800a084  00020704  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024e54  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000382b  00000000  00000000  00044f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001548  00000000  00000000  00048780  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013f0  00000000  00000000  00049cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038221  00000000  00000000  0004b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001264b  00000000  00000000  000832d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001656d9  00000000  00000000  00095924  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001faffd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005ab0  00000000  00000000  001fb078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800997c 	.word	0x0800997c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800997c 	.word	0x0800997c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f99b 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f001 fed9 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f008 fe4d 	bl	80092cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	08009f94 	.word	0x08009f94
 8000640:	24000008 	.word	0x24000008
 8000644:	2400000c 	.word	0x2400000c

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f983 	bl	800097e <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f94d 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000008 	.word	0x24000008
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	24000108 	.word	0x24000108

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	24000108 	.word	0x24000108

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffee 	bl	80006dc <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Delay+0x40>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffde 	bl	80006dc <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000004 	.word	0x24000004

08000738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetREVID+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	5c001000 	.word	0x5c001000

08000750 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	604b      	str	r3, [r1, #4]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	58000400 	.word	0x58000400

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <__NVIC_SetPriorityGrouping+0x40>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x40>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	05fa0000 	.word	0x05fa0000

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4907      	ldr	r1, [pc, #28]	; (8000814 <__NVIC_EnableIRQ+0x38>)
 80007f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff8e 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff29 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff40 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff90 	bl	800086c <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5f 	bl	8000818 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff33 	bl	80007dc <__NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffa4 	bl	80008d4 <SysTick_Config>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d106      	bne.n	80009b4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80009b2:	e005      	b.n	80009c0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009ba:	f023 0304 	bic.w	r3, r3, #4
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e0c6      	b.n	8000b70 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d102      	bne.n	80009f0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f008 fc88 	bl	8009300 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2223      	movs	r2, #35	; 0x23
 80009f4:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b60      	ldr	r3, [pc, #384]	; (8000b78 <HAL_ETH_Init+0x1a8>)
 80009f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009fc:	4a5e      	ldr	r2, [pc, #376]	; (8000b78 <HAL_ETH_Init+0x1a8>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a06:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <HAL_ETH_Init+0x1a8>)
 8000a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d103      	bne.n	8000a24 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fe97 	bl	8000750 <HAL_SYSCFG_ETHInterfaceSelect>
 8000a22:	e003      	b.n	8000a2c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000a24:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a28:	f7ff fe92 	bl	8000750 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0201 	orr.w	r2, r2, #1
 8000a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a44:	f7ff fe4a 	bl	80006dc <HAL_GetTick>
 8000a48:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000a4a:	e00f      	b.n	8000a6c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000a4c:	f7ff fe46 	bl	80006dc <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a5a:	d907      	bls.n	8000a6c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2204      	movs	r2, #4
 8000a60:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	22e0      	movs	r2, #224	; 0xe0
 8000a66:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e081      	b.n	8000b70 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1e6      	bne.n	8000a4c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 fac0 	bl	8001004 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000a84:	f001 fdfa 	bl	800267c <HAL_RCC_GetHCLKFreq>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <HAL_ETH_Init+0x1ac>)
 8000a8c:	fba3 2302 	umull	r2, r3, r3, r2
 8000a90:	0c9a      	lsrs	r2, r3, #18
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3a01      	subs	r2, #1
 8000a98:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 fa13 	bl	8000ec8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ab8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000abc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2201      	movs	r2, #1
 8000ace:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	22e0      	movs	r2, #224	; 0xe0
 8000ad4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e04a      	b.n	8000b70 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	f241 1308 	movw	r3, #4360	; 0x1108
 8000ae2:	4413      	add	r3, r2
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <HAL_ETH_Init+0x1b0>)
 8000ae8:	4013      	ands	r3, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6952      	ldr	r2, [r2, #20]
 8000aee:	0052      	lsls	r2, r2, #1
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	6809      	ldr	r1, [r1, #0]
 8000af4:	431a      	orrs	r2, r3
 8000af6:	f241 1308 	movw	r3, #4360	; 0x1108
 8000afa:	440b      	add	r3, r1
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fad8 	bl	80010b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 fb1c 	bl	8001142 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	3305      	adds	r3, #5
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	021a      	lsls	r2, r3, #8
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	3303      	adds	r3, #3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	061a      	lsls	r2, r3, #24
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	3302      	adds	r3, #2
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	041b      	lsls	r3, r3, #16
 8000b3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b56:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2210      	movs	r2, #16
 8000b66:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	ffff8001 	.word	0xffff8001

08000b84 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8000b96:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	791b      	ldrb	r3, [r3, #4]
 8000b9c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8000b9e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	7b1b      	ldrb	r3, [r3, #12]
 8000ba4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000ba6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	7b5b      	ldrb	r3, [r3, #13]
 8000bac:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000bae:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	7b9b      	ldrb	r3, [r3, #14]
 8000bb4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000bb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	7bdb      	ldrb	r3, [r3, #15]
 8000bbc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000bbe:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	7c12      	ldrb	r2, [r2, #16]
 8000bc4:	2a00      	cmp	r2, #0
 8000bc6:	d102      	bne.n	8000bce <ETH_SetMACConfig+0x4a>
 8000bc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000bcc:	e000      	b.n	8000bd0 <ETH_SetMACConfig+0x4c>
 8000bce:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000bd0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	7c52      	ldrb	r2, [r2, #17]
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d102      	bne.n	8000be0 <ETH_SetMACConfig+0x5c>
 8000bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bde:	e000      	b.n	8000be2 <ETH_SetMACConfig+0x5e>
 8000be0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000be2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	7c9b      	ldrb	r3, [r3, #18]
 8000be8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000bea:	431a      	orrs	r2, r3
                                macconf->Speed |
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000bf0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8000bf6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	7f1b      	ldrb	r3, [r3, #28]
 8000bfc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8000bfe:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	7f5b      	ldrb	r3, [r3, #29]
 8000c04:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000c06:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	7f92      	ldrb	r2, [r2, #30]
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	d102      	bne.n	8000c16 <ETH_SetMACConfig+0x92>
 8000c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c14:	e000      	b.n	8000c18 <ETH_SetMACConfig+0x94>
 8000c16:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000c18:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	7fdb      	ldrb	r3, [r3, #31]
 8000c1e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000c20:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d102      	bne.n	8000c32 <ETH_SetMACConfig+0xae>
 8000c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c30:	e000      	b.n	8000c34 <ETH_SetMACConfig+0xb0>
 8000c32:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000c34:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000c3a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c42:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8000c44:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b56      	ldr	r3, [pc, #344]	; (8000db0 <ETH_SetMACConfig+0x22c>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	68f9      	ldr	r1, [r7, #12]
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c66:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c6e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c70:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c78:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000c7a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000c82:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000c84:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	d102      	bne.n	8000c96 <ETH_SetMACConfig+0x112>
 8000c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c94:	e000      	b.n	8000c98 <ETH_SetMACConfig+0x114>
 8000c96:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000c98:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <ETH_SetMACConfig+0x230>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	68f9      	ldr	r1, [r7, #12]
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cbc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <ETH_SetMACConfig+0x234>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000ce0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000ce6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d101      	bne.n	8000cf6 <ETH_SetMACConfig+0x172>
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	e000      	b.n	8000cf8 <ETH_SetMACConfig+0x174>
 8000cf6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8000cf8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d0a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8000d0e:	4013      	ands	r3, r2
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	68f9      	ldr	r1, [r7, #12]
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000d20:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000d28:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d36:	f023 0103 	bic.w	r1, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000d4e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d101      	bne.n	8000d72 <ETH_SetMACConfig+0x1ee>
 8000d6e:	2240      	movs	r2, #64	; 0x40
 8000d70:	e000      	b.n	8000d74 <ETH_SetMACConfig+0x1f0>
 8000d72:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8000d74:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000d7c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000d7e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000d86:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8000d94:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	00048083 	.word	0x00048083
 8000db4:	c0f88000 	.word	0xc0f88000
 8000db8:	fffffef0 	.word	0xfffffef0

08000dbc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <ETH_SetDMAConfig+0xf8>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	6809      	ldr	r1, [r1, #0]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8000de2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000dee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	7b1b      	ldrb	r3, [r3, #12]
 8000df4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f241 0304 	movw	r3, #4100	; 0x1004
 8000e02:	4413      	add	r3, r2
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <ETH_SetDMAConfig+0xfc>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6811      	ldr	r1, [r2, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	f241 0304 	movw	r3, #4100	; 0x1004
 8000e16:	440b      	add	r3, r1
 8000e18:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	7b5b      	ldrb	r3, [r3, #13]
 8000e1e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000e24:	4313      	orrs	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <ETH_SetDMAConfig+0x100>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6811      	ldr	r1, [r2, #0]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8000e42:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	7d1b      	ldrb	r3, [r3, #20]
 8000e4c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e4e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	7f5b      	ldrb	r3, [r3, #29]
 8000e54:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	f241 1304 	movw	r3, #4356	; 0x1104
 8000e62:	4413      	add	r3, r2
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <ETH_SetDMAConfig+0x104>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6811      	ldr	r1, [r2, #0]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	f241 1304 	movw	r3, #4356	; 0x1104
 8000e76:	440b      	add	r3, r1
 8000e78:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	7f1b      	ldrb	r3, [r3, #28]
 8000e7e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	f241 1308 	movw	r3, #4360	; 0x1108
 8000e90:	4413      	add	r3, r2
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <ETH_SetDMAConfig+0x108>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6811      	ldr	r1, [r2, #0]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	f241 1308 	movw	r3, #4360	; 0x1108
 8000ea4:	440b      	add	r3, r1
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	ffff87fd 	.word	0xffff87fd
 8000eb8:	ffff2ffe 	.word	0xffff2ffe
 8000ebc:	fffec000 	.word	0xfffec000
 8000ec0:	ffc0efef 	.word	0xffc0efef
 8000ec4:	7fc0ffff 	.word	0x7fc0ffff

08000ec8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0a4      	sub	sp, #144	; 0x90
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000f20:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8000f24:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8000f42:	2300      	movs	r3, #0
 8000f44:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000f60:	2320      	movs	r3, #32
 8000f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000f72:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000f78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fde6 	bl	8000b84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000fd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fd6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fe0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000fe8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fee1 	bl	8000dbc <ETH_SetDMAConfig>
}
 8000ffa:	bf00      	nop
 8000ffc:	3790      	adds	r7, #144	; 0x90
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001014:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800101c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800101e:	f001 fb2d 	bl	800267c <HAL_RCC_GetHCLKFreq>
 8001022:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d908      	bls.n	800103e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d804      	bhi.n	800103e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e027      	b.n	800108e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d908      	bls.n	8001058 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d804      	bhi.n	8001058 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e01a      	b.n	800108e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d903      	bls.n	8001068 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d911      	bls.n	800108c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d908      	bls.n	8001082 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d804      	bhi.n	8001082 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e005      	b.n	800108e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e000      	b.n	800108e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800108c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	01312cff 	.word	0x01312cff
 80010a4:	02160ebf 	.word	0x02160ebf
 80010a8:	039386ff 	.word	0x039386ff
 80010ac:	05f5e0ff 	.word	0x05f5e0ff
 80010b0:	08f0d17f 	.word	0x08f0d17f

080010b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e01d      	b.n	80010fe <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68d9      	ldr	r1, [r3, #12]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	3206      	adds	r2, #6
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d9de      	bls.n	80010c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001112:	4413      	add	r3, r2
 8001114:	2203      	movs	r2, #3
 8001116:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	f241 1314 	movw	r3, #4372	; 0x1114
 8001124:	4413      	add	r3, r2
 8001126:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001142:	b480      	push	{r7}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e024      	b.n	800119a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6919      	ldr	r1, [r3, #16]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	330a      	adds	r3, #10
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d9d7      	bls.n	8001150 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	f241 1330 	movw	r3, #4400	; 0x1130
 80011c6:	4413      	add	r3, r2
 80011c8:	2203      	movs	r2, #3
 80011ca:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6919      	ldr	r1, [r3, #16]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80011d8:	4413      	add	r3, r2
 80011da:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f241 1328 	movw	r3, #4392	; 0x1128
 80011ec:	4413      	add	r3, r2
 80011ee:	6019      	str	r1, [r3, #0]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800120a:	4b89      	ldr	r3, [pc, #548]	; (8001430 <HAL_GPIO_Init+0x234>)
 800120c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800120e:	e194      	b.n	800153a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2101      	movs	r1, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa01 f303 	lsl.w	r3, r1, r3
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8186 	beq.w	8001534 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x3c>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b12      	cmp	r3, #18
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d00b      	beq.n	80012d4 <HAL_GPIO_Init+0xd8>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d007      	beq.n	80012d4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	2b11      	cmp	r3, #17
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	f003 0201 	and.w	r2, r3, #1
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80e0 	beq.w	8001534 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x238>)
 8001376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137a:	4a2e      	ldr	r2, [pc, #184]	; (8001434 <HAL_GPIO_Init+0x238>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_GPIO_Init+0x238>)
 8001386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_GPIO_Init+0x23c>)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a20      	ldr	r2, [pc, #128]	; (800143c <HAL_GPIO_Init+0x240>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d052      	beq.n	8001464 <HAL_GPIO_Init+0x268>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <HAL_GPIO_Init+0x244>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d031      	beq.n	800142a <HAL_GPIO_Init+0x22e>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <HAL_GPIO_Init+0x248>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d02b      	beq.n	8001426 <HAL_GPIO_Init+0x22a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <HAL_GPIO_Init+0x24c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d025      	beq.n	8001422 <HAL_GPIO_Init+0x226>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a1c      	ldr	r2, [pc, #112]	; (800144c <HAL_GPIO_Init+0x250>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01f      	beq.n	800141e <HAL_GPIO_Init+0x222>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <HAL_GPIO_Init+0x254>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x21e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a1a      	ldr	r2, [pc, #104]	; (8001454 <HAL_GPIO_Init+0x258>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x21a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <HAL_GPIO_Init+0x25c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x216>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a18      	ldr	r2, [pc, #96]	; (800145c <HAL_GPIO_Init+0x260>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x212>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_GPIO_Init+0x264>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x20e>
 8001406:	2309      	movs	r3, #9
 8001408:	e02d      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 800140a:	230a      	movs	r3, #10
 800140c:	e02b      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 800140e:	2308      	movs	r3, #8
 8001410:	e029      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 8001412:	2307      	movs	r3, #7
 8001414:	e027      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 8001416:	2306      	movs	r3, #6
 8001418:	e025      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 800141a:	2305      	movs	r3, #5
 800141c:	e023      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 800141e:	2304      	movs	r3, #4
 8001420:	e021      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 8001422:	2303      	movs	r3, #3
 8001424:	e01f      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 8001426:	2302      	movs	r3, #2
 8001428:	e01d      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 800142a:	2301      	movs	r3, #1
 800142c:	e01b      	b.n	8001466 <HAL_GPIO_Init+0x26a>
 800142e:	bf00      	nop
 8001430:	58000080 	.word	0x58000080
 8001434:	58024400 	.word	0x58024400
 8001438:	58000400 	.word	0x58000400
 800143c:	58020000 	.word	0x58020000
 8001440:	58020400 	.word	0x58020400
 8001444:	58020800 	.word	0x58020800
 8001448:	58020c00 	.word	0x58020c00
 800144c:	58021000 	.word	0x58021000
 8001450:	58021400 	.word	0x58021400
 8001454:	58021800 	.word	0x58021800
 8001458:	58021c00 	.word	0x58021c00
 800145c:	58022000 	.word	0x58022000
 8001460:	58022400 	.word	0x58022400
 8001464:	2300      	movs	r3, #0
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001476:	4938      	ldr	r1, [pc, #224]	; (8001558 <HAL_GPIO_Init+0x35c>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800152c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	3301      	adds	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f ae63 	bne.w	8001210 <HAL_GPIO_Init+0x14>
  }
}
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	58000400 	.word	0x58000400

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	6093      	str	r3, [r2, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f007 fc30 	bl	8008e14 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	58000080 	.word	0x58000080

080015c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b08f      	sub	sp, #60	; 0x3c
 80015c4:	af0a      	add	r7, sp, #40	; 0x28
 80015c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e116      	b.n	8001800 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d106      	bne.n	80015f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f008 f863 	bl	80096b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f006 fc95 	bl	8007f40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	687e      	ldr	r6, [r7, #4]
 800161e:	466d      	mov	r5, sp
 8001620:	f106 0410 	add.w	r4, r6, #16
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001630:	e885 0003 	stmia.w	r5, {r0, r1}
 8001634:	1d33      	adds	r3, r6, #4
 8001636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001638:	6838      	ldr	r0, [r7, #0]
 800163a:	f006 fc1f 	bl	8007e7c <USB_CoreInit>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0d7      	b.n	8001800 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fc83 	bl	8007f62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e04a      	b.n	80016f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	333d      	adds	r3, #61	; 0x3d
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	333c      	adds	r3, #60	; 0x3c
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	b298      	uxth	r0, r3
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3342      	adds	r3, #66	; 0x42
 800169e:	4602      	mov	r2, r0
 80016a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	333f      	adds	r3, #63	; 0x3f
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016b6:	7bfa      	ldrb	r2, [r7, #15]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3344      	adds	r3, #68	; 0x44
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	3348      	adds	r3, #72	; 0x48
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3350      	adds	r3, #80	; 0x50
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	3301      	adds	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d3af      	bcc.n	8001662 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e044      	b.n	8001792 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	3301      	adds	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	d3b5      	bcc.n	8001708 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	687e      	ldr	r6, [r7, #4]
 80017a4:	466d      	mov	r5, sp
 80017a6:	f106 0410 	add.w	r4, r6, #16
 80017aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ba:	1d33      	adds	r3, r6, #4
 80017bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f006 fbfa 	bl	8007fb8 <USB_DevInit>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e014      	b.n	8001800 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f80a 	bl	8001808 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f006 fdaa 	bl	8008352 <USB_DevDisconnect>

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001808 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_PCDEx_ActivateLPM+0x44>)
 8001838:	4313      	orrs	r3, r2
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	10000003 	.word	0x10000003

08001850 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_PWREx_ConfigSupply+0x6c>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d008      	beq.n	8001876 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_PWREx_ConfigSupply+0x6c>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e01d      	b.n	80018b2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_PWREx_ConfigSupply+0x6c>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	490f      	ldr	r1, [pc, #60]	; (80018bc <HAL_PWREx_ConfigSupply+0x6c>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001886:	f7fe ff29 	bl	80006dc <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800188c:	e009      	b.n	80018a2 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800188e:	f7fe ff25 	bl	80006dc <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800189c:	d901      	bls.n	80018a2 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e007      	b.n	80018b2 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_PWREx_ConfigSupply+0x6c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ae:	d1ee      	bne.n	800188e <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	58024800 	.word	0x58024800

080018c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ce:	60d3      	str	r3, [r2, #12]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	58024800 	.word	0x58024800

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e3a4      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8087 	beq.w	8001a0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001900:	4b9a      	ldr	r3, [pc, #616]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800190a:	4b98      	ldr	r3, [pc, #608]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	2b10      	cmp	r3, #16
 8001914:	d007      	beq.n	8001926 <HAL_RCC_OscConfig+0x46>
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	2b18      	cmp	r3, #24
 800191a:	d110      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d10b      	bne.n	800193e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001926:	4b91      	ldr	r3, [pc, #580]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x12c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d168      	bne.n	8001a0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e37e      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x76>
 8001948:	4b88      	ldr	r3, [pc, #544]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a87      	ldr	r2, [pc, #540]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 800194e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e02e      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x98>
 800195e:	4b83      	ldr	r3, [pc, #524]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a82      	ldr	r2, [pc, #520]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b80      	ldr	r3, [pc, #512]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7f      	ldr	r2, [pc, #508]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e01d      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0xbc>
 8001982:	4b7a      	ldr	r3, [pc, #488]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a79      	ldr	r2, [pc, #484]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b77      	ldr	r3, [pc, #476]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a76      	ldr	r2, [pc, #472]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0xd4>
 800199c:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a72      	ldr	r2, [pc, #456]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6f      	ldr	r2, [pc, #444]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7fe fe8e 	bl	80006dc <HAL_GetTick>
 80019c0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7fe fe8a 	bl	80006dc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e332      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019d6:	4b65      	ldr	r3, [pc, #404]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0xe4>
 80019e2:	e014      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7fe fe7a 	bl	80006dc <HAL_GetTick>
 80019e8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7fe fe76 	bl	80006dc <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e31e      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019fe:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x10c>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80b0 	beq.w	8001b7c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a24:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a26:	4b51      	ldr	r3, [pc, #324]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_RCC_OscConfig+0x162>
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b18      	cmp	r3, #24
 8001a36:	d149      	bne.n	8001acc <HAL_RCC_OscConfig+0x1ec>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d144      	bne.n	8001acc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a42:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x17a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e2f0      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a5a:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0219 	bic.w	r2, r3, #25
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4941      	ldr	r1, [pc, #260]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7fe fe36 	bl	80006dc <HAL_GetTick>
 8001a70:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a74:	f7fe fe32 	bl	80006dc <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e2da      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	f7fe fe51 	bl	8000738 <HAL_GetREVID>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_RCC_OscConfig+0x1d6>
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	031b      	lsls	r3, r3, #12
 8001aae:	492f      	ldr	r1, [pc, #188]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab4:	e062      	b.n	8001b7c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	061b      	lsls	r3, r3, #24
 8001ac4:	4929      	ldr	r1, [pc, #164]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aca:	e057      	b.n	8001b7c <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d038      	beq.n	8001b46 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 0219 	bic.w	r2, r3, #25
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4922      	ldr	r1, [pc, #136]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fdf9 	bl	80006dc <HAL_GetTick>
 8001aea:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aee:	f7fe fdf5 	bl	80006dc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e29d      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	f7fe fe14 	bl	8000738 <HAL_GetREVID>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d80a      	bhi.n	8001b30 <HAL_RCC_OscConfig+0x250>
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	031b      	lsls	r3, r3, #12
 8001b28:	4910      	ldr	r1, [pc, #64]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
 8001b2e:	e025      	b.n	8001b7c <HAL_RCC_OscConfig+0x29c>
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	061b      	lsls	r3, r3, #24
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	e01a      	b.n	8001b7c <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_RCC_OscConfig+0x28c>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7fe fdc3 	bl	80006dc <HAL_GetTick>
 8001b56:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7fe fdbf 	bl	80006dc <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d903      	bls.n	8001b70 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e267      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
 8001b6c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b70:	4ba0      	ldr	r3, [pc, #640]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ee      	bne.n	8001b5a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0310 	and.w	r3, r3, #16
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 808f 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b9a      	ldr	r3, [pc, #616]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b92:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b94:	4b97      	ldr	r3, [pc, #604]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d007      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2d0>
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b18      	cmp	r3, #24
 8001ba4:	d12d      	bne.n	8001c02 <HAL_RCC_OscConfig+0x322>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d128      	bne.n	8001c02 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bb0:	4b90      	ldr	r3, [pc, #576]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2e8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2b80      	cmp	r3, #128	; 0x80
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e239      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bc8:	f7fe fdb6 	bl	8000738 <HAL_GetREVID>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f241 0303 	movw	r3, #4099	; 0x1003
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d80a      	bhi.n	8001bec <HAL_RCC_OscConfig+0x30c>
 8001bd6:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	069b      	lsls	r3, r3, #26
 8001be4:	4983      	ldr	r1, [pc, #524]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bea:	e05d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bec:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	497e      	ldr	r1, [pc, #504]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c00:	e052      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d035      	beq.n	8001c76 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c0a:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a79      	ldr	r2, [pc, #484]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7fe fd61 	bl	80006dc <HAL_GetTick>
 8001c1a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c1e:	f7fe fd5d 	bl	80006dc <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e205      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c30:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c3c:	f7fe fd7c 	bl	8000738 <HAL_GetREVID>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d80a      	bhi.n	8001c60 <HAL_RCC_OscConfig+0x380>
 8001c4a:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	069b      	lsls	r3, r3, #26
 8001c58:	4966      	ldr	r1, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
 8001c5e:	e023      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c8>
 8001c60:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	4961      	ldr	r1, [pc, #388]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
 8001c74:	e018      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a5e      	ldr	r2, [pc, #376]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7fe fd2b 	bl	80006dc <HAL_GetTick>
 8001c86:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c8a:	f7fe fd27 	bl	80006dc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1cf      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d036      	beq.n	8001d22 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d019      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc0:	4a4c      	ldr	r2, [pc, #304]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fd08 	bl	80006dc <HAL_GetTick>
 8001ccc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7fe fd04 	bl	80006dc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1ac      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ce2:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3f0>
 8001cee:	e018      	b.n	8001d22 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf0:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf4:	4a3f      	ldr	r2, [pc, #252]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfc:	f7fe fcee 	bl	80006dc <HAL_GetTick>
 8001d00:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d04:	f7fe fcea 	bl	80006dc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e192      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d019      	beq.n	8001d6a <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d36:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2e      	ldr	r2, [pc, #184]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d42:	f7fe fccb 	bl	80006dc <HAL_GetTick>
 8001d46:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d4a:	f7fe fcc7 	bl	80006dc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e16f      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d5c:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46a>
 8001d68:	e018      	b.n	8001d9c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d76:	f7fe fcb1 	bl	80006dc <HAL_GetTick>
 8001d7a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d7e:	f7fe fcad 	bl	80006dc <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e155      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8086 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCC_OscConfig+0x518>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_RCC_OscConfig+0x518>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001db6:	f7fe fc91 	bl	80006dc <HAL_GetTick>
 8001dba:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7fe fc8d 	bl	80006dc <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e135      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x518>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x51c>
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a02      	ldr	r2, [pc, #8]	; (8001df4 <HAL_RCC_OscConfig+0x514>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	e032      	b.n	8001e58 <HAL_RCC_OscConfig+0x578>
 8001df2:	bf00      	nop
 8001df4:	58024400 	.word	0x58024400
 8001df8:	58024800 	.word	0x58024800
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x53e>
 8001e04:	4b8f      	ldr	r3, [pc, #572]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a8e      	ldr	r2, [pc, #568]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a8b      	ldr	r2, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e16:	f023 0304 	bic.w	r3, r3, #4
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x578>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x560>
 8001e26:	4b87      	ldr	r3, [pc, #540]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a86      	ldr	r2, [pc, #536]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b84      	ldr	r3, [pc, #528]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a83      	ldr	r2, [pc, #524]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0x578>
 8001e40:	4b80      	ldr	r3, [pc, #512]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a7f      	ldr	r2, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a7c      	ldr	r2, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e52:	f023 0304 	bic.w	r3, r3, #4
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7fe fc3c 	bl	80006dc <HAL_GetTick>
 8001e64:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe fc38 	bl	80006dc <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0de      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e7e:	4b71      	ldr	r3, [pc, #452]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <HAL_RCC_OscConfig+0x588>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fc26 	bl	80006dc <HAL_GetTick>
 8001e90:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7fe fc22 	bl	80006dc <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0c8      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eaa:	4b66      	ldr	r3, [pc, #408]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80bd 	beq.w	800203a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ec0:	4b60      	ldr	r3, [pc, #384]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ec8:	2b18      	cmp	r3, #24
 8001eca:	f000 80b4 	beq.w	8002036 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	f040 8095 	bne.w	8002002 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a59      	ldr	r2, [pc, #356]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fbfa 	bl	80006dc <HAL_GetTick>
 8001ee8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe fbf6 	bl	80006dc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e09e      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0a:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <HAL_RCC_OscConfig+0x768>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	4949      	ldr	r1, [pc, #292]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	628b      	str	r3, [r1, #40]	; 0x28
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	3b01      	subs	r3, #1
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	061b      	lsls	r3, r3, #24
 8001f50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f54:	493b      	ldr	r1, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	4a39      	ldr	r2, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f66:	4b37      	ldr	r3, [pc, #220]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_RCC_OscConfig+0x76c>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f72:	00d2      	lsls	r2, r2, #3
 8001f74:	4933      	ldr	r1, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	f023 020c 	bic.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	492f      	ldr	r1, [pc, #188]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	f023 0202 	bic.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	492a      	ldr	r1, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	4a28      	ldr	r2, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	4a25      	ldr	r2, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	4a22      	ldr	r2, [pc, #136]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fce:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fb7f 	bl	80006dc <HAL_GetTick>
 8001fde:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe fb7b 	bl	80006dc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e023      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x702>
 8002000:	e01b      	b.n	800203a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 8002008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7fe fb65 	bl	80006dc <HAL_GetTick>
 8002012:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe fb61 	bl	80006dc <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e009      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x764>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x736>
 8002034:	e001      	b.n	800203a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	58024400 	.word	0x58024400
 8002048:	fffffc0c 	.word	0xfffffc0c
 800204c:	ffff0007 	.word	0xffff0007

08002050 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e18d      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b8a      	ldr	r3, [pc, #552]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b87      	ldr	r3, [pc, #540]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 020f 	bic.w	r2, r3, #15
 800207a:	4985      	ldr	r1, [pc, #532]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b83      	ldr	r3, [pc, #524]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e175      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d908      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b0:	4b78      	ldr	r3, [pc, #480]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4975      	ldr	r1, [pc, #468]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	4b70      	ldr	r3, [pc, #448]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020da:	429a      	cmp	r2, r3
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020de:	4b6d      	ldr	r3, [pc, #436]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	496a      	ldr	r1, [pc, #424]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	4b64      	ldr	r3, [pc, #400]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002108:	429a      	cmp	r2, r3
 800210a:	d908      	bls.n	800211e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800210c:	4b61      	ldr	r3, [pc, #388]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	495e      	ldr	r1, [pc, #376]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 800211a:	4313      	orrs	r3, r2
 800211c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002136:	429a      	cmp	r2, r3
 8002138:	d908      	bls.n	800214c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800213a:	4b56      	ldr	r3, [pc, #344]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4953      	ldr	r1, [pc, #332]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002148:	4313      	orrs	r3, r2
 800214a:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	429a      	cmp	r2, r3
 8002166:	d908      	bls.n	800217a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f023 020f 	bic.w	r2, r3, #15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4947      	ldr	r1, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002176:	4313      	orrs	r3, r2
 8002178:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d055      	beq.n	8002232 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4940      	ldr	r1, [pc, #256]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002194:	4313      	orrs	r3, r2
 8002196:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a0:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d121      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0e7      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0db      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0cf      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e0:	4b2c      	ldr	r3, [pc, #176]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0c7      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f023 0207 	bic.w	r2, r3, #7
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4925      	ldr	r1, [pc, #148]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe fa6b 	bl	80006dc <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002208:	e00a      	b.n	8002220 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f7fe fa67 	bl	80006dc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0af      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	429a      	cmp	r2, r3
 8002230:	d1eb      	bne.n	800220a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	429a      	cmp	r2, r3
 800224c:	d208      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f023 020f 	bic.w	r2, r3, #15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	490e      	ldr	r1, [pc, #56]	; (8002294 <HAL_RCC_ClockConfig+0x244>)
 800225c:	4313      	orrs	r3, r2
 800225e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d214      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	4906      	ldr	r1, [pc, #24]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e077      	b.n	8002380 <HAL_RCC_ClockConfig+0x330>
 8002290:	52002000 	.word	0x52002000
 8002294:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d208      	bcs.n	80022c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b4:	4b34      	ldr	r3, [pc, #208]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4931      	ldr	r1, [pc, #196]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022de:	429a      	cmp	r2, r3
 80022e0:	d208      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4926      	ldr	r1, [pc, #152]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800230c:	429a      	cmp	r2, r3
 800230e:	d208      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	491a      	ldr	r1, [pc, #104]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 800231e:	4313      	orrs	r3, r2
 8002320:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800233a:	429a      	cmp	r2, r3
 800233c:	d208      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	490f      	ldr	r1, [pc, #60]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 800234c:	4313      	orrs	r3, r2
 800234e:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002350:	f000 f822 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002354:	4601      	mov	r1, r0
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_RCC_ClockConfig+0x338>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x33c>)
 8002362:	5cd3      	ldrb	r3, [r2, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa21 f303 	lsr.w	r3, r1, r3
 800236c:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_RCC_ClockConfig+0x340>)
 800236e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_RCC_ClockConfig+0x344>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f967 	bl	8000648 <HAL_InitTick>
 800237a:	4603      	mov	r3, r0
 800237c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800237e:	7afb      	ldrb	r3, [r7, #11]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58024400 	.word	0x58024400
 800238c:	08009f94 	.word	0x08009f94
 8002390:	24000008 	.word	0x24000008
 8002394:	24000000 	.word	0x24000000

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239e:	4baf      	ldr	r3, [pc, #700]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a6:	2b18      	cmp	r3, #24
 80023a8:	f200 814e 	bhi.w	8002648 <HAL_RCC_GetSysClockFreq+0x2b0>
 80023ac:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b2:	bf00      	nop
 80023b4:	08002419 	.word	0x08002419
 80023b8:	08002649 	.word	0x08002649
 80023bc:	08002649 	.word	0x08002649
 80023c0:	08002649 	.word	0x08002649
 80023c4:	08002649 	.word	0x08002649
 80023c8:	08002649 	.word	0x08002649
 80023cc:	08002649 	.word	0x08002649
 80023d0:	08002649 	.word	0x08002649
 80023d4:	0800243f 	.word	0x0800243f
 80023d8:	08002649 	.word	0x08002649
 80023dc:	08002649 	.word	0x08002649
 80023e0:	08002649 	.word	0x08002649
 80023e4:	08002649 	.word	0x08002649
 80023e8:	08002649 	.word	0x08002649
 80023ec:	08002649 	.word	0x08002649
 80023f0:	08002649 	.word	0x08002649
 80023f4:	08002445 	.word	0x08002445
 80023f8:	08002649 	.word	0x08002649
 80023fc:	08002649 	.word	0x08002649
 8002400:	08002649 	.word	0x08002649
 8002404:	08002649 	.word	0x08002649
 8002408:	08002649 	.word	0x08002649
 800240c:	08002649 	.word	0x08002649
 8002410:	08002649 	.word	0x08002649
 8002414:	0800244b 	.word	0x0800244b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002418:	4b90      	ldr	r3, [pc, #576]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002424:	4b8d      	ldr	r3, [pc, #564]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	4a8c      	ldr	r2, [pc, #560]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002436:	e10a      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002438:	4b89      	ldr	r3, [pc, #548]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800243a:	61bb      	str	r3, [r7, #24]
    break;
 800243c:	e107      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800243e:	4b89      	ldr	r3, [pc, #548]	; (8002664 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002440:	61bb      	str	r3, [r7, #24]
    break;
 8002442:	e104      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002444:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002446:	61bb      	str	r3, [r7, #24]
    break;
 8002448:	e101      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800244a:	4b84      	ldr	r3, [pc, #528]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800246a:	4b7c      	ldr	r3, [pc, #496]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80da 	beq.w	8002642 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d05a      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x1b2>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d302      	bcc.n	800249e <HAL_RCC_GetSysClockFreq+0x106>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d078      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x1f6>
 800249c:	e099      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800249e:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d02d      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	4a6a      	ldr	r2, [pc, #424]	; (8002660 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80024e8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800266c <HAL_RCC_GetSysClockFreq+0x2d4>
 80024ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002504:	e087      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002510:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002670 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002518:	4b50      	ldr	r3, [pc, #320]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002528:	ed97 6a02 	vldr	s12, [r7, #8]
 800252c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800266c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800253c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002548:	e065      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002554:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002674 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800255c:	4b3f      	ldr	r3, [pc, #252]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800256c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002570:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800266c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800257c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800258c:	e043      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002598:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e0>
 800259c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80025b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800266c <HAL_RCC_GetSysClockFreq+0x2d4>
 80025b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025d0:	e021      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002674 <HAL_RCC_GetSysClockFreq+0x2dc>
 80025e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80025f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800266c <HAL_RCC_GetSysClockFreq+0x2d4>
 80025fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800260c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002614:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002620:	3301      	adds	r3, #1
 8002622:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800262e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263a:	ee17 3a90 	vmov	r3, s15
 800263e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002640:	e005      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
    break;
 8002646:	e002      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800264a:	61bb      	str	r3, [r7, #24]
    break;
 800264c:	bf00      	nop
  }

  return sysclockfreq;
 800264e:	69bb      	ldr	r3, [r7, #24]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3724      	adds	r7, #36	; 0x24
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	58024400 	.word	0x58024400
 8002660:	03d09000 	.word	0x03d09000
 8002664:	003d0900 	.word	0x003d0900
 8002668:	007a1200 	.word	0x007a1200
 800266c:	46000000 	.word	0x46000000
 8002670:	4c742400 	.word	0x4c742400
 8002674:	4a742400 	.word	0x4a742400
 8002678:	4af42400 	.word	0x4af42400

0800267c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002680:	f001 f9e2 	bl	8003a48 <HAL_RCCEx_GetD1SysClockFreq>
 8002684:	4601      	mov	r1, r0
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_RCC_GetHCLKFreq+0x30>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	fa21 f303 	lsr.w	r3, r1, r3
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x34>)
 800269c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800269e:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x34>)
 80026a0:	681b      	ldr	r3, [r3, #0]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	58024400 	.word	0x58024400
 80026ac:	08009f94 	.word	0x08009f94
 80026b0:	2400000c 	.word	0x2400000c

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026b8:	f7ff ffe0 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026bc:	4601      	mov	r1, r0
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	58024400 	.word	0x58024400
 80026dc:	08009f94 	.word	0x08009f94

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026e4:	f7ff ffca 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80026e8:	4601      	mov	r1, r0
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	58024400 	.word	0x58024400
 8002708:	08009f94 	.word	0x08009f94

0800270c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002718:	2300      	movs	r3, #0
 800271a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03d      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002730:	d013      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002736:	d802      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800273c:	e01f      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800273e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002742:	d013      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002748:	d01c      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800274a:	e018      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800274c:	4baf      	ldr	r3, [pc, #700]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	4aae      	ldr	r2, [pc, #696]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002758:	e015      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f001 f98d 	bl	8003a80 <RCCEx_PLL2_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800276a:	e00c      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3324      	adds	r3, #36	; 0x24
 8002770:	2102      	movs	r1, #2
 8002772:	4618      	mov	r0, r3
 8002774:	f001 fa36 	bl	8003be4 <RCCEx_PLL3_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
      break;
 8002782:	e000      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800278c:	4b9f      	ldr	r3, [pc, #636]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800278e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002798:	499c      	ldr	r1, [pc, #624]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800279a:	4313      	orrs	r3, r2
 800279c:	650b      	str	r3, [r1, #80]	; 0x50
 800279e:	e001      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03d      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d826      	bhi.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80027b8:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027d5 	.word	0x080027d5
 80027c4:	080027e3 	.word	0x080027e3
 80027c8:	080027f5 	.word	0x080027f5
 80027cc:	0800280d 	.word	0x0800280d
 80027d0:	0800280d 	.word	0x0800280d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d4:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	4a8c      	ldr	r2, [pc, #560]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027e0:	e015      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 f949 	bl	8003a80 <RCCEx_PLL2_Config>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027f2:	e00c      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3324      	adds	r3, #36	; 0x24
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 f9f2 	bl	8003be4 <RCCEx_PLL3_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002804:	e003      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
      break;
 800280a:	e000      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800280c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002814:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	f023 0207 	bic.w	r2, r3, #7
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	497a      	ldr	r1, [pc, #488]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002822:	4313      	orrs	r3, r2
 8002824:	650b      	str	r3, [r1, #80]	; 0x50
 8002826:	e001      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	2b00      	cmp	r3, #0
 8002836:	d03e      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	d01c      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d804      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d00d      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800284c:	e01e      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800284e:	2bc0      	cmp	r3, #192	; 0xc0
 8002850:	d01f      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002856:	d01e      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002858:	e018      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800285a:	4b6c      	ldr	r3, [pc, #432]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	4a6b      	ldr	r2, [pc, #428]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002866:	e017      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f001 f906 	bl	8003a80 <RCCEx_PLL2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002878:	e00e      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3324      	adds	r3, #36	; 0x24
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f001 f9af 	bl	8003be4 <RCCEx_PLL3_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800288a:	e005      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	75fb      	strb	r3, [r7, #23]
      break;
 8002890:	e002      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800289e:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	4958      	ldr	r1, [pc, #352]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	650b      	str	r3, [r1, #80]	; 0x50
 80028b0:	e001      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
 80028b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d044      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028cc:	d01f      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80028ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d2:	d805      	bhi.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028dc:	d00e      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80028de:	e01f      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80028e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028e4:	d01f      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80028e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ea:	d01e      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80028ec:	e018      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	4a46      	ldr	r2, [pc, #280]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028fa:	e017      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3304      	adds	r3, #4
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f8bc 	bl	8003a80 <RCCEx_PLL2_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800290c:	e00e      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3324      	adds	r3, #36	; 0x24
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f001 f965 	bl	8003be4 <RCCEx_PLL3_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800291e:	e005      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
      break;
 8002924:	e002      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800292a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002932:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002940:	4932      	ldr	r1, [pc, #200]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002942:	4313      	orrs	r3, r2
 8002944:	658b      	str	r3, [r1, #88]	; 0x58
 8002946:	e001      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002954:	2b00      	cmp	r3, #0
 8002956:	d044      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800295e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002962:	d01f      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002968:	d805      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800296e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002972:	d00e      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002974:	e01f      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002976:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800297a:	d01f      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800297c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002980:	d01e      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002982:	e018      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800298a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002990:	e017      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3304      	adds	r3, #4
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f001 f871 	bl	8003a80 <RCCEx_PLL2_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029a2:	e00e      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3324      	adds	r3, #36	; 0x24
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f91a 	bl	8003be4 <RCCEx_PLL3_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b4:	e005      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
      break;
 80029ba:	e002      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80029c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029d6:	490d      	ldr	r1, [pc, #52]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	658b      	str	r3, [r1, #88]	; 0x58
 80029dc:	e001      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d035      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d00c      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d802      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01b      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80029fe:	e017      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	d018      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002a08:	e012      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a10:	4baf      	ldr	r3, [pc, #700]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4aae      	ldr	r2, [pc, #696]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a1c:	e00e      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2102      	movs	r1, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f82b 	bl	8003a80 <RCCEx_PLL2_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a2e:	e005      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	75fb      	strb	r3, [r7, #23]
      break;
 8002a34:	e002      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a42:	4ba3      	ldr	r3, [pc, #652]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	49a0      	ldr	r1, [pc, #640]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a54:	e001      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d042      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6e:	d01f      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a74:	d805      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d00e      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002a80:	e01f      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a86:	d01f      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a8c:	d01e      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002a8e:	e018      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a90:	4b8f      	ldr	r3, [pc, #572]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	4a8e      	ldr	r2, [pc, #568]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a9c:	e017      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 ffeb 	bl	8003a80 <RCCEx_PLL2_Config>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002aae:	e00e      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3324      	adds	r3, #36	; 0x24
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f894 	bl	8003be4 <RCCEx_PLL3_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ac0:	e005      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac6:	e002      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	497b      	ldr	r1, [pc, #492]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ae6:	e001      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d042      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b00:	d01b      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b06:	d805      	bhi.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d022      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002b12:	e01b      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b18:	d01d      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1e:	d01c      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002b20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b24:	d01b      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002b26:	e011      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 ffa6 	bl	8003a80 <RCCEx_PLL2_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b38:	e012      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3324      	adds	r3, #36	; 0x24
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 f84f 	bl	8003be4 <RCCEx_PLL3_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b4a:	e009      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b50:	e006      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002b52:	bf00      	nop
 8002b54:	e004      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002b56:	bf00      	nop
 8002b58:	e002      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e000      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b66:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	4957      	ldr	r1, [pc, #348]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	650b      	str	r3, [r1, #80]	; 0x50
 8002b78:	e001      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d044      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b94:	d01b      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9a:	d805      	bhi.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d022      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ba6:	e01b      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d01d      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb2:	d01c      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bb8:	d01b      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002bba:	e011      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 ff5c 	bl	8003a80 <RCCEx_PLL2_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e012      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3324      	adds	r3, #36	; 0x24
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 f805 	bl	8003be4 <RCCEx_PLL3_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bde:	e009      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
      break;
 8002be4:	e006      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e004      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bfa:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c08:	4931      	ldr	r1, [pc, #196]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	658b      	str	r3, [r1, #88]	; 0x58
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d02d      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c28:	d005      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2e:	d009      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002c34:	e00f      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	4a25      	ldr	r2, [pc, #148]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c42:	e00c      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 ff18 	bl	8003a80 <RCCEx_PLL2_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c54:	e003      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c70:	4917      	ldr	r1, [pc, #92]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	650b      	str	r3, [r1, #80]	; 0x50
 8002c76:	e001      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d035      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d81b      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002cd5 	.word	0x08002cd5
 8002c9c:	08002ca9 	.word	0x08002ca9
 8002ca0:	08002cb7 	.word	0x08002cb7
 8002ca4:	08002cd5 	.word	0x08002cd5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cb4:	e00f      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fedf 	bl	8003a80 <RCCEx_PLL2_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002cc6:	e006      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ccc:	e003      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002cce:	bf00      	nop
 8002cd0:	58024400 	.word	0x58024400
      break;
 8002cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cdc:	4bba      	ldr	r3, [pc, #744]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	f023 0203 	bic.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	49b7      	ldr	r1, [pc, #732]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cee:	e001      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8086 	beq.w	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d02:	4bb2      	ldr	r3, [pc, #712]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4ab1      	ldr	r2, [pc, #708]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d0e:	f7fd fce5 	bl	80006dc <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d14:	e009      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fd fce1 	bl	80006dc <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b64      	cmp	r3, #100	; 0x64
 8002d22:	d902      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	75fb      	strb	r3, [r7, #23]
        break;
 8002d28:	e005      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2a:	4ba8      	ldr	r3, [pc, #672]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ef      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002d36:	7dfb      	ldrb	r3, [r7, #23]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d166      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d3c:	4ba2      	ldr	r3, [pc, #648]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d46:	4053      	eors	r3, r2
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d50:	4b9d      	ldr	r3, [pc, #628]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d58:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d5a:	4b9b      	ldr	r3, [pc, #620]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a9a      	ldr	r2, [pc, #616]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d66:	4b98      	ldr	r3, [pc, #608]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	4a97      	ldr	r2, [pc, #604]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d72:	4a95      	ldr	r2, [pc, #596]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d82:	d115      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fd fcaa 	bl	80006dc <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fd fca6 	bl	80006dc <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d902      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	75fb      	strb	r3, [r7, #23]
            break;
 8002da2:	e005      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ed      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d126      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc4:	d10d      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002dc6:	4b80      	ldr	r3, [pc, #512]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dd4:	0919      	lsrs	r1, r3, #4
 8002dd6:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002dd8:	400b      	ands	r3, r1
 8002dda:	497b      	ldr	r1, [pc, #492]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	610b      	str	r3, [r1, #16]
 8002de0:	e005      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002de2:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	4a78      	ldr	r2, [pc, #480]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002de8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002dec:	6113      	str	r3, [r2, #16]
 8002dee:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfc:	4972      	ldr	r1, [pc, #456]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	670b      	str	r3, [r1, #112]	; 0x70
 8002e02:	e004      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	75bb      	strb	r3, [r7, #22]
 8002e08:	e001      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d07d      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e1e:	2b28      	cmp	r3, #40	; 0x28
 8002e20:	d866      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002e22:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e28:	08002ef7 	.word	0x08002ef7
 8002e2c:	08002ef1 	.word	0x08002ef1
 8002e30:	08002ef1 	.word	0x08002ef1
 8002e34:	08002ef1 	.word	0x08002ef1
 8002e38:	08002ef1 	.word	0x08002ef1
 8002e3c:	08002ef1 	.word	0x08002ef1
 8002e40:	08002ef1 	.word	0x08002ef1
 8002e44:	08002ef1 	.word	0x08002ef1
 8002e48:	08002ecd 	.word	0x08002ecd
 8002e4c:	08002ef1 	.word	0x08002ef1
 8002e50:	08002ef1 	.word	0x08002ef1
 8002e54:	08002ef1 	.word	0x08002ef1
 8002e58:	08002ef1 	.word	0x08002ef1
 8002e5c:	08002ef1 	.word	0x08002ef1
 8002e60:	08002ef1 	.word	0x08002ef1
 8002e64:	08002ef1 	.word	0x08002ef1
 8002e68:	08002edf 	.word	0x08002edf
 8002e6c:	08002ef1 	.word	0x08002ef1
 8002e70:	08002ef1 	.word	0x08002ef1
 8002e74:	08002ef1 	.word	0x08002ef1
 8002e78:	08002ef1 	.word	0x08002ef1
 8002e7c:	08002ef1 	.word	0x08002ef1
 8002e80:	08002ef1 	.word	0x08002ef1
 8002e84:	08002ef1 	.word	0x08002ef1
 8002e88:	08002ef7 	.word	0x08002ef7
 8002e8c:	08002ef1 	.word	0x08002ef1
 8002e90:	08002ef1 	.word	0x08002ef1
 8002e94:	08002ef1 	.word	0x08002ef1
 8002e98:	08002ef1 	.word	0x08002ef1
 8002e9c:	08002ef1 	.word	0x08002ef1
 8002ea0:	08002ef1 	.word	0x08002ef1
 8002ea4:	08002ef1 	.word	0x08002ef1
 8002ea8:	08002ef7 	.word	0x08002ef7
 8002eac:	08002ef1 	.word	0x08002ef1
 8002eb0:	08002ef1 	.word	0x08002ef1
 8002eb4:	08002ef1 	.word	0x08002ef1
 8002eb8:	08002ef1 	.word	0x08002ef1
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08002ef1 	.word	0x08002ef1
 8002ec4:	08002ef1 	.word	0x08002ef1
 8002ec8:	08002ef7 	.word	0x08002ef7
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fdd4 	bl	8003a80 <RCCEx_PLL2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002edc:	e00c      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3324      	adds	r3, #36	; 0x24
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fe7d 	bl	8003be4 <RCCEx_PLL3_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002eee:	e003      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002efe:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0a:	492f      	ldr	r1, [pc, #188]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	654b      	str	r3, [r1, #84]	; 0x54
 8002f10:	e001      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d037      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d820      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f73 	.word	0x08002f73
 8002f34:	08002f49 	.word	0x08002f49
 8002f38:	08002f5b 	.word	0x08002f5b
 8002f3c:	08002f73 	.word	0x08002f73
 8002f40:	08002f73 	.word	0x08002f73
 8002f44:	08002f73 	.word	0x08002f73
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fd96 	bl	8003a80 <RCCEx_PLL2_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f58:	e00c      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3324      	adds	r3, #36	; 0x24
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fe3f 	bl	8003be4 <RCCEx_PLL3_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f6a:	e003      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f70:	e000      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f023 0207 	bic.w	r2, r3, #7
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f86:	4910      	ldr	r1, [pc, #64]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f8c:	e001      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d040      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d827      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fff 	.word	0x08002fff
 8002fb4:	08002fd5 	.word	0x08002fd5
 8002fb8:	08002fe7 	.word	0x08002fe7
 8002fbc:	08002fff 	.word	0x08002fff
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fff 	.word	0x08002fff
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	58024800 	.word	0x58024800
 8002fd0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	2101      	movs	r1, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fd50 	bl	8003a80 <RCCEx_PLL2_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002fe4:	e00c      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3324      	adds	r3, #36	; 0x24
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fdf9 	bl	8003be4 <RCCEx_PLL3_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffc:	e000      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003006:	4bb3      	ldr	r3, [pc, #716]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	49af      	ldr	r1, [pc, #700]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	658b      	str	r3, [r1, #88]	; 0x58
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d044      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003036:	d01b      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303c:	d805      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d022      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003048:	e01b      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d01d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003054:	d01c      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800305a:	d01b      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800305c:	e011      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fd0b 	bl	8003a80 <RCCEx_PLL2_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800306e:	e012      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3324      	adds	r3, #36	; 0x24
 8003074:	2102      	movs	r1, #2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fdb4 	bl	8003be4 <RCCEx_PLL3_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003080:	e009      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
      break;
 8003086:	e006      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003088:	bf00      	nop
 800308a:	e004      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800308c:	bf00      	nop
 800308e:	e002      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003096:	7dfb      	ldrb	r3, [r7, #23]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800309c:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030aa:	498a      	ldr	r1, [pc, #552]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	654b      	str	r3, [r1, #84]	; 0x54
 80030b0:	e001      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d044      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030cc:	d01b      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80030ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d2:	d805      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d022      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80030de:	e01b      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80030e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e4:	d01d      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80030e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030ea:	d01c      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80030ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f0:	d01b      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80030f2:	e011      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fcc0 	bl	8003a80 <RCCEx_PLL2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003104:	e012      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3324      	adds	r3, #36	; 0x24
 800310a:	2102      	movs	r1, #2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fd69 	bl	8003be4 <RCCEx_PLL3_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003116:	e009      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
      break;
 800311c:	e006      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800311e:	bf00      	nop
 8003120:	e004      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800312a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003132:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003140:	4964      	ldr	r1, [pc, #400]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003142:	4313      	orrs	r3, r2
 8003144:	658b      	str	r3, [r1, #88]	; 0x58
 8003146:	e001      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d044      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800315e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003162:	d01b      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003168:	d805      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d022      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800316e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003174:	e01b      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317a:	d01d      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800317c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003180:	d01c      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003182:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003186:	d01b      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003188:	e011      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fc75 	bl	8003a80 <RCCEx_PLL2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800319a:	e012      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3324      	adds	r3, #36	; 0x24
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fd1e 	bl	8003be4 <RCCEx_PLL3_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031ac:	e009      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
      break;
 80031b2:	e006      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80031b4:	bf00      	nop
 80031b6:	e004      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80031b8:	bf00      	nop
 80031ba:	e002      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80031c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031c8:	4b42      	ldr	r3, [pc, #264]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d6:	493f      	ldr	r1, [pc, #252]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	658b      	str	r3, [r1, #88]	; 0x58
 80031dc:	e001      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01b      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f8:	d10b      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3324      	adds	r3, #36	; 0x24
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fcef 	bl	8003be4 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75bb      	strb	r3, [r7, #22]
 8003210:	e009      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003212:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003220:	492c      	ldr	r1, [pc, #176]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003222:	4313      	orrs	r3, r2
 8003224:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01b      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323c:	d10b      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3324      	adds	r3, #36	; 0x24
 8003242:	2102      	movs	r1, #2
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fccd 	bl	8003be4 <RCCEx_PLL3_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75bb      	strb	r3, [r7, #22]
 8003254:	e009      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003256:	4b1f      	ldr	r3, [pc, #124]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003264:	491b      	ldr	r1, [pc, #108]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d032      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d00d      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8003282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003286:	d016      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d111      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fbf4 	bl	8003a80 <RCCEx_PLL2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800329c:	e00c      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fc9d 	bl	8003be4 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032cc:	4901      	ldr	r1, [pc, #4]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	658b      	str	r3, [r1, #88]	; 0x58
 80032d2:	e003      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80032d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	7dfb      	ldrb	r3, [r7, #23]
 80032da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d02f      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f2:	d00c      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80032f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032f8:	d015      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80032fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fe:	d10f      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003300:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	4a78      	ldr	r2, [pc, #480]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800330c:	e00c      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fc65 	bl	8003be4 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	75fb      	strb	r3, [r7, #23]
      break;
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8003326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332e:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333c:	496a      	ldr	r1, [pc, #424]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	654b      	str	r3, [r1, #84]	; 0x54
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d029      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d007      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003362:	e00f      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003364:	4b60      	ldr	r3, [pc, #384]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	4a5f      	ldr	r2, [pc, #380]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003370:	e00b      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2102      	movs	r1, #2
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fb81 	bl	8003a80 <RCCEx_PLL2_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003382:	e002      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
      break;
 8003388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003390:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003394:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339c:	4952      	ldr	r1, [pc, #328]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
 80033a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3324      	adds	r3, #36	; 0x24
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fc12 	bl	8003be4 <RCCEx_PLL3_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02f      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033de:	d00c      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80033e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e4:	d802      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xce0>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d011      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80033ea:	e00d      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d00f      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80033f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f6:	d00e      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	4a3a      	ldr	r2, [pc, #232]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003406:	e007      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	75fb      	strb	r3, [r7, #23]
      break;
 800340c:	e004      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800340e:	bf00      	nop
 8003410:	e002      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8003416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800341e:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342a:	492f      	ldr	r1, [pc, #188]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	654b      	str	r3, [r1, #84]	; 0x54
 8003430:	e001      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4926      	ldr	r1, [pc, #152]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003450:	4313      	orrs	r3, r2
 8003452:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800346e:	491e      	ldr	r1, [pc, #120]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348c:	4916      	ldr	r1, [pc, #88]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80034a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034a8:	6113      	str	r3, [r2, #16]
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034b4:	490c      	ldr	r1, [pc, #48]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da08      	bge.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80034c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	4906      	ldr	r1, [pc, #24]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80034d4:	7dbb      	ldrb	r3, [r7, #22]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	58024400 	.word	0x58024400

080034ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80034f0:	f7ff f8c4 	bl	800267c <HAL_RCC_GetHCLKFreq>
 80034f4:	4601      	mov	r1, r0
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	58024400 	.word	0x58024400
 8003514:	08009f94 	.word	0x08009f94

08003518 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	; 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003520:	4b9d      	ldr	r3, [pc, #628]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800352a:	4b9b      	ldr	r3, [pc, #620]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	0b1b      	lsrs	r3, r3, #12
 8003530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003534:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8003536:	4b98      	ldr	r3, [pc, #608]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003540:	4b95      	ldr	r3, [pc, #596]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	08db      	lsrs	r3, r3, #3
 8003546:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	ee07 3a90 	vmov	s15, r3
 8003554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003558:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 810a 	beq.w	8003778 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d05a      	beq.n	8003620 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 800356a:	2b01      	cmp	r3, #1
 800356c:	d302      	bcc.n	8003574 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 800356e:	2b02      	cmp	r3, #2
 8003570:	d078      	beq.n	8003664 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8003572:	e099      	b.n	80036a8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003574:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02d      	beq.n	80035dc <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003580:	4b85      	ldr	r3, [pc, #532]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	08db      	lsrs	r3, r3, #3
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	4a84      	ldr	r2, [pc, #528]	; (800379c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035aa:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80035be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80037a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80035da:	e087      	b.n	80036ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80037a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80035ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ee:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003602:	eddf 5a67 	vldr	s11, [pc, #412]	; 80037a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800361e:	e065      	b.n	80036ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80037a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800362e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003632:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003642:	ed97 6a03 	vldr	s12, [r7, #12]
 8003646:	eddf 5a56 	vldr	s11, [pc, #344]	; 80037a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800364a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800365a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003662:	e043      	b.n	80036ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80037ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003676:	4b48      	ldr	r3, [pc, #288]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003686:	ed97 6a03 	vldr	s12, [r7, #12]
 800368a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80037a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800368e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800369a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036a6:	e021      	b.n	80036ec <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80037a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80036b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80037a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80036d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036ec:	4b2a      	ldr	r3, [pc, #168]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	0a5b      	lsrs	r3, r3, #9
 80036f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003706:	edd7 6a07 	vldr	s13, [r7, #28]
 800370a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800370e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003712:	ee17 2a90 	vmov	r2, s15
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800371a:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	0c1b      	lsrs	r3, r3, #16
 8003720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003734:	edd7 6a07 	vldr	s13, [r7, #28]
 8003738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003740:	ee17 2a90 	vmov	r2, s15
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	0e1b      	lsrs	r3, r3, #24
 800374e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800375e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003762:	edd7 6a07 	vldr	s13, [r7, #28]
 8003766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376e:	ee17 2a90 	vmov	r2, s15
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003776:	e008      	b.n	800378a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
}
 800378a:	bf00      	nop
 800378c:	3724      	adds	r7, #36	; 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	58024400 	.word	0x58024400
 800379c:	03d09000 	.word	0x03d09000
 80037a0:	46000000 	.word	0x46000000
 80037a4:	4c742400 	.word	0x4c742400
 80037a8:	4a742400 	.word	0x4a742400
 80037ac:	4af42400 	.word	0x4af42400

080037b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037b8:	4b9d      	ldr	r3, [pc, #628]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80037c2:	4b9b      	ldr	r3, [pc, #620]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	0d1b      	lsrs	r3, r3, #20
 80037c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037cc:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 80037ce:	4b98      	ldr	r3, [pc, #608]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80037d8:	4b95      	ldr	r3, [pc, #596]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	fb02 f303 	mul.w	r3, r2, r3
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 810a 	beq.w	8003a10 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d05a      	beq.n	80038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8003802:	2b01      	cmp	r3, #1
 8003804:	d302      	bcc.n	800380c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8003806:	2b02      	cmp	r3, #2
 8003808:	d078      	beq.n	80038fc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800380a:	e099      	b.n	8003940 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800380c:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02d      	beq.n	8003874 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003818:	4b85      	ldr	r3, [pc, #532]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	08db      	lsrs	r3, r3, #3
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	4a84      	ldr	r2, [pc, #528]	; (8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	ee07 3a90 	vmov	s15, r3
 8003830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b7b      	ldr	r3, [pc, #492]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a03 	vldr	s12, [r7, #12]
 8003856:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003872:	e087      	b.n	8003984 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a3c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003886:	4b6a      	ldr	r3, [pc, #424]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003896:	ed97 6a03 	vldr	s12, [r7, #12]
 800389a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038b6:	e065      	b.n	8003984 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80038c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ca:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038da:	ed97 6a03 	vldr	s12, [r7, #12]
 80038de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038fa:	e043      	b.n	8003984 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800390a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390e:	4b48      	ldr	r3, [pc, #288]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003922:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800393e:	e021      	b.n	8003984 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800394e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003962:	ed97 6a03 	vldr	s12, [r7, #12]
 8003966:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800396a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800397a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003982:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003984:	4b2a      	ldr	r3, [pc, #168]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	0a5b      	lsrs	r3, r3, #9
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800399e:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039aa:	ee17 2a90 	vmov	r2, s15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	0c1b      	lsrs	r3, r3, #16
 80039b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039bc:	ee07 3a90 	vmov	s15, r3
 80039c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80039d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d8:	ee17 2a90 	vmov	r2, s15
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	0e1b      	lsrs	r3, r3, #24
 80039e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80039fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a06:	ee17 2a90 	vmov	r2, s15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003a0e:	e008      	b.n	8003a22 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
}
 8003a22:	bf00      	nop
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	58024400 	.word	0x58024400
 8003a34:	03d09000 	.word	0x03d09000
 8003a38:	46000000 	.word	0x46000000
 8003a3c:	4c742400 	.word	0x4c742400
 8003a40:	4a742400 	.word	0x4a742400
 8003a44:	4af42400 	.word	0x4af42400

08003a48 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a4c:	f7fe fca4 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa21 f303 	lsr.w	r3, r1, r3
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003a6a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	58024400 	.word	0x58024400
 8003a78:	08009f94 	.word	0x08009f94
 8003a7c:	24000008 	.word	0x24000008

08003a80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a8e:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d101      	bne.n	8003a9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e099      	b.n	8003bd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a9e:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a4e      	ldr	r2, [pc, #312]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003aa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aaa:	f7fc fe17 	bl	80006dc <HAL_GetTick>
 8003aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ab0:	e008      	b.n	8003ac4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ab2:	f7fc fe13 	bl	80006dc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e086      	b.n	8003bd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ad0:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	031b      	lsls	r3, r3, #12
 8003ade:	493f      	ldr	r1, [pc, #252]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	025b      	lsls	r3, r3, #9
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b14:	4931      	ldr	r1, [pc, #196]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	492d      	ldr	r1, [pc, #180]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f023 0220 	bic.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	4928      	ldr	r1, [pc, #160]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b44:	f023 0310 	bic.w	r3, r3, #16
 8003b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <RCCEx_PLL2_Config+0x160>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	69d2      	ldr	r2, [r2, #28]
 8003b56:	00d2      	lsls	r2, r2, #3
 8003b58:	4920      	ldr	r1, [pc, #128]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b5e:	4b1f      	ldr	r3, [pc, #124]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	4a1e      	ldr	r2, [pc, #120]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b64:	f043 0310 	orr.w	r3, r3, #16
 8003b68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b7c:	e00f      	b.n	8003b9e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d106      	bne.n	8003b92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b90:	e005      	b.n	8003b9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003baa:	f7fc fd97 	bl	80006dc <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bb0:	e008      	b.n	8003bc4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bb2:	f7fc fd93 	bl	80006dc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e006      	b.n	8003bd2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <RCCEx_PLL2_Config+0x15c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	ffff0007 	.word	0xffff0007

08003be4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bf2:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d101      	bne.n	8003c02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e099      	b.n	8003d36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003c02:	4b4f      	ldr	r3, [pc, #316]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a4e      	ldr	r2, [pc, #312]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fc fd65 	bl	80006dc <HAL_GetTick>
 8003c12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c14:	e008      	b.n	8003c28 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003c16:	f7fc fd61 	bl	80006dc <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e086      	b.n	8003d36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c28:	4b45      	ldr	r3, [pc, #276]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f0      	bne.n	8003c16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003c34:	4b42      	ldr	r3, [pc, #264]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	051b      	lsls	r3, r3, #20
 8003c42:	493f      	ldr	r1, [pc, #252]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	628b      	str	r3, [r1, #40]	; 0x28
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	025b      	lsls	r3, r3, #9
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c78:	4931      	ldr	r1, [pc, #196]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c7e:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	492d      	ldr	r1, [pc, #180]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	4928      	ldr	r1, [pc, #160]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ca2:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <RCCEx_PLL3_Config+0x160>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	69d2      	ldr	r2, [r2, #28]
 8003cba:	00d2      	lsls	r2, r2, #3
 8003cbc:	4920      	ldr	r1, [pc, #128]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003cc2:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ce0:	e00f      	b.n	8003d02 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d106      	bne.n	8003cf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ce8:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cf4:	e005      	b.n	8003d02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0e:	f7fc fce5 	bl	80006dc <HAL_GetTick>
 8003d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d14:	e008      	b.n	8003d28 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d16:	f7fc fce1 	bl	80006dc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e006      	b.n	8003d36 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <RCCEx_PLL3_Config+0x15c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
 8003d44:	ffff0007 	.word	0xffff0007

08003d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01d      	b.n	8003d96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f005 fb94 	bl	800949c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 fdae 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <HAL_TIM_Base_Start_IT+0x50>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d00b      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x42>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd0:	d007      	beq.n	8003de2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	00010007 	.word	0x00010007

08003df4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e01d      	b.n	8003e42 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f815 	bl	8003e4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f000 fd58 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fb0c 	bl	8005490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <HAL_TIM_PWM_Start+0x98>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x4a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <HAL_TIM_PWM_Start+0x9c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x4a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1b      	ldr	r2, [pc, #108]	; (8003f00 <HAL_TIM_PWM_Start+0xa0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x4a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <HAL_TIM_PWM_Start+0xa4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x4a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_TIM_PWM_Start+0xa8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_PWM_Start+0x4e>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <HAL_TIM_PWM_Start+0x50>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <HAL_TIM_PWM_Start+0xac>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d00b      	beq.n	8003eee <HAL_TIM_PWM_Start+0x8e>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d007      	beq.n	8003eee <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40010400 	.word	0x40010400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	00010007 	.word	0x00010007

08003f10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e01d      	b.n	8003f5e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f815 	bl	8003f66 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 fcca 	bl	80048e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d841      	bhi.n	8004010 <HAL_TIM_IC_Start_IT+0x94>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_TIM_IC_Start_IT+0x18>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fc9 	.word	0x08003fc9
 8003f98:	08004011 	.word	0x08004011
 8003f9c:	08004011 	.word	0x08004011
 8003fa0:	08004011 	.word	0x08004011
 8003fa4:	08003fdb 	.word	0x08003fdb
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08004011 	.word	0x08004011
 8003fb0:	08004011 	.word	0x08004011
 8003fb4:	08003fed 	.word	0x08003fed
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08004011 	.word	0x08004011
 8003fc4:	08003fff 	.word	0x08003fff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0202 	orr.w	r2, r2, #2
 8003fd6:	60da      	str	r2, [r3, #12]
      break;
 8003fd8:	e01b      	b.n	8004012 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0204 	orr.w	r2, r2, #4
 8003fe8:	60da      	str	r2, [r3, #12]
      break;
 8003fea:	e012      	b.n	8004012 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0208 	orr.w	r2, r2, #8
 8003ffa:	60da      	str	r2, [r3, #12]
      break;
 8003ffc:	e009      	b.n	8004012 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0210 	orr.w	r2, r2, #16
 800400c:	60da      	str	r2, [r3, #12]
      break;
 800400e:	e000      	b.n	8004012 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004010:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2201      	movs	r2, #1
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f001 fa38 	bl	8005490 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_TIM_IC_Start_IT+0xd8>)
 8004028:	4013      	ands	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b06      	cmp	r3, #6
 8004030:	d00b      	beq.n	800404a <HAL_TIM_IC_Start_IT+0xce>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d007      	beq.n	800404a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	00010007 	.word	0x00010007

08004058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0202 	mvn.w	r2, #2
 8004084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f004 fe4c 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fc02 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fc09 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0204 	mvn.w	r2, #4
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f004 fe22 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fbd8 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fbdf 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0208 	mvn.w	r2, #8
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2204      	movs	r2, #4
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f004 fdf8 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fbae 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fbb5 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0210 	mvn.w	r2, #16
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2208      	movs	r2, #8
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f004 fdce 	bl	8008d38 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fb84 	bl	80048ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb8b 	bl	80048c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0201 	mvn.w	r2, #1
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f004 fdf8 	bl	8008dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f001 f9d0 	bl	80055a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d10e      	bne.n	8004236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d107      	bne.n	8004236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f001 f9c3 	bl	80055bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d10e      	bne.n	8004262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d107      	bne.n	8004262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fb39 	bl	80048d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d10e      	bne.n	800428e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d107      	bne.n	800428e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0220 	mvn.w	r2, #32
 8004286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f001 f983 	bl	8005594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e08a      	b.n	80043c6 <HAL_TIM_IC_ConfigChannel+0x130>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d11b      	bne.n	80042fe <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f000 ff13 	bl	8005100 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 020c 	bic.w	r2, r2, #12
 80042e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6999      	ldr	r1, [r3, #24]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	619a      	str	r2, [r3, #24]
 80042fc:	e05a      	b.n	80043b4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d11c      	bne.n	800433e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f000 ff97 	bl	8005246 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004326:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6999      	ldr	r1, [r3, #24]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]
 800433c:	e03a      	b.n	80043b4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f000 ffe4 	bl	8005320 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 020c 	bic.w	r2, r2, #12
 8004366:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69d9      	ldr	r1, [r3, #28]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	61da      	str	r2, [r3, #28]
 800437a:	e01b      	b.n	80043b4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f001 f804 	bl	8005398 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800439e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69d9      	ldr	r1, [r3, #28]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	021a      	lsls	r2, r3, #8
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e105      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b14      	cmp	r3, #20
 80043fe:	f200 80f0 	bhi.w	80045e2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	0800445d 	.word	0x0800445d
 800440c:	080045e3 	.word	0x080045e3
 8004410:	080045e3 	.word	0x080045e3
 8004414:	080045e3 	.word	0x080045e3
 8004418:	0800449d 	.word	0x0800449d
 800441c:	080045e3 	.word	0x080045e3
 8004420:	080045e3 	.word	0x080045e3
 8004424:	080045e3 	.word	0x080045e3
 8004428:	080044df 	.word	0x080044df
 800442c:	080045e3 	.word	0x080045e3
 8004430:	080045e3 	.word	0x080045e3
 8004434:	080045e3 	.word	0x080045e3
 8004438:	0800451f 	.word	0x0800451f
 800443c:	080045e3 	.word	0x080045e3
 8004440:	080045e3 	.word	0x080045e3
 8004444:	080045e3 	.word	0x080045e3
 8004448:	08004561 	.word	0x08004561
 800444c:	080045e3 	.word	0x080045e3
 8004450:	080045e3 	.word	0x080045e3
 8004454:	080045e3 	.word	0x080045e3
 8004458:	080045a1 	.word	0x080045a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fada 	bl	8004a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0208 	orr.w	r2, r2, #8
 8004476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6999      	ldr	r1, [r3, #24]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	619a      	str	r2, [r3, #24]
      break;
 800449a:	e0a3      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fb4a 	bl	8004b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	021a      	lsls	r2, r3, #8
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	619a      	str	r2, [r3, #24]
      break;
 80044dc:	e082      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fbb3 	bl	8004c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0208 	orr.w	r2, r2, #8
 80044f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0204 	bic.w	r2, r2, #4
 8004508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69d9      	ldr	r1, [r3, #28]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	61da      	str	r2, [r3, #28]
      break;
 800451c:	e062      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fc19 	bl	8004d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69d9      	ldr	r1, [r3, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	021a      	lsls	r2, r3, #8
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	61da      	str	r2, [r3, #28]
      break;
 800455e:	e041      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fc60 	bl	8004e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0204 	bic.w	r2, r2, #4
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800459e:	e021      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fca2 	bl	8004ef0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	021a      	lsls	r2, r3, #8
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80045e2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop

08004600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIM_ConfigClockSource+0x18>
 8004614:	2302      	movs	r3, #2
 8004616:	e0b7      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x188>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4b57      	ldr	r3, [pc, #348]	; (8004790 <HAL_TIM_ConfigClockSource+0x190>)
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d02e      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0xae>
 8004650:	2b70      	cmp	r3, #112	; 0x70
 8004652:	d812      	bhi.n	800467a <HAL_TIM_ConfigClockSource+0x7a>
 8004654:	2b30      	cmp	r3, #48	; 0x30
 8004656:	f000 8084 	beq.w	8004762 <HAL_TIM_ConfigClockSource+0x162>
 800465a:	2b30      	cmp	r3, #48	; 0x30
 800465c:	d806      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x6c>
 800465e:	2b10      	cmp	r3, #16
 8004660:	d07f      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
 8004662:	2b20      	cmp	r3, #32
 8004664:	d07d      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d07b      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800466a:	e084      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800466c:	2b50      	cmp	r3, #80	; 0x50
 800466e:	d048      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x102>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d056      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x122>
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d064      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004678:	e07d      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800467a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800467e:	d070      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
 8004680:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004684:	d809      	bhi.n	800469a <HAL_TIM_ConfigClockSource+0x9a>
 8004686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468a:	d027      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0xdc>
 800468c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004690:	d067      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d06d      	beq.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004698:	e06d      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800469a:	4a3e      	ldr	r2, [pc, #248]	; (8004794 <HAL_TIM_ConfigClockSource+0x194>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d060      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
 80046a0:	4a3d      	ldr	r2, [pc, #244]	; (8004798 <HAL_TIM_ConfigClockSource+0x198>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d05d      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
 80046a6:	4a3d      	ldr	r2, [pc, #244]	; (800479c <HAL_TIM_ConfigClockSource+0x19c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d05a      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80046ac:	e063      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6899      	ldr	r1, [r3, #8]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f000 fec7 	bl	8005450 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	609a      	str	r2, [r3, #8]
      break;
 80046da:	e04c      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6899      	ldr	r1, [r3, #8]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f000 feb0 	bl	8005450 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fe:	609a      	str	r2, [r3, #8]
      break;
 8004700:	e039      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	461a      	mov	r2, r3
 8004710:	f000 fd6a 	bl	80051e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2150      	movs	r1, #80	; 0x50
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fe7a 	bl	8005414 <TIM_ITRx_SetConfig>
      break;
 8004720:	e029      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fdc6 	bl	80052c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2160      	movs	r1, #96	; 0x60
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fe6a 	bl	8005414 <TIM_ITRx_SetConfig>
      break;
 8004740:	e019      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	461a      	mov	r2, r3
 8004750:	f000 fd4a 	bl	80051e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2140      	movs	r1, #64	; 0x40
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fe5a 	bl	8005414 <TIM_ITRx_SetConfig>
      break;
 8004760:	e009      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f000 fe51 	bl	8005414 <TIM_ITRx_SetConfig>
      break;
 8004772:	e000      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	ffceff88 	.word	0xffceff88
 8004794:	00100030 	.word	0x00100030
 8004798:	00100040 	.word	0x00100040
 800479c:	00100020 	.word	0x00100020

080047a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e031      	b.n	800481c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fbf4 	bl	8004fb8 <TIM_SlaveTimer_SetConfig>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e018      	b.n	800481c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004808:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d831      	bhi.n	800489c <HAL_TIM_ReadCapturedValue+0x78>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <HAL_TIM_ReadCapturedValue+0x1c>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004875 	.word	0x08004875
 8004844:	0800489d 	.word	0x0800489d
 8004848:	0800489d 	.word	0x0800489d
 800484c:	0800489d 	.word	0x0800489d
 8004850:	0800487f 	.word	0x0800487f
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800489d 	.word	0x0800489d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	08004889 	.word	0x08004889
 8004864:	0800489d 	.word	0x0800489d
 8004868:	0800489d 	.word	0x0800489d
 800486c:	0800489d 	.word	0x0800489d
 8004870:	08004893 	.word	0x08004893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	60fb      	str	r3, [r7, #12]

      break;
 800487c:	e00f      	b.n	800489e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	60fb      	str	r3, [r7, #12]

      break;
 8004886:	e00a      	b.n	800489e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	60fb      	str	r3, [r7, #12]

      break;
 8004890:	e005      	b.n	800489e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	60fb      	str	r3, [r7, #12]

      break;
 800489a:	e000      	b.n	800489e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800489c:	bf00      	nop
  }

  return tmpreg;
 800489e:	68fb      	ldr	r3, [r7, #12]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a40      	ldr	r2, [pc, #256]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a3b      	ldr	r2, [pc, #236]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d108      	bne.n	800493a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2f      	ldr	r2, [pc, #188]	; (80049fc <TIM_Base_SetConfig+0x114>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d01b      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <TIM_Base_SetConfig+0x118>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d017      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <TIM_Base_SetConfig+0x11c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2a      	ldr	r2, [pc, #168]	; (8004a08 <TIM_Base_SetConfig+0x120>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00f      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a10      	ldr	r2, [pc, #64]	; (80049fc <TIM_Base_SetConfig+0x114>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00f      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <TIM_Base_SetConfig+0x128>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <TIM_Base_SetConfig+0x12c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <TIM_Base_SetConfig+0x130>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d103      	bne.n	80049e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	615a      	str	r2, [r3, #20]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800

08004a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4b37      	ldr	r3, [pc, #220]	; (8004b24 <TIM_OC1_SetConfig+0x108>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f023 0302 	bic.w	r3, r3, #2
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a2d      	ldr	r2, [pc, #180]	; (8004b28 <TIM_OC1_SetConfig+0x10c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00f      	beq.n	8004a98 <TIM_OC1_SetConfig+0x7c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a2c      	ldr	r2, [pc, #176]	; (8004b2c <TIM_OC1_SetConfig+0x110>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00b      	beq.n	8004a98 <TIM_OC1_SetConfig+0x7c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a2b      	ldr	r2, [pc, #172]	; (8004b30 <TIM_OC1_SetConfig+0x114>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <TIM_OC1_SetConfig+0x7c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <TIM_OC1_SetConfig+0x118>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_OC1_SetConfig+0x7c>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a29      	ldr	r2, [pc, #164]	; (8004b38 <TIM_OC1_SetConfig+0x11c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10c      	bne.n	8004ab2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 0308 	bic.w	r3, r3, #8
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <TIM_OC1_SetConfig+0x10c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_OC1_SetConfig+0xbe>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <TIM_OC1_SetConfig+0x110>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_OC1_SetConfig+0xbe>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <TIM_OC1_SetConfig+0x114>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_OC1_SetConfig+0xbe>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a19      	ldr	r2, [pc, #100]	; (8004b34 <TIM_OC1_SetConfig+0x118>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_OC1_SetConfig+0xbe>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <TIM_OC1_SetConfig+0x11c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d111      	bne.n	8004afe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	fffeff8f 	.word	0xfffeff8f
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	40010400 	.word	0x40010400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800

08004b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0210 	bic.w	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4b34      	ldr	r3, [pc, #208]	; (8004c38 <TIM_OC2_SetConfig+0xfc>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 0320 	bic.w	r3, r3, #32
 8004b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a29      	ldr	r2, [pc, #164]	; (8004c3c <TIM_OC2_SetConfig+0x100>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_OC2_SetConfig+0x68>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a28      	ldr	r2, [pc, #160]	; (8004c40 <TIM_OC2_SetConfig+0x104>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d10d      	bne.n	8004bc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <TIM_OC2_SetConfig+0x100>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00f      	beq.n	8004be8 <TIM_OC2_SetConfig+0xac>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a1d      	ldr	r2, [pc, #116]	; (8004c40 <TIM_OC2_SetConfig+0x104>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_OC2_SetConfig+0xac>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <TIM_OC2_SetConfig+0x108>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_OC2_SetConfig+0xac>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <TIM_OC2_SetConfig+0x10c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC2_SetConfig+0xac>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <TIM_OC2_SetConfig+0x110>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d113      	bne.n	8004c10 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	feff8fff 	.word	0xfeff8fff
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40010400 	.word	0x40010400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800

08004c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <TIM_OC3_SetConfig+0xf8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_OC3_SetConfig+0x66>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <TIM_OC3_SetConfig+0xfc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10d      	bne.n	8004cd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <TIM_OC3_SetConfig+0xf8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_OC3_SetConfig+0xaa>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1b      	ldr	r2, [pc, #108]	; (8004d4c <TIM_OC3_SetConfig+0xfc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_OC3_SetConfig+0xaa>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <TIM_OC3_SetConfig+0x100>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_OC3_SetConfig+0xaa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <TIM_OC3_SetConfig+0x104>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC3_SetConfig+0xaa>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <TIM_OC3_SetConfig+0x108>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <TIM_OC4_SetConfig+0xbc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00f      	beq.n	8004ddc <TIM_OC4_SetConfig+0x80>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <TIM_OC4_SetConfig+0xc0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <TIM_OC4_SetConfig+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <TIM_OC4_SetConfig+0xc4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d007      	beq.n	8004ddc <TIM_OC4_SetConfig+0x80>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <TIM_OC4_SetConfig+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_OC4_SetConfig+0x80>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a14      	ldr	r2, [pc, #80]	; (8004e28 <TIM_OC4_SetConfig+0xcc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d109      	bne.n	8004df0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	019b      	lsls	r3, r3, #6
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40010400 	.word	0x40010400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40014400 	.word	0x40014400
 8004e28:	40014800 	.word	0x40014800

08004e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a17      	ldr	r2, [pc, #92]	; (8004edc <TIM_OC5_SetConfig+0xb0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x76>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_OC5_SetConfig+0xb4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x76>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC5_SetConfig+0xb8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x76>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <TIM_OC5_SetConfig+0xbc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_OC5_SetConfig+0x76>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <TIM_OC5_SetConfig+0xc0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d109      	bne.n	8004eb6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	051b      	lsls	r3, r3, #20
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <TIM_OC6_SetConfig+0xb4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00f      	beq.n	8004f68 <TIM_OC6_SetConfig+0x78>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC6_SetConfig+0xb8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <TIM_OC6_SetConfig+0x78>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <TIM_OC6_SetConfig+0xbc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <TIM_OC6_SetConfig+0x78>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <TIM_OC6_SetConfig+0xc0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC6_SetConfig+0x78>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <TIM_OC6_SetConfig+0xc4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d109      	bne.n	8004f7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	029b      	lsls	r3, r3, #10
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800

08004fb8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4b47      	ldr	r3, [pc, #284]	; (80050ec <TIM_SlaveTimer_SetConfig+0x134>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4b44      	ldr	r3, [pc, #272]	; (80050f0 <TIM_SlaveTimer_SetConfig+0x138>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b60      	cmp	r3, #96	; 0x60
 8004ffc:	d065      	beq.n	80050ca <TIM_SlaveTimer_SetConfig+0x112>
 8004ffe:	2b60      	cmp	r3, #96	; 0x60
 8005000:	d80f      	bhi.n	8005022 <TIM_SlaveTimer_SetConfig+0x6a>
 8005002:	2b20      	cmp	r3, #32
 8005004:	d06b      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
 8005006:	2b20      	cmp	r3, #32
 8005008:	d804      	bhi.n	8005014 <TIM_SlaveTimer_SetConfig+0x5c>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d067      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
 800500e:	2b10      	cmp	r3, #16
 8005010:	d065      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005012:	e065      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d025      	beq.n	8005064 <TIM_SlaveTimer_SetConfig+0xac>
 8005018:	2b50      	cmp	r3, #80	; 0x50
 800501a:	d04c      	beq.n	80050b6 <TIM_SlaveTimer_SetConfig+0xfe>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d05e      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8005020:	e05e      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8005022:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005026:	d05a      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
 8005028:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800502c:	d805      	bhi.n	800503a <TIM_SlaveTimer_SetConfig+0x82>
 800502e:	2b70      	cmp	r3, #112	; 0x70
 8005030:	d00d      	beq.n	800504e <TIM_SlaveTimer_SetConfig+0x96>
 8005032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005036:	d052      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8005038:	e052      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 800503a:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <TIM_SlaveTimer_SetConfig+0x13c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d04e      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
 8005040:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <TIM_SlaveTimer_SetConfig+0x140>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d04b      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
 8005046:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <TIM_SlaveTimer_SetConfig+0x144>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d048      	beq.n	80050de <TIM_SlaveTimer_SetConfig+0x126>
      break;
 800504c:	e048      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_ETR_SetConfig(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f000 f9f7 	bl	8005450 <TIM_ETR_SetConfig>
      break;
 8005062:	e03d      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b05      	cmp	r3, #5
 800506a:	d101      	bne.n	8005070 <TIM_SlaveTimer_SetConfig+0xb8>
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e038      	b.n	80050e2 <TIM_SlaveTimer_SetConfig+0x12a>
      tmpccer = htim->Instance->CCER;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	621a      	str	r2, [r3, #32]
      break;
 80050b4:	e014      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 f890 	bl	80051e8 <TIM_TI1_ConfigInputStage>
      break;
 80050c8:	e00a      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6899      	ldr	r1, [r3, #8]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f000 f8f2 	bl	80052c0 <TIM_TI2_ConfigInputStage>
      break;
 80050dc:	e000      	b.n	80050e0 <TIM_SlaveTimer_SetConfig+0x128>
      break;
 80050de:	bf00      	nop
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	ffcfff8f 	.word	0xffcfff8f
 80050f0:	fffefff8 	.word	0xfffefff8
 80050f4:	00100030 	.word	0x00100030
 80050f8:	00100040 	.word	0x00100040
 80050fc:	00100020 	.word	0x00100020

08005100 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0201 	bic.w	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a28      	ldr	r2, [pc, #160]	; (80051cc <TIM_TI1_SetConfig+0xcc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01b      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d017      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <TIM_TI1_SetConfig+0xd0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <TIM_TI1_SetConfig+0xd4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00f      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <TIM_TI1_SetConfig+0xd8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a22      	ldr	r2, [pc, #136]	; (80051dc <TIM_TI1_SetConfig+0xdc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <TIM_TI1_SetConfig+0xe0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_TI1_SetConfig+0x66>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <TIM_TI1_SetConfig+0xe4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <TIM_TI1_SetConfig+0x6a>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <TIM_TI1_SetConfig+0x6c>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e003      	b.n	800518a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	b2db      	uxtb	r3, r3
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f023 030a 	bic.w	r3, r3, #10
 80051a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 030a 	and.w	r3, r3, #10
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40001800 	.word	0x40001800
 80051e4:	40014000 	.word	0x40014000

080051e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0201 	bic.w	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 030a 	bic.w	r3, r3, #10
 8005224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005246:	b480      	push	{r7}
 8005248:	b087      	sub	sp, #28
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f023 0210 	bic.w	r2, r3, #16
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005272:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	031b      	lsls	r3, r3, #12
 800528a:	b29b      	uxth	r3, r3
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005298:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	621a      	str	r2, [r3, #32]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f023 0210 	bic.w	r2, r3, #16
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	031b      	lsls	r3, r3, #12
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	b2db      	uxtb	r3, r3
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005370:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	031b      	lsls	r3, r3, #12
 80053dc:	b29b      	uxth	r3, r3
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	031b      	lsls	r3, r3, #12
 80053f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <TIM_ITRx_SetConfig+0x38>)
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	f043 0307 	orr.w	r3, r3, #7
 8005436:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	609a      	str	r2, [r3, #8]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	ffcfff8f 	.word	0xffcfff8f

08005450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800546a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	431a      	orrs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2201      	movs	r2, #1
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 031f 	and.w	r3, r3, #31
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	fa01 f303 	lsl.w	r3, r1, r3
 80054c8:	431a      	orrs	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e045      	b.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d108      	bne.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800552e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005552:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4313      	orrs	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	40010000 	.word	0x40010000
 8005590:	40010400 	.word	0x40010400

08005594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e042      	b.n	8005668 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f004 f815 	bl	8009624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2224      	movs	r2, #36	; 0x24
 80055fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f82c 	bl	8005670 <UART_SetConfig>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e022      	b.n	8005668 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f002 f99e 	bl	800796c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f002 fa25 	bl	8007ab0 <UART_CheckIdleState>
 8005666:	4603      	mov	r3, r0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005674:	b090      	sub	sp, #64	; 0x40
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005684:	2300      	movs	r3, #0
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	4313      	orrs	r3, r2
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056a6:	4313      	orrs	r3, r2
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4bc1      	ldr	r3, [pc, #772]	; (80059b8 <UART_SetConfig+0x348>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ba:	430b      	orrs	r3, r1
 80056bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4ab7      	ldr	r2, [pc, #732]	; (80059bc <UART_SetConfig+0x34c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056ea:	4313      	orrs	r3, r2
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	4bb2      	ldr	r3, [pc, #712]	; (80059c0 <UART_SetConfig+0x350>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056fe:	430b      	orrs	r3, r1
 8005700:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	f023 010f 	bic.w	r1, r3, #15
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4aa9      	ldr	r2, [pc, #676]	; (80059c4 <UART_SetConfig+0x354>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d177      	bne.n	8005812 <UART_SetConfig+0x1a2>
 8005722:	4ba9      	ldr	r3, [pc, #676]	; (80059c8 <UART_SetConfig+0x358>)
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800572a:	2b28      	cmp	r3, #40	; 0x28
 800572c:	d86c      	bhi.n	8005808 <UART_SetConfig+0x198>
 800572e:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0xc4>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	080057d9 	.word	0x080057d9
 8005738:	08005809 	.word	0x08005809
 800573c:	08005809 	.word	0x08005809
 8005740:	08005809 	.word	0x08005809
 8005744:	08005809 	.word	0x08005809
 8005748:	08005809 	.word	0x08005809
 800574c:	08005809 	.word	0x08005809
 8005750:	08005809 	.word	0x08005809
 8005754:	080057e1 	.word	0x080057e1
 8005758:	08005809 	.word	0x08005809
 800575c:	08005809 	.word	0x08005809
 8005760:	08005809 	.word	0x08005809
 8005764:	08005809 	.word	0x08005809
 8005768:	08005809 	.word	0x08005809
 800576c:	08005809 	.word	0x08005809
 8005770:	08005809 	.word	0x08005809
 8005774:	080057e9 	.word	0x080057e9
 8005778:	08005809 	.word	0x08005809
 800577c:	08005809 	.word	0x08005809
 8005780:	08005809 	.word	0x08005809
 8005784:	08005809 	.word	0x08005809
 8005788:	08005809 	.word	0x08005809
 800578c:	08005809 	.word	0x08005809
 8005790:	08005809 	.word	0x08005809
 8005794:	080057f1 	.word	0x080057f1
 8005798:	08005809 	.word	0x08005809
 800579c:	08005809 	.word	0x08005809
 80057a0:	08005809 	.word	0x08005809
 80057a4:	08005809 	.word	0x08005809
 80057a8:	08005809 	.word	0x08005809
 80057ac:	08005809 	.word	0x08005809
 80057b0:	08005809 	.word	0x08005809
 80057b4:	080057f9 	.word	0x080057f9
 80057b8:	08005809 	.word	0x08005809
 80057bc:	08005809 	.word	0x08005809
 80057c0:	08005809 	.word	0x08005809
 80057c4:	08005809 	.word	0x08005809
 80057c8:	08005809 	.word	0x08005809
 80057cc:	08005809 	.word	0x08005809
 80057d0:	08005809 	.word	0x08005809
 80057d4:	08005801 	.word	0x08005801
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057de:	e233      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80057e0:	2304      	movs	r3, #4
 80057e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057e6:	e22f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80057e8:	2308      	movs	r3, #8
 80057ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057ee:	e22b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80057f0:	2310      	movs	r3, #16
 80057f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057f6:	e227      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80057f8:	2320      	movs	r3, #32
 80057fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057fe:	e223      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005800:	2340      	movs	r3, #64	; 0x40
 8005802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005806:	e21f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005808:	2380      	movs	r3, #128	; 0x80
 800580a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800580e:	bf00      	nop
 8005810:	e21a      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6d      	ldr	r2, [pc, #436]	; (80059cc <UART_SetConfig+0x35c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d132      	bne.n	8005882 <UART_SetConfig+0x212>
 800581c:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <UART_SetConfig+0x358>)
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	2b05      	cmp	r3, #5
 8005826:	d827      	bhi.n	8005878 <UART_SetConfig+0x208>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0x1c0>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005849 	.word	0x08005849
 8005834:	08005851 	.word	0x08005851
 8005838:	08005859 	.word	0x08005859
 800583c:	08005861 	.word	0x08005861
 8005840:	08005869 	.word	0x08005869
 8005844:	08005871 	.word	0x08005871
 8005848:	2300      	movs	r3, #0
 800584a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800584e:	e1fb      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005856:	e1f7      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800585e:	e1f3      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005866:	e1ef      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005868:	2320      	movs	r3, #32
 800586a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800586e:	e1eb      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005870:	2340      	movs	r3, #64	; 0x40
 8005872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005876:	e1e7      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800587e:	bf00      	nop
 8005880:	e1e2      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a52      	ldr	r2, [pc, #328]	; (80059d0 <UART_SetConfig+0x360>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d132      	bne.n	80058f2 <UART_SetConfig+0x282>
 800588c:	4b4e      	ldr	r3, [pc, #312]	; (80059c8 <UART_SetConfig+0x358>)
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	2b05      	cmp	r3, #5
 8005896:	d827      	bhi.n	80058e8 <UART_SetConfig+0x278>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x230>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058b9 	.word	0x080058b9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	080058c9 	.word	0x080058c9
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058be:	e1c3      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058c6:	e1bf      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058ce:	e1bb      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058d6:	e1b7      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80058d8:	2320      	movs	r3, #32
 80058da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058de:	e1b3      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80058e0:	2340      	movs	r3, #64	; 0x40
 80058e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058e6:	e1af      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058ee:	bf00      	nop
 80058f0:	e1aa      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a37      	ldr	r2, [pc, #220]	; (80059d4 <UART_SetConfig+0x364>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d132      	bne.n	8005962 <UART_SetConfig+0x2f2>
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <UART_SetConfig+0x358>)
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	2b05      	cmp	r3, #5
 8005906:	d827      	bhi.n	8005958 <UART_SetConfig+0x2e8>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x2a0>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005929 	.word	0x08005929
 8005914:	08005931 	.word	0x08005931
 8005918:	08005939 	.word	0x08005939
 800591c:	08005941 	.word	0x08005941
 8005920:	08005949 	.word	0x08005949
 8005924:	08005951 	.word	0x08005951
 8005928:	2300      	movs	r3, #0
 800592a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800592e:	e18b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005930:	2304      	movs	r3, #4
 8005932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005936:	e187      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005938:	2308      	movs	r3, #8
 800593a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800593e:	e183      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005940:	2310      	movs	r3, #16
 8005942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005946:	e17f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005948:	2320      	movs	r3, #32
 800594a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800594e:	e17b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005950:	2340      	movs	r3, #64	; 0x40
 8005952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005956:	e177      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005958:	2380      	movs	r3, #128	; 0x80
 800595a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800595e:	bf00      	nop
 8005960:	e172      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <UART_SetConfig+0x368>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d144      	bne.n	80059f6 <UART_SetConfig+0x386>
 800596c:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <UART_SetConfig+0x358>)
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	2b05      	cmp	r3, #5
 8005976:	d839      	bhi.n	80059ec <UART_SetConfig+0x37c>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x310>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	08005999 	.word	0x08005999
 8005984:	080059a1 	.word	0x080059a1
 8005988:	080059a9 	.word	0x080059a9
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059dd 	.word	0x080059dd
 8005994:	080059e5 	.word	0x080059e5
 8005998:	2300      	movs	r3, #0
 800599a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800599e:	e153      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80059a0:	2304      	movs	r3, #4
 80059a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059a6:	e14f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059ae:	e14b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059b6:	e147      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80059b8:	cfff69f3 	.word	0xcfff69f3
 80059bc:	58000c00 	.word	0x58000c00
 80059c0:	11fff4ff 	.word	0x11fff4ff
 80059c4:	40011000 	.word	0x40011000
 80059c8:	58024400 	.word	0x58024400
 80059cc:	40004400 	.word	0x40004400
 80059d0:	40004800 	.word	0x40004800
 80059d4:	40004c00 	.word	0x40004c00
 80059d8:	40005000 	.word	0x40005000
 80059dc:	2320      	movs	r3, #32
 80059de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059e2:	e131      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80059e4:	2340      	movs	r3, #64	; 0x40
 80059e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059ea:	e12d      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80059f2:	bf00      	nop
 80059f4:	e128      	b.n	8005c48 <UART_SetConfig+0x5d8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4ac3      	ldr	r2, [pc, #780]	; (8005d08 <UART_SetConfig+0x698>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d178      	bne.n	8005af2 <UART_SetConfig+0x482>
 8005a00:	4bc2      	ldr	r3, [pc, #776]	; (8005d0c <UART_SetConfig+0x69c>)
 8005a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a08:	2b28      	cmp	r3, #40	; 0x28
 8005a0a:	d86d      	bhi.n	8005ae8 <UART_SetConfig+0x478>
 8005a0c:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <UART_SetConfig+0x3a4>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005ab9 	.word	0x08005ab9
 8005a18:	08005ae9 	.word	0x08005ae9
 8005a1c:	08005ae9 	.word	0x08005ae9
 8005a20:	08005ae9 	.word	0x08005ae9
 8005a24:	08005ae9 	.word	0x08005ae9
 8005a28:	08005ae9 	.word	0x08005ae9
 8005a2c:	08005ae9 	.word	0x08005ae9
 8005a30:	08005ae9 	.word	0x08005ae9
 8005a34:	08005ac1 	.word	0x08005ac1
 8005a38:	08005ae9 	.word	0x08005ae9
 8005a3c:	08005ae9 	.word	0x08005ae9
 8005a40:	08005ae9 	.word	0x08005ae9
 8005a44:	08005ae9 	.word	0x08005ae9
 8005a48:	08005ae9 	.word	0x08005ae9
 8005a4c:	08005ae9 	.word	0x08005ae9
 8005a50:	08005ae9 	.word	0x08005ae9
 8005a54:	08005ac9 	.word	0x08005ac9
 8005a58:	08005ae9 	.word	0x08005ae9
 8005a5c:	08005ae9 	.word	0x08005ae9
 8005a60:	08005ae9 	.word	0x08005ae9
 8005a64:	08005ae9 	.word	0x08005ae9
 8005a68:	08005ae9 	.word	0x08005ae9
 8005a6c:	08005ae9 	.word	0x08005ae9
 8005a70:	08005ae9 	.word	0x08005ae9
 8005a74:	08005ad1 	.word	0x08005ad1
 8005a78:	08005ae9 	.word	0x08005ae9
 8005a7c:	08005ae9 	.word	0x08005ae9
 8005a80:	08005ae9 	.word	0x08005ae9
 8005a84:	08005ae9 	.word	0x08005ae9
 8005a88:	08005ae9 	.word	0x08005ae9
 8005a8c:	08005ae9 	.word	0x08005ae9
 8005a90:	08005ae9 	.word	0x08005ae9
 8005a94:	08005ad9 	.word	0x08005ad9
 8005a98:	08005ae9 	.word	0x08005ae9
 8005a9c:	08005ae9 	.word	0x08005ae9
 8005aa0:	08005ae9 	.word	0x08005ae9
 8005aa4:	08005ae9 	.word	0x08005ae9
 8005aa8:	08005ae9 	.word	0x08005ae9
 8005aac:	08005ae9 	.word	0x08005ae9
 8005ab0:	08005ae9 	.word	0x08005ae9
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005abe:	e0c3      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ac6:	e0bf      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ace:	e0bb      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ad6:	e0b7      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ad8:	2320      	movs	r3, #32
 8005ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ade:	e0b3      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ae0:	2340      	movs	r3, #64	; 0x40
 8005ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ae6:	e0af      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005aee:	bf00      	nop
 8005af0:	e0aa      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a86      	ldr	r2, [pc, #536]	; (8005d10 <UART_SetConfig+0x6a0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d132      	bne.n	8005b62 <UART_SetConfig+0x4f2>
 8005afc:	4b83      	ldr	r3, [pc, #524]	; (8005d0c <UART_SetConfig+0x69c>)
 8005afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	2b05      	cmp	r3, #5
 8005b06:	d827      	bhi.n	8005b58 <UART_SetConfig+0x4e8>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x4a0>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b29 	.word	0x08005b29
 8005b14:	08005b31 	.word	0x08005b31
 8005b18:	08005b39 	.word	0x08005b39
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b2e:	e08b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005b30:	2304      	movs	r3, #4
 8005b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b36:	e087      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b3e:	e083      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b46:	e07f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b4e:	e07b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b56:	e077      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b5e:	bf00      	nop
 8005b60:	e072      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a6b      	ldr	r2, [pc, #428]	; (8005d14 <UART_SetConfig+0x6a4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d132      	bne.n	8005bd2 <UART_SetConfig+0x562>
 8005b6c:	4b67      	ldr	r3, [pc, #412]	; (8005d0c <UART_SetConfig+0x69c>)
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	2b05      	cmp	r3, #5
 8005b76:	d827      	bhi.n	8005bc8 <UART_SetConfig+0x558>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x510>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005ba1 	.word	0x08005ba1
 8005b88:	08005ba9 	.word	0x08005ba9
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b9e:	e053      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ba6:	e04f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bae:	e04b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bb6:	e047      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bbe:	e043      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005bc0:	2340      	movs	r3, #64	; 0x40
 8005bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bc6:	e03f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bce:	bf00      	nop
 8005bd0:	e03a      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a50      	ldr	r2, [pc, #320]	; (8005d18 <UART_SetConfig+0x6a8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d132      	bne.n	8005c42 <UART_SetConfig+0x5d2>
 8005bdc:	4b4b      	ldr	r3, [pc, #300]	; (8005d0c <UART_SetConfig+0x69c>)
 8005bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	2b05      	cmp	r3, #5
 8005be6:	d827      	bhi.n	8005c38 <UART_SetConfig+0x5c8>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x580>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c09 	.word	0x08005c09
 8005bf4:	08005c11 	.word	0x08005c11
 8005bf8:	08005c19 	.word	0x08005c19
 8005bfc:	08005c21 	.word	0x08005c21
 8005c00:	08005c29 	.word	0x08005c29
 8005c04:	08005c31 	.word	0x08005c31
 8005c08:	2302      	movs	r3, #2
 8005c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c0e:	e01b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005c10:	2304      	movs	r3, #4
 8005c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c16:	e017      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005c18:	2308      	movs	r3, #8
 8005c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c1e:	e013      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005c20:	2310      	movs	r3, #16
 8005c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c26:	e00f      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005c28:	2320      	movs	r3, #32
 8005c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c2e:	e00b      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005c30:	2340      	movs	r3, #64	; 0x40
 8005c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c36:	e007      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c3e:	bf00      	nop
 8005c40:	e002      	b.n	8005c48 <UART_SetConfig+0x5d8>
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a32      	ldr	r2, [pc, #200]	; (8005d18 <UART_SetConfig+0x6a8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	f040 86f7 	bne.w	8006a42 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	f000 80c0 	beq.w	8005dde <UART_SetConfig+0x76e>
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	dc04      	bgt.n	8005c6c <UART_SetConfig+0x5fc>
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d00c      	beq.n	8005c80 <UART_SetConfig+0x610>
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d065      	beq.n	8005d36 <UART_SetConfig+0x6c6>
 8005c6a:	e27a      	b.n	8006162 <UART_SetConfig+0xaf2>
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	f000 81b0 	beq.w	8005fd2 <UART_SetConfig+0x962>
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	f000 821e 	beq.w	80060b4 <UART_SetConfig+0xa44>
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	f000 8104 	beq.w	8005e86 <UART_SetConfig+0x816>
 8005c7e:	e270      	b.n	8006162 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005c80:	f7fd fc34 	bl	80034ec <HAL_RCCEx_GetD3PCLK1Freq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d04e      	beq.n	8005d2c <UART_SetConfig+0x6bc>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d048      	beq.n	8005d28 <UART_SetConfig+0x6b8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d042      	beq.n	8005d24 <UART_SetConfig+0x6b4>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d03c      	beq.n	8005d20 <UART_SetConfig+0x6b0>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d036      	beq.n	8005d1c <UART_SetConfig+0x6ac>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d026      	beq.n	8005d04 <UART_SetConfig+0x694>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b06      	cmp	r3, #6
 8005cbc:	d020      	beq.n	8005d00 <UART_SetConfig+0x690>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b07      	cmp	r3, #7
 8005cc4:	d01a      	beq.n	8005cfc <UART_SetConfig+0x68c>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d014      	beq.n	8005cf8 <UART_SetConfig+0x688>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b09      	cmp	r3, #9
 8005cd4:	d00e      	beq.n	8005cf4 <UART_SetConfig+0x684>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b0a      	cmp	r3, #10
 8005cdc:	d008      	beq.n	8005cf0 <UART_SetConfig+0x680>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b0b      	cmp	r3, #11
 8005ce4:	d102      	bne.n	8005cec <UART_SetConfig+0x67c>
 8005ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cea:	e020      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e01e      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	e01c      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005cf4:	2340      	movs	r3, #64	; 0x40
 8005cf6:	e01a      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	e018      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	e016      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005d00:	230c      	movs	r3, #12
 8005d02:	e014      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005d04:	230a      	movs	r3, #10
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005d08:	40011400 	.word	0x40011400
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	40007800 	.word	0x40007800
 8005d14:	40007c00 	.word	0x40007c00
 8005d18:	58000c00 	.word	0x58000c00
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	e006      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005d20:	2306      	movs	r3, #6
 8005d22:	e004      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005d24:	2304      	movs	r3, #4
 8005d26:	e002      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e000      	b.n	8005d2e <UART_SetConfig+0x6be>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d34:	e219      	b.n	800616a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d36:	f107 0318 	add.w	r3, r7, #24
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fd fbec 	bl	8003518 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d044      	beq.n	8005dd4 <UART_SetConfig+0x764>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d03e      	beq.n	8005dd0 <UART_SetConfig+0x760>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d038      	beq.n	8005dcc <UART_SetConfig+0x75c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d032      	beq.n	8005dc8 <UART_SetConfig+0x758>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d02c      	beq.n	8005dc4 <UART_SetConfig+0x754>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d026      	beq.n	8005dc0 <UART_SetConfig+0x750>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b06      	cmp	r3, #6
 8005d78:	d020      	beq.n	8005dbc <UART_SetConfig+0x74c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2b07      	cmp	r3, #7
 8005d80:	d01a      	beq.n	8005db8 <UART_SetConfig+0x748>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d014      	beq.n	8005db4 <UART_SetConfig+0x744>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d00e      	beq.n	8005db0 <UART_SetConfig+0x740>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b0a      	cmp	r3, #10
 8005d98:	d008      	beq.n	8005dac <UART_SetConfig+0x73c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b0b      	cmp	r3, #11
 8005da0:	d102      	bne.n	8005da8 <UART_SetConfig+0x738>
 8005da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005da6:	e016      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e014      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	e012      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	e010      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005db4:	2320      	movs	r3, #32
 8005db6:	e00e      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005db8:	2310      	movs	r3, #16
 8005dba:	e00c      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	e00a      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dc0:	230a      	movs	r3, #10
 8005dc2:	e008      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	e006      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dc8:	2306      	movs	r3, #6
 8005dca:	e004      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	e002      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e000      	b.n	8005dd6 <UART_SetConfig+0x766>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ddc:	e1c5      	b.n	800616a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dde:	f107 030c 	add.w	r3, r7, #12
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fd fce4 	bl	80037b0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d044      	beq.n	8005e7c <UART_SetConfig+0x80c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d03e      	beq.n	8005e78 <UART_SetConfig+0x808>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d038      	beq.n	8005e74 <UART_SetConfig+0x804>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d032      	beq.n	8005e70 <UART_SetConfig+0x800>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d02c      	beq.n	8005e6c <UART_SetConfig+0x7fc>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d026      	beq.n	8005e68 <UART_SetConfig+0x7f8>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b06      	cmp	r3, #6
 8005e20:	d020      	beq.n	8005e64 <UART_SetConfig+0x7f4>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	2b07      	cmp	r3, #7
 8005e28:	d01a      	beq.n	8005e60 <UART_SetConfig+0x7f0>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d014      	beq.n	8005e5c <UART_SetConfig+0x7ec>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	2b09      	cmp	r3, #9
 8005e38:	d00e      	beq.n	8005e58 <UART_SetConfig+0x7e8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	2b0a      	cmp	r3, #10
 8005e40:	d008      	beq.n	8005e54 <UART_SetConfig+0x7e4>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b0b      	cmp	r3, #11
 8005e48:	d102      	bne.n	8005e50 <UART_SetConfig+0x7e0>
 8005e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e4e:	e016      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e014      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	e012      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e58:	2340      	movs	r3, #64	; 0x40
 8005e5a:	e010      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e00e      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e60:	2310      	movs	r3, #16
 8005e62:	e00c      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e64:	230c      	movs	r3, #12
 8005e66:	e00a      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e68:	230a      	movs	r3, #10
 8005e6a:	e008      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	e006      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e70:	2306      	movs	r3, #6
 8005e72:	e004      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e74:	2304      	movs	r3, #4
 8005e76:	e002      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e000      	b.n	8005e7e <UART_SetConfig+0x80e>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e84:	e171      	b.n	800616a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e86:	4b7a      	ldr	r3, [pc, #488]	; (8006070 <UART_SetConfig+0xa00>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d054      	beq.n	8005f3c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005e92:	4b77      	ldr	r3, [pc, #476]	; (8006070 <UART_SetConfig+0xa00>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	4a75      	ldr	r2, [pc, #468]	; (8006074 <UART_SetConfig+0xa04>)
 8005e9e:	40da      	lsrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d044      	beq.n	8005f32 <UART_SetConfig+0x8c2>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d03e      	beq.n	8005f2e <UART_SetConfig+0x8be>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d038      	beq.n	8005f2a <UART_SetConfig+0x8ba>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d032      	beq.n	8005f26 <UART_SetConfig+0x8b6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d02c      	beq.n	8005f22 <UART_SetConfig+0x8b2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d026      	beq.n	8005f1e <UART_SetConfig+0x8ae>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	2b06      	cmp	r3, #6
 8005ed6:	d020      	beq.n	8005f1a <UART_SetConfig+0x8aa>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b07      	cmp	r3, #7
 8005ede:	d01a      	beq.n	8005f16 <UART_SetConfig+0x8a6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d014      	beq.n	8005f12 <UART_SetConfig+0x8a2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	2b09      	cmp	r3, #9
 8005eee:	d00e      	beq.n	8005f0e <UART_SetConfig+0x89e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b0a      	cmp	r3, #10
 8005ef6:	d008      	beq.n	8005f0a <UART_SetConfig+0x89a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	2b0b      	cmp	r3, #11
 8005efe:	d102      	bne.n	8005f06 <UART_SetConfig+0x896>
 8005f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f04:	e016      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e014      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	e012      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f0e:	2340      	movs	r3, #64	; 0x40
 8005f10:	e010      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f12:	2320      	movs	r3, #32
 8005f14:	e00e      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f16:	2310      	movs	r3, #16
 8005f18:	e00c      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	e00a      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f1e:	230a      	movs	r3, #10
 8005f20:	e008      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f22:	2308      	movs	r3, #8
 8005f24:	e006      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f26:	2306      	movs	r3, #6
 8005f28:	e004      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f2a:	2304      	movs	r3, #4
 8005f2c:	e002      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e000      	b.n	8005f34 <UART_SetConfig+0x8c4>
 8005f32:	2301      	movs	r3, #1
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005f3a:	e116      	b.n	800616a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d043      	beq.n	8005fcc <UART_SetConfig+0x95c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d03d      	beq.n	8005fc8 <UART_SetConfig+0x958>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d037      	beq.n	8005fc4 <UART_SetConfig+0x954>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d031      	beq.n	8005fc0 <UART_SetConfig+0x950>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d02b      	beq.n	8005fbc <UART_SetConfig+0x94c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b05      	cmp	r3, #5
 8005f6a:	d025      	beq.n	8005fb8 <UART_SetConfig+0x948>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2b06      	cmp	r3, #6
 8005f72:	d01f      	beq.n	8005fb4 <UART_SetConfig+0x944>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2b07      	cmp	r3, #7
 8005f7a:	d019      	beq.n	8005fb0 <UART_SetConfig+0x940>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d013      	beq.n	8005fac <UART_SetConfig+0x93c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d00d      	beq.n	8005fa8 <UART_SetConfig+0x938>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	2b0a      	cmp	r3, #10
 8005f92:	d007      	beq.n	8005fa4 <UART_SetConfig+0x934>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	2b0b      	cmp	r3, #11
 8005f9a:	d101      	bne.n	8005fa0 <UART_SetConfig+0x930>
 8005f9c:	4b36      	ldr	r3, [pc, #216]	; (8006078 <UART_SetConfig+0xa08>)
 8005f9e:	e016      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fa0:	4b34      	ldr	r3, [pc, #208]	; (8006074 <UART_SetConfig+0xa04>)
 8005fa2:	e014      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fa4:	4b35      	ldr	r3, [pc, #212]	; (800607c <UART_SetConfig+0xa0c>)
 8005fa6:	e012      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fa8:	4b35      	ldr	r3, [pc, #212]	; (8006080 <UART_SetConfig+0xa10>)
 8005faa:	e010      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fac:	4b35      	ldr	r3, [pc, #212]	; (8006084 <UART_SetConfig+0xa14>)
 8005fae:	e00e      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fb0:	4b35      	ldr	r3, [pc, #212]	; (8006088 <UART_SetConfig+0xa18>)
 8005fb2:	e00c      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fb4:	4b35      	ldr	r3, [pc, #212]	; (800608c <UART_SetConfig+0xa1c>)
 8005fb6:	e00a      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fb8:	4b35      	ldr	r3, [pc, #212]	; (8006090 <UART_SetConfig+0xa20>)
 8005fba:	e008      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fbc:	4b35      	ldr	r3, [pc, #212]	; (8006094 <UART_SetConfig+0xa24>)
 8005fbe:	e006      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fc0:	4b35      	ldr	r3, [pc, #212]	; (8006098 <UART_SetConfig+0xa28>)
 8005fc2:	e004      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <UART_SetConfig+0xa2c>)
 8005fc6:	e002      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fc8:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <UART_SetConfig+0xa30>)
 8005fca:	e000      	b.n	8005fce <UART_SetConfig+0x95e>
 8005fcc:	4b29      	ldr	r3, [pc, #164]	; (8006074 <UART_SetConfig+0xa04>)
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fd0:	e0cb      	b.n	800616a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d046      	beq.n	8006068 <UART_SetConfig+0x9f8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d040      	beq.n	8006064 <UART_SetConfig+0x9f4>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d03a      	beq.n	8006060 <UART_SetConfig+0x9f0>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d034      	beq.n	800605c <UART_SetConfig+0x9ec>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d02e      	beq.n	8006058 <UART_SetConfig+0x9e8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d028      	beq.n	8006054 <UART_SetConfig+0x9e4>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b06      	cmp	r3, #6
 8006008:	d022      	beq.n	8006050 <UART_SetConfig+0x9e0>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b07      	cmp	r3, #7
 8006010:	d01c      	beq.n	800604c <UART_SetConfig+0x9dc>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	2b08      	cmp	r3, #8
 8006018:	d016      	beq.n	8006048 <UART_SetConfig+0x9d8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b09      	cmp	r3, #9
 8006020:	d00f      	beq.n	8006042 <UART_SetConfig+0x9d2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b0a      	cmp	r3, #10
 8006028:	d008      	beq.n	800603c <UART_SetConfig+0x9cc>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b0b      	cmp	r3, #11
 8006030:	d102      	bne.n	8006038 <UART_SetConfig+0x9c8>
 8006032:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006036:	e018      	b.n	800606a <UART_SetConfig+0x9fa>
 8006038:	4b13      	ldr	r3, [pc, #76]	; (8006088 <UART_SetConfig+0xa18>)
 800603a:	e016      	b.n	800606a <UART_SetConfig+0x9fa>
 800603c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006040:	e013      	b.n	800606a <UART_SetConfig+0x9fa>
 8006042:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006046:	e010      	b.n	800606a <UART_SetConfig+0x9fa>
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <UART_SetConfig+0xa34>)
 800604a:	e00e      	b.n	800606a <UART_SetConfig+0x9fa>
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <UART_SetConfig+0xa08>)
 800604e:	e00c      	b.n	800606a <UART_SetConfig+0x9fa>
 8006050:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <UART_SetConfig+0xa38>)
 8006052:	e00a      	b.n	800606a <UART_SetConfig+0x9fa>
 8006054:	4b15      	ldr	r3, [pc, #84]	; (80060ac <UART_SetConfig+0xa3c>)
 8006056:	e008      	b.n	800606a <UART_SetConfig+0x9fa>
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <UART_SetConfig+0xa0c>)
 800605a:	e006      	b.n	800606a <UART_SetConfig+0x9fa>
 800605c:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <UART_SetConfig+0xa40>)
 800605e:	e004      	b.n	800606a <UART_SetConfig+0x9fa>
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <UART_SetConfig+0xa10>)
 8006062:	e002      	b.n	800606a <UART_SetConfig+0x9fa>
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <UART_SetConfig+0xa14>)
 8006066:	e000      	b.n	800606a <UART_SetConfig+0x9fa>
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <UART_SetConfig+0xa18>)
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800606c:	e07d      	b.n	800616a <UART_SetConfig+0xafa>
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
 8006074:	03d09000 	.word	0x03d09000
 8006078:	0003d090 	.word	0x0003d090
 800607c:	0007a120 	.word	0x0007a120
 8006080:	000f4240 	.word	0x000f4240
 8006084:	001e8480 	.word	0x001e8480
 8006088:	003d0900 	.word	0x003d0900
 800608c:	00516155 	.word	0x00516155
 8006090:	0061a800 	.word	0x0061a800
 8006094:	007a1200 	.word	0x007a1200
 8006098:	00a2c2aa 	.word	0x00a2c2aa
 800609c:	00f42400 	.word	0x00f42400
 80060a0:	01e84800 	.word	0x01e84800
 80060a4:	0001e848 	.word	0x0001e848
 80060a8:	00051615 	.word	0x00051615
 80060ac:	00061a80 	.word	0x00061a80
 80060b0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d04e      	beq.n	800615a <UART_SetConfig+0xaea>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d047      	beq.n	8006154 <UART_SetConfig+0xae4>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d040      	beq.n	800614e <UART_SetConfig+0xade>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d039      	beq.n	8006148 <UART_SetConfig+0xad8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d032      	beq.n	8006142 <UART_SetConfig+0xad2>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b05      	cmp	r3, #5
 80060e2:	d02b      	beq.n	800613c <UART_SetConfig+0xacc>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b06      	cmp	r3, #6
 80060ea:	d024      	beq.n	8006136 <UART_SetConfig+0xac6>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b07      	cmp	r3, #7
 80060f2:	d01d      	beq.n	8006130 <UART_SetConfig+0xac0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d016      	beq.n	800612a <UART_SetConfig+0xaba>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b09      	cmp	r3, #9
 8006102:	d00f      	beq.n	8006124 <UART_SetConfig+0xab4>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b0a      	cmp	r3, #10
 800610a:	d008      	beq.n	800611e <UART_SetConfig+0xaae>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b0b      	cmp	r3, #11
 8006112:	d101      	bne.n	8006118 <UART_SetConfig+0xaa8>
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	e022      	b.n	800615e <UART_SetConfig+0xaee>
 8006118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611c:	e01f      	b.n	800615e <UART_SetConfig+0xaee>
 800611e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006122:	e01c      	b.n	800615e <UART_SetConfig+0xaee>
 8006124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006128:	e019      	b.n	800615e <UART_SetConfig+0xaee>
 800612a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800612e:	e016      	b.n	800615e <UART_SetConfig+0xaee>
 8006130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006134:	e013      	b.n	800615e <UART_SetConfig+0xaee>
 8006136:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800613a:	e010      	b.n	800615e <UART_SetConfig+0xaee>
 800613c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006140:	e00d      	b.n	800615e <UART_SetConfig+0xaee>
 8006142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006146:	e00a      	b.n	800615e <UART_SetConfig+0xaee>
 8006148:	f241 5355 	movw	r3, #5461	; 0x1555
 800614c:	e007      	b.n	800615e <UART_SetConfig+0xaee>
 800614e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006152:	e004      	b.n	800615e <UART_SetConfig+0xaee>
 8006154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006158:	e001      	b.n	800615e <UART_SetConfig+0xaee>
 800615a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006160:	e003      	b.n	800616a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006168:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	2b00      	cmp	r3, #0
 800616e:	f001 83e8 	beq.w	8007942 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	4413      	add	r3, r2
 800617c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617e:	429a      	cmp	r2, r3
 8006180:	d305      	bcc.n	800618e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618a:	429a      	cmp	r2, r3
 800618c:	d904      	bls.n	8006198 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006194:	f001 bbd5 	b.w	8007942 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8006198:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800619c:	2b08      	cmp	r3, #8
 800619e:	f000 8154 	beq.w	800644a <UART_SetConfig+0xdda>
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	dc06      	bgt.n	80061b4 <UART_SetConfig+0xb44>
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d00f      	beq.n	80061ca <UART_SetConfig+0xb5a>
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	f000 80ac 	beq.w	8006308 <UART_SetConfig+0xc98>
 80061b0:	f000 bc30 	b.w	8006a14 <UART_SetConfig+0x13a4>
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	f000 832d 	beq.w	8006814 <UART_SetConfig+0x11a4>
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	f000 83a5 	beq.w	800690a <UART_SetConfig+0x129a>
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	f000 81e3 	beq.w	800658c <UART_SetConfig+0xf1c>
 80061c6:	f000 bc25 	b.w	8006a14 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061ca:	f7fd f98f 	bl	80034ec <HAL_RCCEx_GetD3PCLK1Freq>
 80061ce:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	4618      	mov	r0, r3
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d067      	beq.n	80062b0 <UART_SetConfig+0xc40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d05e      	beq.n	80062a6 <UART_SetConfig+0xc36>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d055      	beq.n	800629c <UART_SetConfig+0xc2c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	d04c      	beq.n	8006292 <UART_SetConfig+0xc22>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d043      	beq.n	8006288 <UART_SetConfig+0xc18>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b05      	cmp	r3, #5
 8006206:	d03a      	beq.n	800627e <UART_SetConfig+0xc0e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	2b06      	cmp	r3, #6
 800620e:	d031      	beq.n	8006274 <UART_SetConfig+0xc04>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	2b07      	cmp	r3, #7
 8006216:	d028      	beq.n	800626a <UART_SetConfig+0xbfa>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b08      	cmp	r3, #8
 800621e:	d01f      	beq.n	8006260 <UART_SetConfig+0xbf0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	2b09      	cmp	r3, #9
 8006226:	d016      	beq.n	8006256 <UART_SetConfig+0xbe6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	2b0a      	cmp	r3, #10
 800622e:	d00d      	beq.n	800624c <UART_SetConfig+0xbdc>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	2b0b      	cmp	r3, #11
 8006236:	d104      	bne.n	8006242 <UART_SetConfig+0xbd2>
 8006238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800623c:	f04f 0400 	mov.w	r4, #0
 8006240:	e03a      	b.n	80062b8 <UART_SetConfig+0xc48>
 8006242:	f04f 0301 	mov.w	r3, #1
 8006246:	f04f 0400 	mov.w	r4, #0
 800624a:	e035      	b.n	80062b8 <UART_SetConfig+0xc48>
 800624c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006250:	f04f 0400 	mov.w	r4, #0
 8006254:	e030      	b.n	80062b8 <UART_SetConfig+0xc48>
 8006256:	f04f 0340 	mov.w	r3, #64	; 0x40
 800625a:	f04f 0400 	mov.w	r4, #0
 800625e:	e02b      	b.n	80062b8 <UART_SetConfig+0xc48>
 8006260:	f04f 0320 	mov.w	r3, #32
 8006264:	f04f 0400 	mov.w	r4, #0
 8006268:	e026      	b.n	80062b8 <UART_SetConfig+0xc48>
 800626a:	f04f 0310 	mov.w	r3, #16
 800626e:	f04f 0400 	mov.w	r4, #0
 8006272:	e021      	b.n	80062b8 <UART_SetConfig+0xc48>
 8006274:	f04f 030c 	mov.w	r3, #12
 8006278:	f04f 0400 	mov.w	r4, #0
 800627c:	e01c      	b.n	80062b8 <UART_SetConfig+0xc48>
 800627e:	f04f 030a 	mov.w	r3, #10
 8006282:	f04f 0400 	mov.w	r4, #0
 8006286:	e017      	b.n	80062b8 <UART_SetConfig+0xc48>
 8006288:	f04f 0308 	mov.w	r3, #8
 800628c:	f04f 0400 	mov.w	r4, #0
 8006290:	e012      	b.n	80062b8 <UART_SetConfig+0xc48>
 8006292:	f04f 0306 	mov.w	r3, #6
 8006296:	f04f 0400 	mov.w	r4, #0
 800629a:	e00d      	b.n	80062b8 <UART_SetConfig+0xc48>
 800629c:	f04f 0304 	mov.w	r3, #4
 80062a0:	f04f 0400 	mov.w	r4, #0
 80062a4:	e008      	b.n	80062b8 <UART_SetConfig+0xc48>
 80062a6:	f04f 0302 	mov.w	r3, #2
 80062aa:	f04f 0400 	mov.w	r4, #0
 80062ae:	e003      	b.n	80062b8 <UART_SetConfig+0xc48>
 80062b0:	f04f 0301 	mov.w	r3, #1
 80062b4:	f04f 0400 	mov.w	r4, #0
 80062b8:	461a      	mov	r2, r3
 80062ba:	4623      	mov	r3, r4
 80062bc:	f7fa f80c 	bl	80002d8 <__aeabi_uldivmod>
 80062c0:	4603      	mov	r3, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	4619      	mov	r1, r3
 80062c6:	4622      	mov	r2, r4
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	f04f 0400 	mov.w	r4, #0
 80062d0:	0214      	lsls	r4, r2, #8
 80062d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80062d6:	020b      	lsls	r3, r1, #8
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6852      	ldr	r2, [r2, #4]
 80062dc:	0852      	lsrs	r2, r2, #1
 80062de:	4611      	mov	r1, r2
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	eb13 0b01 	adds.w	fp, r3, r1
 80062e8:	eb44 0c02 	adc.w	ip, r4, r2
 80062ec:	4658      	mov	r0, fp
 80062ee:	4661      	mov	r1, ip
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f04f 0400 	mov.w	r4, #0
 80062f8:	461a      	mov	r2, r3
 80062fa:	4623      	mov	r3, r4
 80062fc:	f7f9 ffec 	bl	80002d8 <__aeabi_uldivmod>
 8006300:	4603      	mov	r3, r0
 8006302:	460c      	mov	r4, r1
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006306:	e389      	b.n	8006a1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006308:	f107 0318 	add.w	r3, r7, #24
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd f903 	bl	8003518 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4618      	mov	r0, r3
 8006316:	f04f 0100 	mov.w	r1, #0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d067      	beq.n	80063f2 <UART_SetConfig+0xd82>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b01      	cmp	r3, #1
 8006328:	d05e      	beq.n	80063e8 <UART_SetConfig+0xd78>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b02      	cmp	r3, #2
 8006330:	d055      	beq.n	80063de <UART_SetConfig+0xd6e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	2b03      	cmp	r3, #3
 8006338:	d04c      	beq.n	80063d4 <UART_SetConfig+0xd64>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b04      	cmp	r3, #4
 8006340:	d043      	beq.n	80063ca <UART_SetConfig+0xd5a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	2b05      	cmp	r3, #5
 8006348:	d03a      	beq.n	80063c0 <UART_SetConfig+0xd50>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	2b06      	cmp	r3, #6
 8006350:	d031      	beq.n	80063b6 <UART_SetConfig+0xd46>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	2b07      	cmp	r3, #7
 8006358:	d028      	beq.n	80063ac <UART_SetConfig+0xd3c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b08      	cmp	r3, #8
 8006360:	d01f      	beq.n	80063a2 <UART_SetConfig+0xd32>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	2b09      	cmp	r3, #9
 8006368:	d016      	beq.n	8006398 <UART_SetConfig+0xd28>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	2b0a      	cmp	r3, #10
 8006370:	d00d      	beq.n	800638e <UART_SetConfig+0xd1e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	2b0b      	cmp	r3, #11
 8006378:	d104      	bne.n	8006384 <UART_SetConfig+0xd14>
 800637a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800637e:	f04f 0400 	mov.w	r4, #0
 8006382:	e03a      	b.n	80063fa <UART_SetConfig+0xd8a>
 8006384:	f04f 0301 	mov.w	r3, #1
 8006388:	f04f 0400 	mov.w	r4, #0
 800638c:	e035      	b.n	80063fa <UART_SetConfig+0xd8a>
 800638e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006392:	f04f 0400 	mov.w	r4, #0
 8006396:	e030      	b.n	80063fa <UART_SetConfig+0xd8a>
 8006398:	f04f 0340 	mov.w	r3, #64	; 0x40
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	e02b      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063a2:	f04f 0320 	mov.w	r3, #32
 80063a6:	f04f 0400 	mov.w	r4, #0
 80063aa:	e026      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063ac:	f04f 0310 	mov.w	r3, #16
 80063b0:	f04f 0400 	mov.w	r4, #0
 80063b4:	e021      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063b6:	f04f 030c 	mov.w	r3, #12
 80063ba:	f04f 0400 	mov.w	r4, #0
 80063be:	e01c      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063c0:	f04f 030a 	mov.w	r3, #10
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	e017      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063ca:	f04f 0308 	mov.w	r3, #8
 80063ce:	f04f 0400 	mov.w	r4, #0
 80063d2:	e012      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063d4:	f04f 0306 	mov.w	r3, #6
 80063d8:	f04f 0400 	mov.w	r4, #0
 80063dc:	e00d      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063de:	f04f 0304 	mov.w	r3, #4
 80063e2:	f04f 0400 	mov.w	r4, #0
 80063e6:	e008      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063e8:	f04f 0302 	mov.w	r3, #2
 80063ec:	f04f 0400 	mov.w	r4, #0
 80063f0:	e003      	b.n	80063fa <UART_SetConfig+0xd8a>
 80063f2:	f04f 0301 	mov.w	r3, #1
 80063f6:	f04f 0400 	mov.w	r4, #0
 80063fa:	461a      	mov	r2, r3
 80063fc:	4623      	mov	r3, r4
 80063fe:	f7f9 ff6b 	bl	80002d8 <__aeabi_uldivmod>
 8006402:	4603      	mov	r3, r0
 8006404:	460c      	mov	r4, r1
 8006406:	4619      	mov	r1, r3
 8006408:	4622      	mov	r2, r4
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	f04f 0400 	mov.w	r4, #0
 8006412:	0214      	lsls	r4, r2, #8
 8006414:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006418:	020b      	lsls	r3, r1, #8
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6852      	ldr	r2, [r2, #4]
 800641e:	0852      	lsrs	r2, r2, #1
 8006420:	4611      	mov	r1, r2
 8006422:	f04f 0200 	mov.w	r2, #0
 8006426:	eb13 0b01 	adds.w	fp, r3, r1
 800642a:	eb44 0c02 	adc.w	ip, r4, r2
 800642e:	4658      	mov	r0, fp
 8006430:	4661      	mov	r1, ip
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f04f 0400 	mov.w	r4, #0
 800643a:	461a      	mov	r2, r3
 800643c:	4623      	mov	r3, r4
 800643e:	f7f9 ff4b 	bl	80002d8 <__aeabi_uldivmod>
 8006442:	4603      	mov	r3, r0
 8006444:	460c      	mov	r4, r1
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006448:	e2e8      	b.n	8006a1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	4618      	mov	r0, r3
 8006450:	f7fd f9ae 	bl	80037b0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4618      	mov	r0, r3
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d067      	beq.n	8006534 <UART_SetConfig+0xec4>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	2b01      	cmp	r3, #1
 800646a:	d05e      	beq.n	800652a <UART_SetConfig+0xeba>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	2b02      	cmp	r3, #2
 8006472:	d055      	beq.n	8006520 <UART_SetConfig+0xeb0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b03      	cmp	r3, #3
 800647a:	d04c      	beq.n	8006516 <UART_SetConfig+0xea6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b04      	cmp	r3, #4
 8006482:	d043      	beq.n	800650c <UART_SetConfig+0xe9c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2b05      	cmp	r3, #5
 800648a:	d03a      	beq.n	8006502 <UART_SetConfig+0xe92>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	2b06      	cmp	r3, #6
 8006492:	d031      	beq.n	80064f8 <UART_SetConfig+0xe88>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2b07      	cmp	r3, #7
 800649a:	d028      	beq.n	80064ee <UART_SetConfig+0xe7e>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d01f      	beq.n	80064e4 <UART_SetConfig+0xe74>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	2b09      	cmp	r3, #9
 80064aa:	d016      	beq.n	80064da <UART_SetConfig+0xe6a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b0a      	cmp	r3, #10
 80064b2:	d00d      	beq.n	80064d0 <UART_SetConfig+0xe60>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	2b0b      	cmp	r3, #11
 80064ba:	d104      	bne.n	80064c6 <UART_SetConfig+0xe56>
 80064bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064c0:	f04f 0400 	mov.w	r4, #0
 80064c4:	e03a      	b.n	800653c <UART_SetConfig+0xecc>
 80064c6:	f04f 0301 	mov.w	r3, #1
 80064ca:	f04f 0400 	mov.w	r4, #0
 80064ce:	e035      	b.n	800653c <UART_SetConfig+0xecc>
 80064d0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80064d4:	f04f 0400 	mov.w	r4, #0
 80064d8:	e030      	b.n	800653c <UART_SetConfig+0xecc>
 80064da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80064de:	f04f 0400 	mov.w	r4, #0
 80064e2:	e02b      	b.n	800653c <UART_SetConfig+0xecc>
 80064e4:	f04f 0320 	mov.w	r3, #32
 80064e8:	f04f 0400 	mov.w	r4, #0
 80064ec:	e026      	b.n	800653c <UART_SetConfig+0xecc>
 80064ee:	f04f 0310 	mov.w	r3, #16
 80064f2:	f04f 0400 	mov.w	r4, #0
 80064f6:	e021      	b.n	800653c <UART_SetConfig+0xecc>
 80064f8:	f04f 030c 	mov.w	r3, #12
 80064fc:	f04f 0400 	mov.w	r4, #0
 8006500:	e01c      	b.n	800653c <UART_SetConfig+0xecc>
 8006502:	f04f 030a 	mov.w	r3, #10
 8006506:	f04f 0400 	mov.w	r4, #0
 800650a:	e017      	b.n	800653c <UART_SetConfig+0xecc>
 800650c:	f04f 0308 	mov.w	r3, #8
 8006510:	f04f 0400 	mov.w	r4, #0
 8006514:	e012      	b.n	800653c <UART_SetConfig+0xecc>
 8006516:	f04f 0306 	mov.w	r3, #6
 800651a:	f04f 0400 	mov.w	r4, #0
 800651e:	e00d      	b.n	800653c <UART_SetConfig+0xecc>
 8006520:	f04f 0304 	mov.w	r3, #4
 8006524:	f04f 0400 	mov.w	r4, #0
 8006528:	e008      	b.n	800653c <UART_SetConfig+0xecc>
 800652a:	f04f 0302 	mov.w	r3, #2
 800652e:	f04f 0400 	mov.w	r4, #0
 8006532:	e003      	b.n	800653c <UART_SetConfig+0xecc>
 8006534:	f04f 0301 	mov.w	r3, #1
 8006538:	f04f 0400 	mov.w	r4, #0
 800653c:	461a      	mov	r2, r3
 800653e:	4623      	mov	r3, r4
 8006540:	f7f9 feca 	bl	80002d8 <__aeabi_uldivmod>
 8006544:	4603      	mov	r3, r0
 8006546:	460c      	mov	r4, r1
 8006548:	4619      	mov	r1, r3
 800654a:	4622      	mov	r2, r4
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	f04f 0400 	mov.w	r4, #0
 8006554:	0214      	lsls	r4, r2, #8
 8006556:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800655a:	020b      	lsls	r3, r1, #8
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6852      	ldr	r2, [r2, #4]
 8006560:	0852      	lsrs	r2, r2, #1
 8006562:	4611      	mov	r1, r2
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	eb13 0b01 	adds.w	fp, r3, r1
 800656c:	eb44 0c02 	adc.w	ip, r4, r2
 8006570:	4658      	mov	r0, fp
 8006572:	4661      	mov	r1, ip
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f04f 0400 	mov.w	r4, #0
 800657c:	461a      	mov	r2, r3
 800657e:	4623      	mov	r3, r4
 8006580:	f7f9 feaa 	bl	80002d8 <__aeabi_uldivmod>
 8006584:	4603      	mov	r3, r0
 8006586:	460c      	mov	r4, r1
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800658a:	e247      	b.n	8006a1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800658c:	4b96      	ldr	r3, [pc, #600]	; (80067e8 <UART_SetConfig+0x1178>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 80a3 	beq.w	80066e0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800659a:	4b93      	ldr	r3, [pc, #588]	; (80067e8 <UART_SetConfig+0x1178>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	08db      	lsrs	r3, r3, #3
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	4a91      	ldr	r2, [pc, #580]	; (80067ec <UART_SetConfig+0x117c>)
 80065a6:	fa22 f303 	lsr.w	r3, r2, r3
 80065aa:	4618      	mov	r0, r3
 80065ac:	f04f 0100 	mov.w	r1, #0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d067      	beq.n	8006688 <UART_SetConfig+0x1018>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d05e      	beq.n	800667e <UART_SetConfig+0x100e>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d055      	beq.n	8006674 <UART_SetConfig+0x1004>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d04c      	beq.n	800666a <UART_SetConfig+0xffa>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d043      	beq.n	8006660 <UART_SetConfig+0xff0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	2b05      	cmp	r3, #5
 80065de:	d03a      	beq.n	8006656 <UART_SetConfig+0xfe6>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d031      	beq.n	800664c <UART_SetConfig+0xfdc>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	2b07      	cmp	r3, #7
 80065ee:	d028      	beq.n	8006642 <UART_SetConfig+0xfd2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d01f      	beq.n	8006638 <UART_SetConfig+0xfc8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2b09      	cmp	r3, #9
 80065fe:	d016      	beq.n	800662e <UART_SetConfig+0xfbe>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	2b0a      	cmp	r3, #10
 8006606:	d00d      	beq.n	8006624 <UART_SetConfig+0xfb4>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	2b0b      	cmp	r3, #11
 800660e:	d104      	bne.n	800661a <UART_SetConfig+0xfaa>
 8006610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006614:	f04f 0400 	mov.w	r4, #0
 8006618:	e03a      	b.n	8006690 <UART_SetConfig+0x1020>
 800661a:	f04f 0301 	mov.w	r3, #1
 800661e:	f04f 0400 	mov.w	r4, #0
 8006622:	e035      	b.n	8006690 <UART_SetConfig+0x1020>
 8006624:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006628:	f04f 0400 	mov.w	r4, #0
 800662c:	e030      	b.n	8006690 <UART_SetConfig+0x1020>
 800662e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006632:	f04f 0400 	mov.w	r4, #0
 8006636:	e02b      	b.n	8006690 <UART_SetConfig+0x1020>
 8006638:	f04f 0320 	mov.w	r3, #32
 800663c:	f04f 0400 	mov.w	r4, #0
 8006640:	e026      	b.n	8006690 <UART_SetConfig+0x1020>
 8006642:	f04f 0310 	mov.w	r3, #16
 8006646:	f04f 0400 	mov.w	r4, #0
 800664a:	e021      	b.n	8006690 <UART_SetConfig+0x1020>
 800664c:	f04f 030c 	mov.w	r3, #12
 8006650:	f04f 0400 	mov.w	r4, #0
 8006654:	e01c      	b.n	8006690 <UART_SetConfig+0x1020>
 8006656:	f04f 030a 	mov.w	r3, #10
 800665a:	f04f 0400 	mov.w	r4, #0
 800665e:	e017      	b.n	8006690 <UART_SetConfig+0x1020>
 8006660:	f04f 0308 	mov.w	r3, #8
 8006664:	f04f 0400 	mov.w	r4, #0
 8006668:	e012      	b.n	8006690 <UART_SetConfig+0x1020>
 800666a:	f04f 0306 	mov.w	r3, #6
 800666e:	f04f 0400 	mov.w	r4, #0
 8006672:	e00d      	b.n	8006690 <UART_SetConfig+0x1020>
 8006674:	f04f 0304 	mov.w	r3, #4
 8006678:	f04f 0400 	mov.w	r4, #0
 800667c:	e008      	b.n	8006690 <UART_SetConfig+0x1020>
 800667e:	f04f 0302 	mov.w	r3, #2
 8006682:	f04f 0400 	mov.w	r4, #0
 8006686:	e003      	b.n	8006690 <UART_SetConfig+0x1020>
 8006688:	f04f 0301 	mov.w	r3, #1
 800668c:	f04f 0400 	mov.w	r4, #0
 8006690:	461a      	mov	r2, r3
 8006692:	4623      	mov	r3, r4
 8006694:	f7f9 fe20 	bl	80002d8 <__aeabi_uldivmod>
 8006698:	4603      	mov	r3, r0
 800669a:	460c      	mov	r4, r1
 800669c:	4619      	mov	r1, r3
 800669e:	4622      	mov	r2, r4
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	f04f 0400 	mov.w	r4, #0
 80066a8:	0214      	lsls	r4, r2, #8
 80066aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80066ae:	020b      	lsls	r3, r1, #8
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6852      	ldr	r2, [r2, #4]
 80066b4:	0852      	lsrs	r2, r2, #1
 80066b6:	4611      	mov	r1, r2
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	eb13 0b01 	adds.w	fp, r3, r1
 80066c0:	eb44 0c02 	adc.w	ip, r4, r2
 80066c4:	4658      	mov	r0, fp
 80066c6:	4661      	mov	r1, ip
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f04f 0400 	mov.w	r4, #0
 80066d0:	461a      	mov	r2, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	f7f9 fe00 	bl	80002d8 <__aeabi_uldivmod>
 80066d8:	4603      	mov	r3, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80066de:	e19d      	b.n	8006a1c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d05b      	beq.n	80067a0 <UART_SetConfig+0x1130>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d053      	beq.n	8006798 <UART_SetConfig+0x1128>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d04b      	beq.n	8006790 <UART_SetConfig+0x1120>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d043      	beq.n	8006788 <UART_SetConfig+0x1118>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	2b04      	cmp	r3, #4
 8006706:	d03b      	beq.n	8006780 <UART_SetConfig+0x1110>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b05      	cmp	r3, #5
 800670e:	d033      	beq.n	8006778 <UART_SetConfig+0x1108>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	2b06      	cmp	r3, #6
 8006716:	d02b      	beq.n	8006770 <UART_SetConfig+0x1100>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	2b07      	cmp	r3, #7
 800671e:	d023      	beq.n	8006768 <UART_SetConfig+0x10f8>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	2b08      	cmp	r3, #8
 8006726:	d01b      	beq.n	8006760 <UART_SetConfig+0x10f0>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	2b09      	cmp	r3, #9
 800672e:	d013      	beq.n	8006758 <UART_SetConfig+0x10e8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	2b0a      	cmp	r3, #10
 8006736:	d00b      	beq.n	8006750 <UART_SetConfig+0x10e0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	2b0b      	cmp	r3, #11
 800673e:	d103      	bne.n	8006748 <UART_SetConfig+0x10d8>
 8006740:	4b2a      	ldr	r3, [pc, #168]	; (80067ec <UART_SetConfig+0x117c>)
 8006742:	f04f 0400 	mov.w	r4, #0
 8006746:	e02e      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006748:	4b29      	ldr	r3, [pc, #164]	; (80067f0 <UART_SetConfig+0x1180>)
 800674a:	f04f 0403 	mov.w	r4, #3
 800674e:	e02a      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <UART_SetConfig+0x1184>)
 8006752:	f04f 0400 	mov.w	r4, #0
 8006756:	e026      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006758:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <UART_SetConfig+0x1188>)
 800675a:	f04f 0400 	mov.w	r4, #0
 800675e:	e022      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006760:	4b26      	ldr	r3, [pc, #152]	; (80067fc <UART_SetConfig+0x118c>)
 8006762:	f04f 0400 	mov.w	r4, #0
 8006766:	e01e      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <UART_SetConfig+0x1190>)
 800676a:	f04f 0400 	mov.w	r4, #0
 800676e:	e01a      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006770:	a419      	add	r4, pc, #100	; (adr r4, 80067d8 <UART_SetConfig+0x1168>)
 8006772:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006776:	e016      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006778:	4b22      	ldr	r3, [pc, #136]	; (8006804 <UART_SetConfig+0x1194>)
 800677a:	f04f 0400 	mov.w	r4, #0
 800677e:	e012      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006780:	4b21      	ldr	r3, [pc, #132]	; (8006808 <UART_SetConfig+0x1198>)
 8006782:	f04f 0400 	mov.w	r4, #0
 8006786:	e00e      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006788:	a415      	add	r4, pc, #84	; (adr r4, 80067e0 <UART_SetConfig+0x1170>)
 800678a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800678e:	e00a      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006790:	4b1e      	ldr	r3, [pc, #120]	; (800680c <UART_SetConfig+0x119c>)
 8006792:	f04f 0400 	mov.w	r4, #0
 8006796:	e006      	b.n	80067a6 <UART_SetConfig+0x1136>
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <UART_SetConfig+0x11a0>)
 800679a:	f04f 0401 	mov.w	r4, #1
 800679e:	e002      	b.n	80067a6 <UART_SetConfig+0x1136>
 80067a0:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <UART_SetConfig+0x1180>)
 80067a2:	f04f 0403 	mov.w	r4, #3
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6852      	ldr	r2, [r2, #4]
 80067aa:	0852      	lsrs	r2, r2, #1
 80067ac:	4611      	mov	r1, r2
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	eb13 0b01 	adds.w	fp, r3, r1
 80067b6:	eb44 0c02 	adc.w	ip, r4, r2
 80067ba:	4658      	mov	r0, fp
 80067bc:	4661      	mov	r1, ip
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f04f 0400 	mov.w	r4, #0
 80067c6:	461a      	mov	r2, r3
 80067c8:	4623      	mov	r3, r4
 80067ca:	f7f9 fd85 	bl	80002d8 <__aeabi_uldivmod>
 80067ce:	4603      	mov	r3, r0
 80067d0:	460c      	mov	r4, r1
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80067d4:	e122      	b.n	8006a1c <UART_SetConfig+0x13ac>
 80067d6:	bf00      	nop
 80067d8:	51615500 	.word	0x51615500
 80067dc:	00000000 	.word	0x00000000
 80067e0:	a2c2aa00 	.word	0xa2c2aa00
 80067e4:	00000000 	.word	0x00000000
 80067e8:	58024400 	.word	0x58024400
 80067ec:	03d09000 	.word	0x03d09000
 80067f0:	d0900000 	.word	0xd0900000
 80067f4:	07a12000 	.word	0x07a12000
 80067f8:	0f424000 	.word	0x0f424000
 80067fc:	1e848000 	.word	0x1e848000
 8006800:	3d090000 	.word	0x3d090000
 8006804:	61a80000 	.word	0x61a80000
 8006808:	7a120000 	.word	0x7a120000
 800680c:	f4240000 	.word	0xf4240000
 8006810:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	2b00      	cmp	r3, #0
 800681a:	d05b      	beq.n	80068d4 <UART_SetConfig+0x1264>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b01      	cmp	r3, #1
 8006822:	d053      	beq.n	80068cc <UART_SetConfig+0x125c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	2b02      	cmp	r3, #2
 800682a:	d04b      	beq.n	80068c4 <UART_SetConfig+0x1254>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2b03      	cmp	r3, #3
 8006832:	d043      	beq.n	80068bc <UART_SetConfig+0x124c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	2b04      	cmp	r3, #4
 800683a:	d03b      	beq.n	80068b4 <UART_SetConfig+0x1244>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	2b05      	cmp	r3, #5
 8006842:	d033      	beq.n	80068ac <UART_SetConfig+0x123c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2b06      	cmp	r3, #6
 800684a:	d02b      	beq.n	80068a4 <UART_SetConfig+0x1234>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b07      	cmp	r3, #7
 8006852:	d023      	beq.n	800689c <UART_SetConfig+0x122c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b08      	cmp	r3, #8
 800685a:	d01b      	beq.n	8006894 <UART_SetConfig+0x1224>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b09      	cmp	r3, #9
 8006862:	d013      	beq.n	800688c <UART_SetConfig+0x121c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b0a      	cmp	r3, #10
 800686a:	d00b      	beq.n	8006884 <UART_SetConfig+0x1214>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	2b0b      	cmp	r3, #11
 8006872:	d103      	bne.n	800687c <UART_SetConfig+0x120c>
 8006874:	4bc0      	ldr	r3, [pc, #768]	; (8006b78 <UART_SetConfig+0x1508>)
 8006876:	f04f 0400 	mov.w	r4, #0
 800687a:	e02e      	b.n	80068da <UART_SetConfig+0x126a>
 800687c:	4bbf      	ldr	r3, [pc, #764]	; (8006b7c <UART_SetConfig+0x150c>)
 800687e:	f04f 0400 	mov.w	r4, #0
 8006882:	e02a      	b.n	80068da <UART_SetConfig+0x126a>
 8006884:	4bbe      	ldr	r3, [pc, #760]	; (8006b80 <UART_SetConfig+0x1510>)
 8006886:	f04f 0400 	mov.w	r4, #0
 800688a:	e026      	b.n	80068da <UART_SetConfig+0x126a>
 800688c:	4bbd      	ldr	r3, [pc, #756]	; (8006b84 <UART_SetConfig+0x1514>)
 800688e:	f04f 0400 	mov.w	r4, #0
 8006892:	e022      	b.n	80068da <UART_SetConfig+0x126a>
 8006894:	4bbc      	ldr	r3, [pc, #752]	; (8006b88 <UART_SetConfig+0x1518>)
 8006896:	f04f 0400 	mov.w	r4, #0
 800689a:	e01e      	b.n	80068da <UART_SetConfig+0x126a>
 800689c:	4bbb      	ldr	r3, [pc, #748]	; (8006b8c <UART_SetConfig+0x151c>)
 800689e:	f04f 0400 	mov.w	r4, #0
 80068a2:	e01a      	b.n	80068da <UART_SetConfig+0x126a>
 80068a4:	a4b0      	add	r4, pc, #704	; (adr r4, 8006b68 <UART_SetConfig+0x14f8>)
 80068a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80068aa:	e016      	b.n	80068da <UART_SetConfig+0x126a>
 80068ac:	4bb8      	ldr	r3, [pc, #736]	; (8006b90 <UART_SetConfig+0x1520>)
 80068ae:	f04f 0400 	mov.w	r4, #0
 80068b2:	e012      	b.n	80068da <UART_SetConfig+0x126a>
 80068b4:	4bb7      	ldr	r3, [pc, #732]	; (8006b94 <UART_SetConfig+0x1524>)
 80068b6:	f04f 0400 	mov.w	r4, #0
 80068ba:	e00e      	b.n	80068da <UART_SetConfig+0x126a>
 80068bc:	a4ac      	add	r4, pc, #688	; (adr r4, 8006b70 <UART_SetConfig+0x1500>)
 80068be:	e9d4 3400 	ldrd	r3, r4, [r4]
 80068c2:	e00a      	b.n	80068da <UART_SetConfig+0x126a>
 80068c4:	4bb4      	ldr	r3, [pc, #720]	; (8006b98 <UART_SetConfig+0x1528>)
 80068c6:	f04f 0400 	mov.w	r4, #0
 80068ca:	e006      	b.n	80068da <UART_SetConfig+0x126a>
 80068cc:	4bb3      	ldr	r3, [pc, #716]	; (8006b9c <UART_SetConfig+0x152c>)
 80068ce:	f04f 0400 	mov.w	r4, #0
 80068d2:	e002      	b.n	80068da <UART_SetConfig+0x126a>
 80068d4:	4ba9      	ldr	r3, [pc, #676]	; (8006b7c <UART_SetConfig+0x150c>)
 80068d6:	f04f 0400 	mov.w	r4, #0
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6852      	ldr	r2, [r2, #4]
 80068de:	0852      	lsrs	r2, r2, #1
 80068e0:	4611      	mov	r1, r2
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	eb13 0b01 	adds.w	fp, r3, r1
 80068ea:	eb44 0c02 	adc.w	ip, r4, r2
 80068ee:	4658      	mov	r0, fp
 80068f0:	4661      	mov	r1, ip
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f04f 0400 	mov.w	r4, #0
 80068fa:	461a      	mov	r2, r3
 80068fc:	4623      	mov	r3, r4
 80068fe:	f7f9 fceb 	bl	80002d8 <__aeabi_uldivmod>
 8006902:	4603      	mov	r3, r0
 8006904:	460c      	mov	r4, r1
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006908:	e088      	b.n	8006a1c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2b00      	cmp	r3, #0
 8006910:	d064      	beq.n	80069dc <UART_SetConfig+0x136c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	2b01      	cmp	r3, #1
 8006918:	d05b      	beq.n	80069d2 <UART_SetConfig+0x1362>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b02      	cmp	r3, #2
 8006920:	d052      	beq.n	80069c8 <UART_SetConfig+0x1358>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	2b03      	cmp	r3, #3
 8006928:	d04a      	beq.n	80069c0 <UART_SetConfig+0x1350>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b04      	cmp	r3, #4
 8006930:	d041      	beq.n	80069b6 <UART_SetConfig+0x1346>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	2b05      	cmp	r3, #5
 8006938:	d039      	beq.n	80069ae <UART_SetConfig+0x133e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2b06      	cmp	r3, #6
 8006940:	d031      	beq.n	80069a6 <UART_SetConfig+0x1336>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b07      	cmp	r3, #7
 8006948:	d028      	beq.n	800699c <UART_SetConfig+0x132c>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	2b08      	cmp	r3, #8
 8006950:	d01f      	beq.n	8006992 <UART_SetConfig+0x1322>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b09      	cmp	r3, #9
 8006958:	d016      	beq.n	8006988 <UART_SetConfig+0x1318>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b0a      	cmp	r3, #10
 8006960:	d00d      	beq.n	800697e <UART_SetConfig+0x130e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b0b      	cmp	r3, #11
 8006968:	d104      	bne.n	8006974 <UART_SetConfig+0x1304>
 800696a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800696e:	f04f 0400 	mov.w	r4, #0
 8006972:	e037      	b.n	80069e4 <UART_SetConfig+0x1374>
 8006974:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006978:	f04f 0400 	mov.w	r4, #0
 800697c:	e032      	b.n	80069e4 <UART_SetConfig+0x1374>
 800697e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006982:	f04f 0400 	mov.w	r4, #0
 8006986:	e02d      	b.n	80069e4 <UART_SetConfig+0x1374>
 8006988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800698c:	f04f 0400 	mov.w	r4, #0
 8006990:	e028      	b.n	80069e4 <UART_SetConfig+0x1374>
 8006992:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006996:	f04f 0400 	mov.w	r4, #0
 800699a:	e023      	b.n	80069e4 <UART_SetConfig+0x1374>
 800699c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069a0:	f04f 0400 	mov.w	r4, #0
 80069a4:	e01e      	b.n	80069e4 <UART_SetConfig+0x1374>
 80069a6:	4b7e      	ldr	r3, [pc, #504]	; (8006ba0 <UART_SetConfig+0x1530>)
 80069a8:	f04f 0400 	mov.w	r4, #0
 80069ac:	e01a      	b.n	80069e4 <UART_SetConfig+0x1374>
 80069ae:	4b7d      	ldr	r3, [pc, #500]	; (8006ba4 <UART_SetConfig+0x1534>)
 80069b0:	f04f 0400 	mov.w	r4, #0
 80069b4:	e016      	b.n	80069e4 <UART_SetConfig+0x1374>
 80069b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069ba:	f04f 0400 	mov.w	r4, #0
 80069be:	e011      	b.n	80069e4 <UART_SetConfig+0x1374>
 80069c0:	4b79      	ldr	r3, [pc, #484]	; (8006ba8 <UART_SetConfig+0x1538>)
 80069c2:	f04f 0400 	mov.w	r4, #0
 80069c6:	e00d      	b.n	80069e4 <UART_SetConfig+0x1374>
 80069c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069cc:	f04f 0400 	mov.w	r4, #0
 80069d0:	e008      	b.n	80069e4 <UART_SetConfig+0x1374>
 80069d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069d6:	f04f 0400 	mov.w	r4, #0
 80069da:	e003      	b.n	80069e4 <UART_SetConfig+0x1374>
 80069dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80069e0:	f04f 0400 	mov.w	r4, #0
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6852      	ldr	r2, [r2, #4]
 80069e8:	0852      	lsrs	r2, r2, #1
 80069ea:	4611      	mov	r1, r2
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	eb13 0b01 	adds.w	fp, r3, r1
 80069f4:	eb44 0c02 	adc.w	ip, r4, r2
 80069f8:	4658      	mov	r0, fp
 80069fa:	4661      	mov	r1, ip
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f04f 0400 	mov.w	r4, #0
 8006a04:	461a      	mov	r2, r3
 8006a06:	4623      	mov	r3, r4
 8006a08:	f7f9 fc66 	bl	80002d8 <__aeabi_uldivmod>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a12:	e003      	b.n	8006a1c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8006a1a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a22:	d309      	bcc.n	8006a38 <UART_SetConfig+0x13c8>
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2a:	d205      	bcs.n	8006a38 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a32:	60da      	str	r2, [r3, #12]
 8006a34:	f000 bf85 	b.w	8007942 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a3e:	f000 bf80 	b.w	8007942 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4a:	f040 83da 	bne.w	8007202 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8006a4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	f200 83b3 	bhi.w	80071be <UART_SetConfig+0x1b4e>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x13f0>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006bad 	.word	0x08006bad
 8006a64:	08006c65 	.word	0x08006c65
 8006a68:	080071bf 	.word	0x080071bf
 8006a6c:	080071bf 	.word	0x080071bf
 8006a70:	08006d1d 	.word	0x08006d1d
 8006a74:	080071bf 	.word	0x080071bf
 8006a78:	080071bf 	.word	0x080071bf
 8006a7c:	080071bf 	.word	0x080071bf
 8006a80:	08006dd9 	.word	0x08006dd9
 8006a84:	080071bf 	.word	0x080071bf
 8006a88:	080071bf 	.word	0x080071bf
 8006a8c:	080071bf 	.word	0x080071bf
 8006a90:	080071bf 	.word	0x080071bf
 8006a94:	080071bf 	.word	0x080071bf
 8006a98:	080071bf 	.word	0x080071bf
 8006a9c:	080071bf 	.word	0x080071bf
 8006aa0:	08006e95 	.word	0x08006e95
 8006aa4:	080071bf 	.word	0x080071bf
 8006aa8:	080071bf 	.word	0x080071bf
 8006aac:	080071bf 	.word	0x080071bf
 8006ab0:	080071bf 	.word	0x080071bf
 8006ab4:	080071bf 	.word	0x080071bf
 8006ab8:	080071bf 	.word	0x080071bf
 8006abc:	080071bf 	.word	0x080071bf
 8006ac0:	080071bf 	.word	0x080071bf
 8006ac4:	080071bf 	.word	0x080071bf
 8006ac8:	080071bf 	.word	0x080071bf
 8006acc:	080071bf 	.word	0x080071bf
 8006ad0:	080071bf 	.word	0x080071bf
 8006ad4:	080071bf 	.word	0x080071bf
 8006ad8:	080071bf 	.word	0x080071bf
 8006adc:	080071bf 	.word	0x080071bf
 8006ae0:	08007007 	.word	0x08007007
 8006ae4:	080071bf 	.word	0x080071bf
 8006ae8:	080071bf 	.word	0x080071bf
 8006aec:	080071bf 	.word	0x080071bf
 8006af0:	080071bf 	.word	0x080071bf
 8006af4:	080071bf 	.word	0x080071bf
 8006af8:	080071bf 	.word	0x080071bf
 8006afc:	080071bf 	.word	0x080071bf
 8006b00:	080071bf 	.word	0x080071bf
 8006b04:	080071bf 	.word	0x080071bf
 8006b08:	080071bf 	.word	0x080071bf
 8006b0c:	080071bf 	.word	0x080071bf
 8006b10:	080071bf 	.word	0x080071bf
 8006b14:	080071bf 	.word	0x080071bf
 8006b18:	080071bf 	.word	0x080071bf
 8006b1c:	080071bf 	.word	0x080071bf
 8006b20:	080071bf 	.word	0x080071bf
 8006b24:	080071bf 	.word	0x080071bf
 8006b28:	080071bf 	.word	0x080071bf
 8006b2c:	080071bf 	.word	0x080071bf
 8006b30:	080071bf 	.word	0x080071bf
 8006b34:	080071bf 	.word	0x080071bf
 8006b38:	080071bf 	.word	0x080071bf
 8006b3c:	080071bf 	.word	0x080071bf
 8006b40:	080071bf 	.word	0x080071bf
 8006b44:	080071bf 	.word	0x080071bf
 8006b48:	080071bf 	.word	0x080071bf
 8006b4c:	080071bf 	.word	0x080071bf
 8006b50:	080071bf 	.word	0x080071bf
 8006b54:	080071bf 	.word	0x080071bf
 8006b58:	080071bf 	.word	0x080071bf
 8006b5c:	080071bf 	.word	0x080071bf
 8006b60:	080070fd 	.word	0x080070fd
 8006b64:	f3af 8000 	nop.w
 8006b68:	05161500 	.word	0x05161500
 8006b6c:	00000000 	.word	0x00000000
 8006b70:	0a2c2a00 	.word	0x0a2c2a00
 8006b74:	00000000 	.word	0x00000000
 8006b78:	003d0900 	.word	0x003d0900
 8006b7c:	3d090000 	.word	0x3d090000
 8006b80:	007a1200 	.word	0x007a1200
 8006b84:	00f42400 	.word	0x00f42400
 8006b88:	01e84800 	.word	0x01e84800
 8006b8c:	03d09000 	.word	0x03d09000
 8006b90:	061a8000 	.word	0x061a8000
 8006b94:	07a12000 	.word	0x07a12000
 8006b98:	0f424000 	.word	0x0f424000
 8006b9c:	1e848000 	.word	0x1e848000
 8006ba0:	000aaa00 	.word	0x000aaa00
 8006ba4:	000ccc00 	.word	0x000ccc00
 8006ba8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bac:	f7fb fd82 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8006bb0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d044      	beq.n	8006c44 <UART_SetConfig+0x15d4>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d03e      	beq.n	8006c40 <UART_SetConfig+0x15d0>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d038      	beq.n	8006c3c <UART_SetConfig+0x15cc>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d032      	beq.n	8006c38 <UART_SetConfig+0x15c8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d02c      	beq.n	8006c34 <UART_SetConfig+0x15c4>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	d026      	beq.n	8006c30 <UART_SetConfig+0x15c0>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d020      	beq.n	8006c2c <UART_SetConfig+0x15bc>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b07      	cmp	r3, #7
 8006bf0:	d01a      	beq.n	8006c28 <UART_SetConfig+0x15b8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d014      	beq.n	8006c24 <UART_SetConfig+0x15b4>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d00e      	beq.n	8006c20 <UART_SetConfig+0x15b0>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	2b0a      	cmp	r3, #10
 8006c08:	d008      	beq.n	8006c1c <UART_SetConfig+0x15ac>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	2b0b      	cmp	r3, #11
 8006c10:	d102      	bne.n	8006c18 <UART_SetConfig+0x15a8>
 8006c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c16:	e016      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e014      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c1c:	2380      	movs	r3, #128	; 0x80
 8006c1e:	e012      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c20:	2340      	movs	r3, #64	; 0x40
 8006c22:	e010      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c24:	2320      	movs	r3, #32
 8006c26:	e00e      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	e00c      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	e00a      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c30:	230a      	movs	r3, #10
 8006c32:	e008      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c34:	2308      	movs	r3, #8
 8006c36:	e006      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c38:	2306      	movs	r3, #6
 8006c3a:	e004      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	e002      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e000      	b.n	8006c46 <UART_SetConfig+0x15d6>
 8006c44:	2301      	movs	r3, #1
 8006c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4c:	005a      	lsls	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	085b      	lsrs	r3, r3, #1
 8006c54:	441a      	add	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c62:	e2b0      	b.n	80071c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c64:	f7fb fd3c 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8006c68:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d044      	beq.n	8006cfc <UART_SetConfig+0x168c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d03e      	beq.n	8006cf8 <UART_SetConfig+0x1688>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d038      	beq.n	8006cf4 <UART_SetConfig+0x1684>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d032      	beq.n	8006cf0 <UART_SetConfig+0x1680>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d02c      	beq.n	8006cec <UART_SetConfig+0x167c>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b05      	cmp	r3, #5
 8006c98:	d026      	beq.n	8006ce8 <UART_SetConfig+0x1678>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b06      	cmp	r3, #6
 8006ca0:	d020      	beq.n	8006ce4 <UART_SetConfig+0x1674>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b07      	cmp	r3, #7
 8006ca8:	d01a      	beq.n	8006ce0 <UART_SetConfig+0x1670>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d014      	beq.n	8006cdc <UART_SetConfig+0x166c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d00e      	beq.n	8006cd8 <UART_SetConfig+0x1668>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b0a      	cmp	r3, #10
 8006cc0:	d008      	beq.n	8006cd4 <UART_SetConfig+0x1664>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b0b      	cmp	r3, #11
 8006cc8:	d102      	bne.n	8006cd0 <UART_SetConfig+0x1660>
 8006cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cce:	e016      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e014      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cd4:	2380      	movs	r3, #128	; 0x80
 8006cd6:	e012      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cd8:	2340      	movs	r3, #64	; 0x40
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cdc:	2320      	movs	r3, #32
 8006cde:	e00e      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	e00c      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	e00a      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006ce8:	230a      	movs	r3, #10
 8006cea:	e008      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cec:	2308      	movs	r3, #8
 8006cee:	e006      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	e004      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	e002      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e000      	b.n	8006cfe <UART_SetConfig+0x168e>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d04:	005a      	lsls	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	441a      	add	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d1a:	e254      	b.n	80071c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d1c:	f107 0318 	add.w	r3, r7, #24
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fc fbf9 	bl	8003518 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d044      	beq.n	8006dba <UART_SetConfig+0x174a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d03e      	beq.n	8006db6 <UART_SetConfig+0x1746>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d038      	beq.n	8006db2 <UART_SetConfig+0x1742>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d032      	beq.n	8006dae <UART_SetConfig+0x173e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d02c      	beq.n	8006daa <UART_SetConfig+0x173a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	2b05      	cmp	r3, #5
 8006d56:	d026      	beq.n	8006da6 <UART_SetConfig+0x1736>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	2b06      	cmp	r3, #6
 8006d5e:	d020      	beq.n	8006da2 <UART_SetConfig+0x1732>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	d01a      	beq.n	8006d9e <UART_SetConfig+0x172e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d014      	beq.n	8006d9a <UART_SetConfig+0x172a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	2b09      	cmp	r3, #9
 8006d76:	d00e      	beq.n	8006d96 <UART_SetConfig+0x1726>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b0a      	cmp	r3, #10
 8006d7e:	d008      	beq.n	8006d92 <UART_SetConfig+0x1722>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b0b      	cmp	r3, #11
 8006d86:	d102      	bne.n	8006d8e <UART_SetConfig+0x171e>
 8006d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d8c:	e016      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e014      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	e012      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	e010      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006d9a:	2320      	movs	r3, #32
 8006d9c:	e00e      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006d9e:	2310      	movs	r3, #16
 8006da0:	e00c      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006da2:	230c      	movs	r3, #12
 8006da4:	e00a      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006da6:	230a      	movs	r3, #10
 8006da8:	e008      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006daa:	2308      	movs	r3, #8
 8006dac:	e006      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006dae:	2306      	movs	r3, #6
 8006db0:	e004      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006db2:	2304      	movs	r3, #4
 8006db4:	e002      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e000      	b.n	8006dbc <UART_SetConfig+0x174c>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc0:	005a      	lsls	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dd6:	e1f6      	b.n	80071c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd8:	f107 030c 	add.w	r3, r7, #12
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fc fce7 	bl	80037b0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d044      	beq.n	8006e76 <UART_SetConfig+0x1806>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d03e      	beq.n	8006e72 <UART_SetConfig+0x1802>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d038      	beq.n	8006e6e <UART_SetConfig+0x17fe>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d032      	beq.n	8006e6a <UART_SetConfig+0x17fa>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d02c      	beq.n	8006e66 <UART_SetConfig+0x17f6>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	d026      	beq.n	8006e62 <UART_SetConfig+0x17f2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	2b06      	cmp	r3, #6
 8006e1a:	d020      	beq.n	8006e5e <UART_SetConfig+0x17ee>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	2b07      	cmp	r3, #7
 8006e22:	d01a      	beq.n	8006e5a <UART_SetConfig+0x17ea>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d014      	beq.n	8006e56 <UART_SetConfig+0x17e6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	2b09      	cmp	r3, #9
 8006e32:	d00e      	beq.n	8006e52 <UART_SetConfig+0x17e2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	2b0a      	cmp	r3, #10
 8006e3a:	d008      	beq.n	8006e4e <UART_SetConfig+0x17de>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	2b0b      	cmp	r3, #11
 8006e42:	d102      	bne.n	8006e4a <UART_SetConfig+0x17da>
 8006e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e48:	e016      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e014      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e4e:	2380      	movs	r3, #128	; 0x80
 8006e50:	e012      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e52:	2340      	movs	r3, #64	; 0x40
 8006e54:	e010      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e56:	2320      	movs	r3, #32
 8006e58:	e00e      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	e00c      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	e00a      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e62:	230a      	movs	r3, #10
 8006e64:	e008      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e66:	2308      	movs	r3, #8
 8006e68:	e006      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e6a:	2306      	movs	r3, #6
 8006e6c:	e004      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e6e:	2304      	movs	r3, #4
 8006e70:	e002      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e000      	b.n	8006e78 <UART_SetConfig+0x1808>
 8006e76:	2301      	movs	r3, #1
 8006e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e7c:	005a      	lsls	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e92:	e198      	b.n	80071c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e94:	4b87      	ldr	r3, [pc, #540]	; (80070b4 <UART_SetConfig+0x1a44>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d05e      	beq.n	8006f5e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea0:	4b84      	ldr	r3, [pc, #528]	; (80070b4 <UART_SetConfig+0x1a44>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a83      	ldr	r2, [pc, #524]	; (80070b8 <UART_SetConfig+0x1a48>)
 8006eac:	40da      	lsrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d044      	beq.n	8006f40 <UART_SetConfig+0x18d0>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d03e      	beq.n	8006f3c <UART_SetConfig+0x18cc>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d038      	beq.n	8006f38 <UART_SetConfig+0x18c8>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d032      	beq.n	8006f34 <UART_SetConfig+0x18c4>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d02c      	beq.n	8006f30 <UART_SetConfig+0x18c0>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b05      	cmp	r3, #5
 8006edc:	d026      	beq.n	8006f2c <UART_SetConfig+0x18bc>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d020      	beq.n	8006f28 <UART_SetConfig+0x18b8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	2b07      	cmp	r3, #7
 8006eec:	d01a      	beq.n	8006f24 <UART_SetConfig+0x18b4>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d014      	beq.n	8006f20 <UART_SetConfig+0x18b0>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	2b09      	cmp	r3, #9
 8006efc:	d00e      	beq.n	8006f1c <UART_SetConfig+0x18ac>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	2b0a      	cmp	r3, #10
 8006f04:	d008      	beq.n	8006f18 <UART_SetConfig+0x18a8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	2b0b      	cmp	r3, #11
 8006f0c:	d102      	bne.n	8006f14 <UART_SetConfig+0x18a4>
 8006f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f12:	e016      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e014      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f18:	2380      	movs	r3, #128	; 0x80
 8006f1a:	e012      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f1c:	2340      	movs	r3, #64	; 0x40
 8006f1e:	e010      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f20:	2320      	movs	r3, #32
 8006f22:	e00e      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f24:	2310      	movs	r3, #16
 8006f26:	e00c      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	e00a      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f2c:	230a      	movs	r3, #10
 8006f2e:	e008      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f30:	2308      	movs	r3, #8
 8006f32:	e006      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f34:	2306      	movs	r3, #6
 8006f36:	e004      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f38:	2304      	movs	r3, #4
 8006f3a:	e002      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e000      	b.n	8006f42 <UART_SetConfig+0x18d2>
 8006f40:	2301      	movs	r3, #1
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	005a      	lsls	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	441a      	add	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006f5c:	e133      	b.n	80071c6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d043      	beq.n	8006fee <UART_SetConfig+0x197e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d03d      	beq.n	8006fea <UART_SetConfig+0x197a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d037      	beq.n	8006fe6 <UART_SetConfig+0x1976>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d031      	beq.n	8006fe2 <UART_SetConfig+0x1972>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d02b      	beq.n	8006fde <UART_SetConfig+0x196e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	d025      	beq.n	8006fda <UART_SetConfig+0x196a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d01f      	beq.n	8006fd6 <UART_SetConfig+0x1966>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	2b07      	cmp	r3, #7
 8006f9c:	d019      	beq.n	8006fd2 <UART_SetConfig+0x1962>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d013      	beq.n	8006fce <UART_SetConfig+0x195e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	2b09      	cmp	r3, #9
 8006fac:	d00d      	beq.n	8006fca <UART_SetConfig+0x195a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b0a      	cmp	r3, #10
 8006fb4:	d007      	beq.n	8006fc6 <UART_SetConfig+0x1956>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	2b0b      	cmp	r3, #11
 8006fbc:	d101      	bne.n	8006fc2 <UART_SetConfig+0x1952>
 8006fbe:	4b3f      	ldr	r3, [pc, #252]	; (80070bc <UART_SetConfig+0x1a4c>)
 8006fc0:	e016      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fc2:	4b3f      	ldr	r3, [pc, #252]	; (80070c0 <UART_SetConfig+0x1a50>)
 8006fc4:	e014      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fc6:	4b3f      	ldr	r3, [pc, #252]	; (80070c4 <UART_SetConfig+0x1a54>)
 8006fc8:	e012      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fca:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <UART_SetConfig+0x1a58>)
 8006fcc:	e010      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fce:	4b3f      	ldr	r3, [pc, #252]	; (80070cc <UART_SetConfig+0x1a5c>)
 8006fd0:	e00e      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fd2:	4b3f      	ldr	r3, [pc, #252]	; (80070d0 <UART_SetConfig+0x1a60>)
 8006fd4:	e00c      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fd6:	4b3f      	ldr	r3, [pc, #252]	; (80070d4 <UART_SetConfig+0x1a64>)
 8006fd8:	e00a      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fda:	4b3f      	ldr	r3, [pc, #252]	; (80070d8 <UART_SetConfig+0x1a68>)
 8006fdc:	e008      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fde:	4b3f      	ldr	r3, [pc, #252]	; (80070dc <UART_SetConfig+0x1a6c>)
 8006fe0:	e006      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fe2:	4b3f      	ldr	r3, [pc, #252]	; (80070e0 <UART_SetConfig+0x1a70>)
 8006fe4:	e004      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fe6:	4b3f      	ldr	r3, [pc, #252]	; (80070e4 <UART_SetConfig+0x1a74>)
 8006fe8:	e002      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fea:	4b33      	ldr	r3, [pc, #204]	; (80070b8 <UART_SetConfig+0x1a48>)
 8006fec:	e000      	b.n	8006ff0 <UART_SetConfig+0x1980>
 8006fee:	4b34      	ldr	r3, [pc, #208]	; (80070c0 <UART_SetConfig+0x1a50>)
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6852      	ldr	r2, [r2, #4]
 8006ff4:	0852      	lsrs	r2, r2, #1
 8006ff6:	441a      	add	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	b29b      	uxth	r3, r3
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007004:	e0df      	b.n	80071c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b00      	cmp	r3, #0
 800700c:	d045      	beq.n	800709a <UART_SetConfig+0x1a2a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b01      	cmp	r3, #1
 8007014:	d03f      	beq.n	8007096 <UART_SetConfig+0x1a26>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	2b02      	cmp	r3, #2
 800701c:	d039      	beq.n	8007092 <UART_SetConfig+0x1a22>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	2b03      	cmp	r3, #3
 8007024:	d033      	beq.n	800708e <UART_SetConfig+0x1a1e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702a:	2b04      	cmp	r3, #4
 800702c:	d02d      	beq.n	800708a <UART_SetConfig+0x1a1a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b05      	cmp	r3, #5
 8007034:	d027      	beq.n	8007086 <UART_SetConfig+0x1a16>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	2b06      	cmp	r3, #6
 800703c:	d021      	beq.n	8007082 <UART_SetConfig+0x1a12>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b07      	cmp	r3, #7
 8007044:	d01b      	beq.n	800707e <UART_SetConfig+0x1a0e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	2b08      	cmp	r3, #8
 800704c:	d015      	beq.n	800707a <UART_SetConfig+0x1a0a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	2b09      	cmp	r3, #9
 8007054:	d00f      	beq.n	8007076 <UART_SetConfig+0x1a06>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b0a      	cmp	r3, #10
 800705c:	d008      	beq.n	8007070 <UART_SetConfig+0x1a00>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	2b0b      	cmp	r3, #11
 8007064:	d102      	bne.n	800706c <UART_SetConfig+0x19fc>
 8007066:	f647 2312 	movw	r3, #31250	; 0x7a12
 800706a:	e017      	b.n	800709c <UART_SetConfig+0x1a2c>
 800706c:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <UART_SetConfig+0x1a60>)
 800706e:	e015      	b.n	800709c <UART_SetConfig+0x1a2c>
 8007070:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007074:	e012      	b.n	800709c <UART_SetConfig+0x1a2c>
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <UART_SetConfig+0x1a78>)
 8007078:	e010      	b.n	800709c <UART_SetConfig+0x1a2c>
 800707a:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <UART_SetConfig+0x1a7c>)
 800707c:	e00e      	b.n	800709c <UART_SetConfig+0x1a2c>
 800707e:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <UART_SetConfig+0x1a4c>)
 8007080:	e00c      	b.n	800709c <UART_SetConfig+0x1a2c>
 8007082:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <UART_SetConfig+0x1a80>)
 8007084:	e00a      	b.n	800709c <UART_SetConfig+0x1a2c>
 8007086:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <UART_SetConfig+0x1a84>)
 8007088:	e008      	b.n	800709c <UART_SetConfig+0x1a2c>
 800708a:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <UART_SetConfig+0x1a54>)
 800708c:	e006      	b.n	800709c <UART_SetConfig+0x1a2c>
 800708e:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <UART_SetConfig+0x1a88>)
 8007090:	e004      	b.n	800709c <UART_SetConfig+0x1a2c>
 8007092:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <UART_SetConfig+0x1a58>)
 8007094:	e002      	b.n	800709c <UART_SetConfig+0x1a2c>
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <UART_SetConfig+0x1a5c>)
 8007098:	e000      	b.n	800709c <UART_SetConfig+0x1a2c>
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <UART_SetConfig+0x1a60>)
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6852      	ldr	r2, [r2, #4]
 80070a0:	0852      	lsrs	r2, r2, #1
 80070a2:	441a      	add	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070b0:	e089      	b.n	80071c6 <UART_SetConfig+0x1b56>
 80070b2:	bf00      	nop
 80070b4:	58024400 	.word	0x58024400
 80070b8:	03d09000 	.word	0x03d09000
 80070bc:	0007a120 	.word	0x0007a120
 80070c0:	07a12000 	.word	0x07a12000
 80070c4:	000f4240 	.word	0x000f4240
 80070c8:	001e8480 	.word	0x001e8480
 80070cc:	003d0900 	.word	0x003d0900
 80070d0:	007a1200 	.word	0x007a1200
 80070d4:	00a2c2aa 	.word	0x00a2c2aa
 80070d8:	00c35000 	.word	0x00c35000
 80070dc:	00f42400 	.word	0x00f42400
 80070e0:	01458554 	.word	0x01458554
 80070e4:	01e84800 	.word	0x01e84800
 80070e8:	0001e848 	.word	0x0001e848
 80070ec:	0003d090 	.word	0x0003d090
 80070f0:	000a2c2a 	.word	0x000a2c2a
 80070f4:	000c3500 	.word	0x000c3500
 80070f8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d04f      	beq.n	80071a4 <UART_SetConfig+0x1b34>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b01      	cmp	r3, #1
 800710a:	d048      	beq.n	800719e <UART_SetConfig+0x1b2e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b02      	cmp	r3, #2
 8007112:	d041      	beq.n	8007198 <UART_SetConfig+0x1b28>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b03      	cmp	r3, #3
 800711a:	d03a      	beq.n	8007192 <UART_SetConfig+0x1b22>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b04      	cmp	r3, #4
 8007122:	d033      	beq.n	800718c <UART_SetConfig+0x1b1c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b05      	cmp	r3, #5
 800712a:	d02c      	beq.n	8007186 <UART_SetConfig+0x1b16>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b06      	cmp	r3, #6
 8007132:	d025      	beq.n	8007180 <UART_SetConfig+0x1b10>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	2b07      	cmp	r3, #7
 800713a:	d01e      	beq.n	800717a <UART_SetConfig+0x1b0a>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	2b08      	cmp	r3, #8
 8007142:	d017      	beq.n	8007174 <UART_SetConfig+0x1b04>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	2b09      	cmp	r3, #9
 800714a:	d010      	beq.n	800716e <UART_SetConfig+0x1afe>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	2b0a      	cmp	r3, #10
 8007152:	d009      	beq.n	8007168 <UART_SetConfig+0x1af8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b0b      	cmp	r3, #11
 800715a:	d102      	bne.n	8007162 <UART_SetConfig+0x1af2>
 800715c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007160:	e022      	b.n	80071a8 <UART_SetConfig+0x1b38>
 8007162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007166:	e01f      	b.n	80071a8 <UART_SetConfig+0x1b38>
 8007168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800716c:	e01c      	b.n	80071a8 <UART_SetConfig+0x1b38>
 800716e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007172:	e019      	b.n	80071a8 <UART_SetConfig+0x1b38>
 8007174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007178:	e016      	b.n	80071a8 <UART_SetConfig+0x1b38>
 800717a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800717e:	e013      	b.n	80071a8 <UART_SetConfig+0x1b38>
 8007180:	f241 5354 	movw	r3, #5460	; 0x1554
 8007184:	e010      	b.n	80071a8 <UART_SetConfig+0x1b38>
 8007186:	f641 1398 	movw	r3, #6552	; 0x1998
 800718a:	e00d      	b.n	80071a8 <UART_SetConfig+0x1b38>
 800718c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007190:	e00a      	b.n	80071a8 <UART_SetConfig+0x1b38>
 8007192:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007196:	e007      	b.n	80071a8 <UART_SetConfig+0x1b38>
 8007198:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800719c:	e004      	b.n	80071a8 <UART_SetConfig+0x1b38>
 800719e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a2:	e001      	b.n	80071a8 <UART_SetConfig+0x1b38>
 80071a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6852      	ldr	r2, [r2, #4]
 80071ac:	0852      	lsrs	r2, r2, #1
 80071ae:	441a      	add	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071bc:	e003      	b.n	80071c6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80071c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c8:	2b0f      	cmp	r3, #15
 80071ca:	d916      	bls.n	80071fa <UART_SetConfig+0x1b8a>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d2:	d212      	bcs.n	80071fa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	f023 030f 	bic.w	r3, r3, #15
 80071dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071ec:	4313      	orrs	r3, r2
 80071ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80071f6:	60da      	str	r2, [r3, #12]
 80071f8:	e3a3      	b.n	8007942 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007200:	e39f      	b.n	8007942 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8007202:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	f200 8388 	bhi.w	800791c <UART_SetConfig+0x22ac>
 800720c:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <UART_SetConfig+0x1ba4>)
 800720e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007212:	bf00      	nop
 8007214:	08007319 	.word	0x08007319
 8007218:	080073cf 	.word	0x080073cf
 800721c:	0800791d 	.word	0x0800791d
 8007220:	0800791d 	.word	0x0800791d
 8007224:	08007485 	.word	0x08007485
 8007228:	0800791d 	.word	0x0800791d
 800722c:	0800791d 	.word	0x0800791d
 8007230:	0800791d 	.word	0x0800791d
 8007234:	0800753f 	.word	0x0800753f
 8007238:	0800791d 	.word	0x0800791d
 800723c:	0800791d 	.word	0x0800791d
 8007240:	0800791d 	.word	0x0800791d
 8007244:	0800791d 	.word	0x0800791d
 8007248:	0800791d 	.word	0x0800791d
 800724c:	0800791d 	.word	0x0800791d
 8007250:	0800791d 	.word	0x0800791d
 8007254:	080075f9 	.word	0x080075f9
 8007258:	0800791d 	.word	0x0800791d
 800725c:	0800791d 	.word	0x0800791d
 8007260:	0800791d 	.word	0x0800791d
 8007264:	0800791d 	.word	0x0800791d
 8007268:	0800791d 	.word	0x0800791d
 800726c:	0800791d 	.word	0x0800791d
 8007270:	0800791d 	.word	0x0800791d
 8007274:	0800791d 	.word	0x0800791d
 8007278:	0800791d 	.word	0x0800791d
 800727c:	0800791d 	.word	0x0800791d
 8007280:	0800791d 	.word	0x0800791d
 8007284:	0800791d 	.word	0x0800791d
 8007288:	0800791d 	.word	0x0800791d
 800728c:	0800791d 	.word	0x0800791d
 8007290:	0800791d 	.word	0x0800791d
 8007294:	08007769 	.word	0x08007769
 8007298:	0800791d 	.word	0x0800791d
 800729c:	0800791d 	.word	0x0800791d
 80072a0:	0800791d 	.word	0x0800791d
 80072a4:	0800791d 	.word	0x0800791d
 80072a8:	0800791d 	.word	0x0800791d
 80072ac:	0800791d 	.word	0x0800791d
 80072b0:	0800791d 	.word	0x0800791d
 80072b4:	0800791d 	.word	0x0800791d
 80072b8:	0800791d 	.word	0x0800791d
 80072bc:	0800791d 	.word	0x0800791d
 80072c0:	0800791d 	.word	0x0800791d
 80072c4:	0800791d 	.word	0x0800791d
 80072c8:	0800791d 	.word	0x0800791d
 80072cc:	0800791d 	.word	0x0800791d
 80072d0:	0800791d 	.word	0x0800791d
 80072d4:	0800791d 	.word	0x0800791d
 80072d8:	0800791d 	.word	0x0800791d
 80072dc:	0800791d 	.word	0x0800791d
 80072e0:	0800791d 	.word	0x0800791d
 80072e4:	0800791d 	.word	0x0800791d
 80072e8:	0800791d 	.word	0x0800791d
 80072ec:	0800791d 	.word	0x0800791d
 80072f0:	0800791d 	.word	0x0800791d
 80072f4:	0800791d 	.word	0x0800791d
 80072f8:	0800791d 	.word	0x0800791d
 80072fc:	0800791d 	.word	0x0800791d
 8007300:	0800791d 	.word	0x0800791d
 8007304:	0800791d 	.word	0x0800791d
 8007308:	0800791d 	.word	0x0800791d
 800730c:	0800791d 	.word	0x0800791d
 8007310:	0800791d 	.word	0x0800791d
 8007314:	0800785d 	.word	0x0800785d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007318:	f7fb f9cc 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 800731c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d044      	beq.n	80073b0 <UART_SetConfig+0x1d40>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b01      	cmp	r3, #1
 800732c:	d03e      	beq.n	80073ac <UART_SetConfig+0x1d3c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b02      	cmp	r3, #2
 8007334:	d038      	beq.n	80073a8 <UART_SetConfig+0x1d38>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b03      	cmp	r3, #3
 800733c:	d032      	beq.n	80073a4 <UART_SetConfig+0x1d34>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b04      	cmp	r3, #4
 8007344:	d02c      	beq.n	80073a0 <UART_SetConfig+0x1d30>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b05      	cmp	r3, #5
 800734c:	d026      	beq.n	800739c <UART_SetConfig+0x1d2c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b06      	cmp	r3, #6
 8007354:	d020      	beq.n	8007398 <UART_SetConfig+0x1d28>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2b07      	cmp	r3, #7
 800735c:	d01a      	beq.n	8007394 <UART_SetConfig+0x1d24>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b08      	cmp	r3, #8
 8007364:	d014      	beq.n	8007390 <UART_SetConfig+0x1d20>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	2b09      	cmp	r3, #9
 800736c:	d00e      	beq.n	800738c <UART_SetConfig+0x1d1c>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	2b0a      	cmp	r3, #10
 8007374:	d008      	beq.n	8007388 <UART_SetConfig+0x1d18>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	2b0b      	cmp	r3, #11
 800737c:	d102      	bne.n	8007384 <UART_SetConfig+0x1d14>
 800737e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007382:	e016      	b.n	80073b2 <UART_SetConfig+0x1d42>
 8007384:	2301      	movs	r3, #1
 8007386:	e014      	b.n	80073b2 <UART_SetConfig+0x1d42>
 8007388:	2380      	movs	r3, #128	; 0x80
 800738a:	e012      	b.n	80073b2 <UART_SetConfig+0x1d42>
 800738c:	2340      	movs	r3, #64	; 0x40
 800738e:	e010      	b.n	80073b2 <UART_SetConfig+0x1d42>
 8007390:	2320      	movs	r3, #32
 8007392:	e00e      	b.n	80073b2 <UART_SetConfig+0x1d42>
 8007394:	2310      	movs	r3, #16
 8007396:	e00c      	b.n	80073b2 <UART_SetConfig+0x1d42>
 8007398:	230c      	movs	r3, #12
 800739a:	e00a      	b.n	80073b2 <UART_SetConfig+0x1d42>
 800739c:	230a      	movs	r3, #10
 800739e:	e008      	b.n	80073b2 <UART_SetConfig+0x1d42>
 80073a0:	2308      	movs	r3, #8
 80073a2:	e006      	b.n	80073b2 <UART_SetConfig+0x1d42>
 80073a4:	2306      	movs	r3, #6
 80073a6:	e004      	b.n	80073b2 <UART_SetConfig+0x1d42>
 80073a8:	2304      	movs	r3, #4
 80073aa:	e002      	b.n	80073b2 <UART_SetConfig+0x1d42>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e000      	b.n	80073b2 <UART_SetConfig+0x1d42>
 80073b0:	2301      	movs	r3, #1
 80073b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	441a      	add	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073cc:	e2aa      	b.n	8007924 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ce:	f7fb f987 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 80073d2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d044      	beq.n	8007466 <UART_SetConfig+0x1df6>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d03e      	beq.n	8007462 <UART_SetConfig+0x1df2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d038      	beq.n	800745e <UART_SetConfig+0x1dee>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d032      	beq.n	800745a <UART_SetConfig+0x1dea>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d02c      	beq.n	8007456 <UART_SetConfig+0x1de6>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b05      	cmp	r3, #5
 8007402:	d026      	beq.n	8007452 <UART_SetConfig+0x1de2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b06      	cmp	r3, #6
 800740a:	d020      	beq.n	800744e <UART_SetConfig+0x1dde>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	2b07      	cmp	r3, #7
 8007412:	d01a      	beq.n	800744a <UART_SetConfig+0x1dda>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	2b08      	cmp	r3, #8
 800741a:	d014      	beq.n	8007446 <UART_SetConfig+0x1dd6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b09      	cmp	r3, #9
 8007422:	d00e      	beq.n	8007442 <UART_SetConfig+0x1dd2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	2b0a      	cmp	r3, #10
 800742a:	d008      	beq.n	800743e <UART_SetConfig+0x1dce>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b0b      	cmp	r3, #11
 8007432:	d102      	bne.n	800743a <UART_SetConfig+0x1dca>
 8007434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007438:	e016      	b.n	8007468 <UART_SetConfig+0x1df8>
 800743a:	2301      	movs	r3, #1
 800743c:	e014      	b.n	8007468 <UART_SetConfig+0x1df8>
 800743e:	2380      	movs	r3, #128	; 0x80
 8007440:	e012      	b.n	8007468 <UART_SetConfig+0x1df8>
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	e010      	b.n	8007468 <UART_SetConfig+0x1df8>
 8007446:	2320      	movs	r3, #32
 8007448:	e00e      	b.n	8007468 <UART_SetConfig+0x1df8>
 800744a:	2310      	movs	r3, #16
 800744c:	e00c      	b.n	8007468 <UART_SetConfig+0x1df8>
 800744e:	230c      	movs	r3, #12
 8007450:	e00a      	b.n	8007468 <UART_SetConfig+0x1df8>
 8007452:	230a      	movs	r3, #10
 8007454:	e008      	b.n	8007468 <UART_SetConfig+0x1df8>
 8007456:	2308      	movs	r3, #8
 8007458:	e006      	b.n	8007468 <UART_SetConfig+0x1df8>
 800745a:	2306      	movs	r3, #6
 800745c:	e004      	b.n	8007468 <UART_SetConfig+0x1df8>
 800745e:	2304      	movs	r3, #4
 8007460:	e002      	b.n	8007468 <UART_SetConfig+0x1df8>
 8007462:	2302      	movs	r3, #2
 8007464:	e000      	b.n	8007468 <UART_SetConfig+0x1df8>
 8007466:	2301      	movs	r3, #1
 8007468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800746a:	fbb2 f2f3 	udiv	r2, r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	fbb2 f3f3 	udiv	r3, r2, r3
 800747e:	b29b      	uxth	r3, r3
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007482:	e24f      	b.n	8007924 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007484:	f107 0318 	add.w	r3, r7, #24
 8007488:	4618      	mov	r0, r3
 800748a:	f7fc f845 	bl	8003518 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d044      	beq.n	8007522 <UART_SetConfig+0x1eb2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b01      	cmp	r3, #1
 800749e:	d03e      	beq.n	800751e <UART_SetConfig+0x1eae>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d038      	beq.n	800751a <UART_SetConfig+0x1eaa>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d032      	beq.n	8007516 <UART_SetConfig+0x1ea6>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d02c      	beq.n	8007512 <UART_SetConfig+0x1ea2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b05      	cmp	r3, #5
 80074be:	d026      	beq.n	800750e <UART_SetConfig+0x1e9e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d020      	beq.n	800750a <UART_SetConfig+0x1e9a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b07      	cmp	r3, #7
 80074ce:	d01a      	beq.n	8007506 <UART_SetConfig+0x1e96>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d014      	beq.n	8007502 <UART_SetConfig+0x1e92>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b09      	cmp	r3, #9
 80074de:	d00e      	beq.n	80074fe <UART_SetConfig+0x1e8e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b0a      	cmp	r3, #10
 80074e6:	d008      	beq.n	80074fa <UART_SetConfig+0x1e8a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b0b      	cmp	r3, #11
 80074ee:	d102      	bne.n	80074f6 <UART_SetConfig+0x1e86>
 80074f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074f4:	e016      	b.n	8007524 <UART_SetConfig+0x1eb4>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e014      	b.n	8007524 <UART_SetConfig+0x1eb4>
 80074fa:	2380      	movs	r3, #128	; 0x80
 80074fc:	e012      	b.n	8007524 <UART_SetConfig+0x1eb4>
 80074fe:	2340      	movs	r3, #64	; 0x40
 8007500:	e010      	b.n	8007524 <UART_SetConfig+0x1eb4>
 8007502:	2320      	movs	r3, #32
 8007504:	e00e      	b.n	8007524 <UART_SetConfig+0x1eb4>
 8007506:	2310      	movs	r3, #16
 8007508:	e00c      	b.n	8007524 <UART_SetConfig+0x1eb4>
 800750a:	230c      	movs	r3, #12
 800750c:	e00a      	b.n	8007524 <UART_SetConfig+0x1eb4>
 800750e:	230a      	movs	r3, #10
 8007510:	e008      	b.n	8007524 <UART_SetConfig+0x1eb4>
 8007512:	2308      	movs	r3, #8
 8007514:	e006      	b.n	8007524 <UART_SetConfig+0x1eb4>
 8007516:	2306      	movs	r3, #6
 8007518:	e004      	b.n	8007524 <UART_SetConfig+0x1eb4>
 800751a:	2304      	movs	r3, #4
 800751c:	e002      	b.n	8007524 <UART_SetConfig+0x1eb4>
 800751e:	2302      	movs	r3, #2
 8007520:	e000      	b.n	8007524 <UART_SetConfig+0x1eb4>
 8007522:	2301      	movs	r3, #1
 8007524:	fbb2 f2f3 	udiv	r2, r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	085b      	lsrs	r3, r3, #1
 800752e:	441a      	add	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	fbb2 f3f3 	udiv	r3, r2, r3
 8007538:	b29b      	uxth	r3, r3
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800753c:	e1f2      	b.n	8007924 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800753e:	f107 030c 	add.w	r3, r7, #12
 8007542:	4618      	mov	r0, r3
 8007544:	f7fc f934 	bl	80037b0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d044      	beq.n	80075dc <UART_SetConfig+0x1f6c>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2b01      	cmp	r3, #1
 8007558:	d03e      	beq.n	80075d8 <UART_SetConfig+0x1f68>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	2b02      	cmp	r3, #2
 8007560:	d038      	beq.n	80075d4 <UART_SetConfig+0x1f64>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b03      	cmp	r3, #3
 8007568:	d032      	beq.n	80075d0 <UART_SetConfig+0x1f60>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2b04      	cmp	r3, #4
 8007570:	d02c      	beq.n	80075cc <UART_SetConfig+0x1f5c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b05      	cmp	r3, #5
 8007578:	d026      	beq.n	80075c8 <UART_SetConfig+0x1f58>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b06      	cmp	r3, #6
 8007580:	d020      	beq.n	80075c4 <UART_SetConfig+0x1f54>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b07      	cmp	r3, #7
 8007588:	d01a      	beq.n	80075c0 <UART_SetConfig+0x1f50>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b08      	cmp	r3, #8
 8007590:	d014      	beq.n	80075bc <UART_SetConfig+0x1f4c>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	2b09      	cmp	r3, #9
 8007598:	d00e      	beq.n	80075b8 <UART_SetConfig+0x1f48>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	2b0a      	cmp	r3, #10
 80075a0:	d008      	beq.n	80075b4 <UART_SetConfig+0x1f44>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b0b      	cmp	r3, #11
 80075a8:	d102      	bne.n	80075b0 <UART_SetConfig+0x1f40>
 80075aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ae:	e016      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e014      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075b4:	2380      	movs	r3, #128	; 0x80
 80075b6:	e012      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075b8:	2340      	movs	r3, #64	; 0x40
 80075ba:	e010      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075bc:	2320      	movs	r3, #32
 80075be:	e00e      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075c0:	2310      	movs	r3, #16
 80075c2:	e00c      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075c4:	230c      	movs	r3, #12
 80075c6:	e00a      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075c8:	230a      	movs	r3, #10
 80075ca:	e008      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075cc:	2308      	movs	r3, #8
 80075ce:	e006      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075d0:	2306      	movs	r3, #6
 80075d2:	e004      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075d4:	2304      	movs	r3, #4
 80075d6:	e002      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075d8:	2302      	movs	r3, #2
 80075da:	e000      	b.n	80075de <UART_SetConfig+0x1f6e>
 80075dc:	2301      	movs	r3, #1
 80075de:	fbb2 f2f3 	udiv	r2, r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	085b      	lsrs	r3, r3, #1
 80075e8:	441a      	add	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075f6:	e195      	b.n	8007924 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075f8:	4b87      	ldr	r3, [pc, #540]	; (8007818 <UART_SetConfig+0x21a8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d05d      	beq.n	80076c0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007604:	4b84      	ldr	r3, [pc, #528]	; (8007818 <UART_SetConfig+0x21a8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	08db      	lsrs	r3, r3, #3
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	4a83      	ldr	r2, [pc, #524]	; (800781c <UART_SetConfig+0x21ac>)
 8007610:	40da      	lsrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d044      	beq.n	80076a4 <UART_SetConfig+0x2034>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	2b01      	cmp	r3, #1
 8007620:	d03e      	beq.n	80076a0 <UART_SetConfig+0x2030>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	2b02      	cmp	r3, #2
 8007628:	d038      	beq.n	800769c <UART_SetConfig+0x202c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	2b03      	cmp	r3, #3
 8007630:	d032      	beq.n	8007698 <UART_SetConfig+0x2028>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	2b04      	cmp	r3, #4
 8007638:	d02c      	beq.n	8007694 <UART_SetConfig+0x2024>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2b05      	cmp	r3, #5
 8007640:	d026      	beq.n	8007690 <UART_SetConfig+0x2020>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	2b06      	cmp	r3, #6
 8007648:	d020      	beq.n	800768c <UART_SetConfig+0x201c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	2b07      	cmp	r3, #7
 8007650:	d01a      	beq.n	8007688 <UART_SetConfig+0x2018>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	2b08      	cmp	r3, #8
 8007658:	d014      	beq.n	8007684 <UART_SetConfig+0x2014>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b09      	cmp	r3, #9
 8007660:	d00e      	beq.n	8007680 <UART_SetConfig+0x2010>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	2b0a      	cmp	r3, #10
 8007668:	d008      	beq.n	800767c <UART_SetConfig+0x200c>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b0b      	cmp	r3, #11
 8007670:	d102      	bne.n	8007678 <UART_SetConfig+0x2008>
 8007672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007676:	e016      	b.n	80076a6 <UART_SetConfig+0x2036>
 8007678:	2301      	movs	r3, #1
 800767a:	e014      	b.n	80076a6 <UART_SetConfig+0x2036>
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	e012      	b.n	80076a6 <UART_SetConfig+0x2036>
 8007680:	2340      	movs	r3, #64	; 0x40
 8007682:	e010      	b.n	80076a6 <UART_SetConfig+0x2036>
 8007684:	2320      	movs	r3, #32
 8007686:	e00e      	b.n	80076a6 <UART_SetConfig+0x2036>
 8007688:	2310      	movs	r3, #16
 800768a:	e00c      	b.n	80076a6 <UART_SetConfig+0x2036>
 800768c:	230c      	movs	r3, #12
 800768e:	e00a      	b.n	80076a6 <UART_SetConfig+0x2036>
 8007690:	230a      	movs	r3, #10
 8007692:	e008      	b.n	80076a6 <UART_SetConfig+0x2036>
 8007694:	2308      	movs	r3, #8
 8007696:	e006      	b.n	80076a6 <UART_SetConfig+0x2036>
 8007698:	2306      	movs	r3, #6
 800769a:	e004      	b.n	80076a6 <UART_SetConfig+0x2036>
 800769c:	2304      	movs	r3, #4
 800769e:	e002      	b.n	80076a6 <UART_SetConfig+0x2036>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e000      	b.n	80076a6 <UART_SetConfig+0x2036>
 80076a4:	2301      	movs	r3, #1
 80076a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	441a      	add	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80076be:	e131      	b.n	8007924 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d043      	beq.n	8007750 <UART_SetConfig+0x20e0>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d03d      	beq.n	800774c <UART_SetConfig+0x20dc>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d037      	beq.n	8007748 <UART_SetConfig+0x20d8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d031      	beq.n	8007744 <UART_SetConfig+0x20d4>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d02b      	beq.n	8007740 <UART_SetConfig+0x20d0>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	d025      	beq.n	800773c <UART_SetConfig+0x20cc>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2b06      	cmp	r3, #6
 80076f6:	d01f      	beq.n	8007738 <UART_SetConfig+0x20c8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	2b07      	cmp	r3, #7
 80076fe:	d019      	beq.n	8007734 <UART_SetConfig+0x20c4>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	2b08      	cmp	r3, #8
 8007706:	d013      	beq.n	8007730 <UART_SetConfig+0x20c0>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2b09      	cmp	r3, #9
 800770e:	d00d      	beq.n	800772c <UART_SetConfig+0x20bc>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	2b0a      	cmp	r3, #10
 8007716:	d007      	beq.n	8007728 <UART_SetConfig+0x20b8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2b0b      	cmp	r3, #11
 800771e:	d101      	bne.n	8007724 <UART_SetConfig+0x20b4>
 8007720:	4b3f      	ldr	r3, [pc, #252]	; (8007820 <UART_SetConfig+0x21b0>)
 8007722:	e016      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007724:	4b3d      	ldr	r3, [pc, #244]	; (800781c <UART_SetConfig+0x21ac>)
 8007726:	e014      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007728:	4b3e      	ldr	r3, [pc, #248]	; (8007824 <UART_SetConfig+0x21b4>)
 800772a:	e012      	b.n	8007752 <UART_SetConfig+0x20e2>
 800772c:	4b3e      	ldr	r3, [pc, #248]	; (8007828 <UART_SetConfig+0x21b8>)
 800772e:	e010      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007730:	4b3e      	ldr	r3, [pc, #248]	; (800782c <UART_SetConfig+0x21bc>)
 8007732:	e00e      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007734:	4b3e      	ldr	r3, [pc, #248]	; (8007830 <UART_SetConfig+0x21c0>)
 8007736:	e00c      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007738:	4b3e      	ldr	r3, [pc, #248]	; (8007834 <UART_SetConfig+0x21c4>)
 800773a:	e00a      	b.n	8007752 <UART_SetConfig+0x20e2>
 800773c:	4b3e      	ldr	r3, [pc, #248]	; (8007838 <UART_SetConfig+0x21c8>)
 800773e:	e008      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007740:	4b3e      	ldr	r3, [pc, #248]	; (800783c <UART_SetConfig+0x21cc>)
 8007742:	e006      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007744:	4b3e      	ldr	r3, [pc, #248]	; (8007840 <UART_SetConfig+0x21d0>)
 8007746:	e004      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007748:	4b3e      	ldr	r3, [pc, #248]	; (8007844 <UART_SetConfig+0x21d4>)
 800774a:	e002      	b.n	8007752 <UART_SetConfig+0x20e2>
 800774c:	4b3e      	ldr	r3, [pc, #248]	; (8007848 <UART_SetConfig+0x21d8>)
 800774e:	e000      	b.n	8007752 <UART_SetConfig+0x20e2>
 8007750:	4b32      	ldr	r3, [pc, #200]	; (800781c <UART_SetConfig+0x21ac>)
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6852      	ldr	r2, [r2, #4]
 8007756:	0852      	lsrs	r2, r2, #1
 8007758:	441a      	add	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	b29b      	uxth	r3, r3
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007766:	e0dd      	b.n	8007924 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d046      	beq.n	80077fe <UART_SetConfig+0x218e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2b01      	cmp	r3, #1
 8007776:	d040      	beq.n	80077fa <UART_SetConfig+0x218a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b02      	cmp	r3, #2
 800777e:	d03a      	beq.n	80077f6 <UART_SetConfig+0x2186>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	2b03      	cmp	r3, #3
 8007786:	d034      	beq.n	80077f2 <UART_SetConfig+0x2182>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	2b04      	cmp	r3, #4
 800778e:	d02e      	beq.n	80077ee <UART_SetConfig+0x217e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b05      	cmp	r3, #5
 8007796:	d028      	beq.n	80077ea <UART_SetConfig+0x217a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	2b06      	cmp	r3, #6
 800779e:	d022      	beq.n	80077e6 <UART_SetConfig+0x2176>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b07      	cmp	r3, #7
 80077a6:	d01c      	beq.n	80077e2 <UART_SetConfig+0x2172>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d016      	beq.n	80077de <UART_SetConfig+0x216e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	2b09      	cmp	r3, #9
 80077b6:	d00f      	beq.n	80077d8 <UART_SetConfig+0x2168>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	2b0a      	cmp	r3, #10
 80077be:	d008      	beq.n	80077d2 <UART_SetConfig+0x2162>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	2b0b      	cmp	r3, #11
 80077c6:	d102      	bne.n	80077ce <UART_SetConfig+0x215e>
 80077c8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80077cc:	e018      	b.n	8007800 <UART_SetConfig+0x2190>
 80077ce:	4b18      	ldr	r3, [pc, #96]	; (8007830 <UART_SetConfig+0x21c0>)
 80077d0:	e016      	b.n	8007800 <UART_SetConfig+0x2190>
 80077d2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80077d6:	e013      	b.n	8007800 <UART_SetConfig+0x2190>
 80077d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80077dc:	e010      	b.n	8007800 <UART_SetConfig+0x2190>
 80077de:	4b1b      	ldr	r3, [pc, #108]	; (800784c <UART_SetConfig+0x21dc>)
 80077e0:	e00e      	b.n	8007800 <UART_SetConfig+0x2190>
 80077e2:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <UART_SetConfig+0x21b0>)
 80077e4:	e00c      	b.n	8007800 <UART_SetConfig+0x2190>
 80077e6:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <UART_SetConfig+0x21e0>)
 80077e8:	e00a      	b.n	8007800 <UART_SetConfig+0x2190>
 80077ea:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <UART_SetConfig+0x21e4>)
 80077ec:	e008      	b.n	8007800 <UART_SetConfig+0x2190>
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <UART_SetConfig+0x21b4>)
 80077f0:	e006      	b.n	8007800 <UART_SetConfig+0x2190>
 80077f2:	4b19      	ldr	r3, [pc, #100]	; (8007858 <UART_SetConfig+0x21e8>)
 80077f4:	e004      	b.n	8007800 <UART_SetConfig+0x2190>
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <UART_SetConfig+0x21b8>)
 80077f8:	e002      	b.n	8007800 <UART_SetConfig+0x2190>
 80077fa:	4b0c      	ldr	r3, [pc, #48]	; (800782c <UART_SetConfig+0x21bc>)
 80077fc:	e000      	b.n	8007800 <UART_SetConfig+0x2190>
 80077fe:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <UART_SetConfig+0x21c0>)
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6852      	ldr	r2, [r2, #4]
 8007804:	0852      	lsrs	r2, r2, #1
 8007806:	441a      	add	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	b29b      	uxth	r3, r3
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007814:	e086      	b.n	8007924 <UART_SetConfig+0x22b4>
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
 800781c:	03d09000 	.word	0x03d09000
 8007820:	0003d090 	.word	0x0003d090
 8007824:	0007a120 	.word	0x0007a120
 8007828:	000f4240 	.word	0x000f4240
 800782c:	001e8480 	.word	0x001e8480
 8007830:	003d0900 	.word	0x003d0900
 8007834:	00516155 	.word	0x00516155
 8007838:	0061a800 	.word	0x0061a800
 800783c:	007a1200 	.word	0x007a1200
 8007840:	00a2c2aa 	.word	0x00a2c2aa
 8007844:	00f42400 	.word	0x00f42400
 8007848:	01e84800 	.word	0x01e84800
 800784c:	0001e848 	.word	0x0001e848
 8007850:	00051615 	.word	0x00051615
 8007854:	00061a80 	.word	0x00061a80
 8007858:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d04e      	beq.n	8007902 <UART_SetConfig+0x2292>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2b01      	cmp	r3, #1
 800786a:	d047      	beq.n	80078fc <UART_SetConfig+0x228c>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	2b02      	cmp	r3, #2
 8007872:	d040      	beq.n	80078f6 <UART_SetConfig+0x2286>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b03      	cmp	r3, #3
 800787a:	d039      	beq.n	80078f0 <UART_SetConfig+0x2280>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	2b04      	cmp	r3, #4
 8007882:	d032      	beq.n	80078ea <UART_SetConfig+0x227a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	2b05      	cmp	r3, #5
 800788a:	d02b      	beq.n	80078e4 <UART_SetConfig+0x2274>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	2b06      	cmp	r3, #6
 8007892:	d024      	beq.n	80078de <UART_SetConfig+0x226e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b07      	cmp	r3, #7
 800789a:	d01d      	beq.n	80078d8 <UART_SetConfig+0x2268>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d016      	beq.n	80078d2 <UART_SetConfig+0x2262>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d00f      	beq.n	80078cc <UART_SetConfig+0x225c>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b0a      	cmp	r3, #10
 80078b2:	d008      	beq.n	80078c6 <UART_SetConfig+0x2256>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b0b      	cmp	r3, #11
 80078ba:	d101      	bne.n	80078c0 <UART_SetConfig+0x2250>
 80078bc:	2380      	movs	r3, #128	; 0x80
 80078be:	e022      	b.n	8007906 <UART_SetConfig+0x2296>
 80078c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c4:	e01f      	b.n	8007906 <UART_SetConfig+0x2296>
 80078c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ca:	e01c      	b.n	8007906 <UART_SetConfig+0x2296>
 80078cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078d0:	e019      	b.n	8007906 <UART_SetConfig+0x2296>
 80078d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d6:	e016      	b.n	8007906 <UART_SetConfig+0x2296>
 80078d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078dc:	e013      	b.n	8007906 <UART_SetConfig+0x2296>
 80078de:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80078e2:	e010      	b.n	8007906 <UART_SetConfig+0x2296>
 80078e4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80078e8:	e00d      	b.n	8007906 <UART_SetConfig+0x2296>
 80078ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078ee:	e00a      	b.n	8007906 <UART_SetConfig+0x2296>
 80078f0:	f241 5355 	movw	r3, #5461	; 0x1555
 80078f4:	e007      	b.n	8007906 <UART_SetConfig+0x2296>
 80078f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078fa:	e004      	b.n	8007906 <UART_SetConfig+0x2296>
 80078fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007900:	e001      	b.n	8007906 <UART_SetConfig+0x2296>
 8007902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6852      	ldr	r2, [r2, #4]
 800790a:	0852      	lsrs	r2, r2, #1
 800790c:	441a      	add	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	fbb2 f3f3 	udiv	r3, r2, r3
 8007916:	b29b      	uxth	r3, r3
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800791a:	e003      	b.n	8007924 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007922:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	2b0f      	cmp	r3, #15
 8007928:	d908      	bls.n	800793c <UART_SetConfig+0x22cc>
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007930:	d204      	bcs.n	800793c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007938:	60da      	str	r2, [r3, #12]
 800793a:	e002      	b.n	8007942 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800795e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8007962:	4618      	mov	r0, r3
 8007964:	3740      	adds	r7, #64	; 0x40
 8007966:	46bd      	mov	sp, r7
 8007968:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800796c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	f003 0308 	and.w	r3, r3, #8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01a      	beq.n	8007a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6a:	d10a      	bne.n	8007a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	605a      	str	r2, [r3, #4]
  }
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007ac0:	f7f8 fe0c 	bl	80006dc <HAL_GetTick>
 8007ac4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0308 	and.w	r3, r3, #8
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d10e      	bne.n	8007af2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f82c 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e022      	b.n	8007b38 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d10e      	bne.n	8007b1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f816 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e00c      	b.n	8007b38 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b50:	e062      	b.n	8007c18 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d05e      	beq.n	8007c18 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7f8 fdbf 	bl	80006dc <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d11d      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b7e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e045      	b.n	8007c38 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d02e      	beq.n	8007c18 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc8:	d126      	bne.n	8007c18 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bd2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007be2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0201 	bic.w	r2, r2, #1
 8007bf2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e00f      	b.n	8007c38 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69da      	ldr	r2, [r3, #28]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	4013      	ands	r3, r2
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	bf0c      	ite	eq
 8007c28:	2301      	moveq	r3, #1
 8007c2a:	2300      	movne	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d08d      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e027      	b.n	8007ca6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2224      	movs	r2, #36	; 0x24
 8007c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e02d      	b.n	8007d26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2224      	movs	r2, #36	; 0x24
 8007cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0201 	bic.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f850 	bl	8007dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e02d      	b.n	8007da2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2224      	movs	r2, #36	; 0x24
 8007d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0201 	bic.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f812 	bl	8007dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b089      	sub	sp, #36	; 0x24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007db4:	4a2f      	ldr	r2, [pc, #188]	; (8007e74 <UARTEx_SetNbDataToProcess+0xc8>)
 8007db6:	f107 0314 	add.w	r3, r7, #20
 8007dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dbe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007dc2:	4a2d      	ldr	r2, [pc, #180]	; (8007e78 <UARTEx_SetNbDataToProcess+0xcc>)
 8007dc4:	f107 030c 	add.w	r3, r7, #12
 8007dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dcc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d108      	bne.n	8007dea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007de8:	e03d      	b.n	8007e66 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dea:	2308      	movs	r3, #8
 8007dec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dee:	2308      	movs	r3, #8
 8007df0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	0e5b      	lsrs	r3, r3, #25
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	0f5b      	lsrs	r3, r3, #29
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007e12:	7fbb      	ldrb	r3, [r7, #30]
 8007e14:	7f3a      	ldrb	r2, [r7, #28]
 8007e16:	f107 0120 	add.w	r1, r7, #32
 8007e1a:	440a      	add	r2, r1
 8007e1c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007e20:	fb02 f303 	mul.w	r3, r2, r3
 8007e24:	7f3a      	ldrb	r2, [r7, #28]
 8007e26:	f107 0120 	add.w	r1, r7, #32
 8007e2a:	440a      	add	r2, r1
 8007e2c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007e30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007e3c:	7ffb      	ldrb	r3, [r7, #31]
 8007e3e:	7f7a      	ldrb	r2, [r7, #29]
 8007e40:	f107 0120 	add.w	r1, r7, #32
 8007e44:	440a      	add	r2, r1
 8007e46:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	7f7a      	ldrb	r2, [r7, #29]
 8007e50:	f107 0120 	add.w	r1, r7, #32
 8007e54:	440a      	add	r2, r1
 8007e56:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e66:	bf00      	nop
 8007e68:	3724      	adds	r7, #36	; 0x24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	08009994 	.word	0x08009994
 8007e78:	0800999c 	.word	0x0800999c

08007e7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	f107 001c 	add.w	r0, r7, #28
 8007e8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d120      	bne.n	8007ed6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <USB_CoreInit+0xc0>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d105      	bne.n	8007eca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa5a 	bl	8008384 <USB_CoreReset>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
 8007ed4:	e01a      	b.n	8007f0c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa4e 	bl	8008384 <USB_CoreReset>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	639a      	str	r2, [r3, #56]	; 0x38
 8007efe:	e005      	b.n	8007f0c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d10b      	bne.n	8007f2a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f043 0208 	orr.w	r2, r3, #8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f043 0220 	orr.w	r2, r3, #32
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f36:	b004      	add	sp, #16
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	ffbdffbf 	.word	0xffbdffbf

08007f40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f023 0201 	bic.w	r2, r3, #1
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d106      	bne.n	8007f8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60da      	str	r2, [r3, #12]
 8007f8c:	e00b      	b.n	8007fa6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60da      	str	r2, [r3, #12]
 8007fa0:	e001      	b.n	8007fa6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e003      	b.n	8007fae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007fa6:	2032      	movs	r0, #50	; 0x32
 8007fa8:	f7f8 fba4 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fb8:	b084      	sub	sp, #16
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	e009      	b.n	8007fec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3340      	adds	r3, #64	; 0x40
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b0e      	cmp	r3, #14
 8007ff0:	d9f2      	bls.n	8007fd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d112      	bne.n	800801e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e005      	b.n	800802a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008022:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008030:	461a      	mov	r2, r3
 8008032:	2300      	movs	r3, #0
 8008034:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803c:	4619      	mov	r1, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008044:	461a      	mov	r2, r3
 8008046:	680b      	ldr	r3, [r1, #0]
 8008048:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	2b01      	cmp	r3, #1
 800804e:	d10c      	bne.n	800806a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d104      	bne.n	8008060 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008056:	2100      	movs	r1, #0
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f961 	bl	8008320 <USB_SetDevSpeed>
 800805e:	e008      	b.n	8008072 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008060:	2101      	movs	r1, #1
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f95c 	bl	8008320 <USB_SetDevSpeed>
 8008068:	e003      	b.n	8008072 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800806a:	2103      	movs	r1, #3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f957 	bl	8008320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008072:	2110      	movs	r1, #16
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f90b 	bl	8008290 <USB_FlushTxFifo>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f929 	bl	80082dc <USB_FlushRxFifo>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800809a:	461a      	mov	r2, r3
 800809c:	2300      	movs	r3, #0
 800809e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a6:	461a      	mov	r2, r3
 80080a8:	2300      	movs	r3, #0
 80080aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b2:	461a      	mov	r2, r3
 80080b4:	2300      	movs	r3, #0
 80080b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080b8:	2300      	movs	r3, #0
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	e043      	b.n	8008146 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d4:	d118      	bne.n	8008108 <USB_DevInit+0x150>
    {
      if (i == 0U)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e8:	461a      	mov	r2, r3
 80080ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	e013      	b.n	800811a <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	015a      	lsls	r2, r3, #5
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fe:	461a      	mov	r2, r3
 8008100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	e008      	b.n	800811a <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008114:	461a      	mov	r2, r3
 8008116:	2300      	movs	r3, #0
 8008118:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008126:	461a      	mov	r2, r3
 8008128:	2300      	movs	r3, #0
 800812a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008138:	461a      	mov	r2, r3
 800813a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800813e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	3301      	adds	r3, #1
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	429a      	cmp	r2, r3
 800814c:	d3b7      	bcc.n	80080be <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800814e:	2300      	movs	r3, #0
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	e043      	b.n	80081dc <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800816a:	d118      	bne.n	800819e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	461a      	mov	r2, r3
 8008180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	e013      	b.n	80081b0 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	461a      	mov	r2, r3
 8008196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	e008      	b.n	80081b0 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081aa:	461a      	mov	r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081bc:	461a      	mov	r2, r3
 80081be:	2300      	movs	r3, #0
 80081c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ce:	461a      	mov	r2, r3
 80081d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	3301      	adds	r3, #1
 80081da:	613b      	str	r3, [r7, #16]
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d3b7      	bcc.n	8008154 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081f6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d110      	bne.n	8008220 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	461a      	mov	r2, r3
 8008206:	4b1e      	ldr	r3, [pc, #120]	; (8008280 <USB_DevInit+0x2c8>)
 8008208:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008218:	4619      	mov	r1, r3
 800821a:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <USB_DevInit+0x2cc>)
 800821c:	4313      	orrs	r3, r2
 800821e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800822c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	2b00      	cmp	r3, #0
 8008232:	d105      	bne.n	8008240 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	f043 0210 	orr.w	r2, r3, #16
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699a      	ldr	r2, [r3, #24]
 8008244:	4b10      	ldr	r3, [pc, #64]	; (8008288 <USB_DevInit+0x2d0>)
 8008246:	4313      	orrs	r3, r2
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800824c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f043 0208 	orr.w	r2, r3, #8
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800825e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008260:	2b01      	cmp	r3, #1
 8008262:	d105      	bne.n	8008270 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699a      	ldr	r2, [r3, #24]
 8008268:	4b08      	ldr	r3, [pc, #32]	; (800828c <USB_DevInit+0x2d4>)
 800826a:	4313      	orrs	r3, r2
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800827c:	b004      	add	sp, #16
 800827e:	4770      	bx	lr
 8008280:	00800100 	.word	0x00800100
 8008284:	00010003 	.word	0x00010003
 8008288:	803c3800 	.word	0x803c3800
 800828c:	40000004 	.word	0x40000004

08008290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	019b      	lsls	r3, r3, #6
 80082a2:	f043 0220 	orr.w	r2, r3, #32
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	60fb      	str	r3, [r7, #12]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <USB_FlushTxFifo+0x48>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d901      	bls.n	80082bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e006      	b.n	80082ca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d0f0      	beq.n	80082aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	00030d40 	.word	0x00030d40

080082dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2210      	movs	r2, #16
 80082ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4a09      	ldr	r2, [pc, #36]	; (800831c <USB_FlushRxFifo+0x40>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d901      	bls.n	8008300 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e006      	b.n	800830e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f003 0310 	and.w	r3, r3, #16
 8008308:	2b10      	cmp	r3, #16
 800830a:	d0f0      	beq.n	80082ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	00030d40 	.word	0x00030d40

08008320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008340:	4313      	orrs	r3, r2
 8008342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800836c:	f043 0302 	orr.w	r3, r3, #2
 8008370:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008372:	2003      	movs	r0, #3
 8008374:	f7f8 f9be 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	4a13      	ldr	r2, [pc, #76]	; (80083e8 <USB_CoreReset+0x64>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d901      	bls.n	80083a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e01b      	b.n	80083da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	daf2      	bge.n	8008390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f043 0201 	orr.w	r2, r3, #1
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3301      	adds	r3, #1
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <USB_CoreReset+0x64>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d901      	bls.n	80083cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e006      	b.n	80083da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d0f0      	beq.n	80083ba <USB_CoreReset+0x36>

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	00030d40 	.word	0x00030d40

080083ec <delay_init>:
//��ʼ���ӳٺ���
//��ʹ��ucos��ʱ��,�˺������ʼ��ucos��ʱ�ӽ���
//SYSTICK��ʱ�ӹ̶�ΪHCLKʱ�ӵ�1/8
//SYSCLK:ϵͳʱ��
void delay_init()	 
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0

#ifdef OS_CRITICAL_METHOD 	//���OS_CRITICAL_METHOD������,˵��ʹ��ucosII��.
	uint32_t reload;
#endif
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8);	//ѡ���ⲿʱ��  HCLK/8
 80083f0:	2000      	movs	r0, #0
 80083f2:	f7f8 fad1 	bl	8000998 <HAL_SYSTICK_CLKSourceConfig>
	fac_us=SystemCoreClock/8000000;	//Ϊϵͳʱ�ӵ�1/8  
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <delay_init+0x38>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a0b      	ldr	r2, [pc, #44]	; (8008428 <delay_init+0x3c>)
 80083fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008400:	0d5b      	lsrs	r3, r3, #21
 8008402:	b2da      	uxtb	r2, r3
 8008404:	4b09      	ldr	r3, [pc, #36]	; (800842c <delay_init+0x40>)
 8008406:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/OS_TICKS_PER_SEC;//����ucos������ʱ�����ٵ�λ	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//����SYSTICK�ж�
	SysTick->LOAD=reload; 	//ÿ1/OS_TICKS_PER_SEC���ж�һ��	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   	//����SYSTICK    
#else
	fac_ms=(uint16_t)fac_us*1000;//��ucos��,����ÿ��ms��Ҫ��systickʱ����   
 8008408:	4b08      	ldr	r3, [pc, #32]	; (800842c <delay_init+0x40>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	461a      	mov	r2, r3
 8008410:	0152      	lsls	r2, r2, #5
 8008412:	1ad2      	subs	r2, r2, r3
 8008414:	0092      	lsls	r2, r2, #2
 8008416:	4413      	add	r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	b29a      	uxth	r2, r3
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <delay_init+0x44>)
 800841e:	801a      	strh	r2, [r3, #0]
#endif
}								    
 8008420:	bf00      	nop
 8008422:	bd80      	pop	{r7, pc}
 8008424:	24000008 	.word	0x24000008
 8008428:	431bde83 	.word	0x431bde83
 800842c:	240000ec 	.word	0x240000ec
 8008430:	240000ee 	.word	0x240000ee

08008434 <delay_ms>:
//SysTick->LOADΪ24λ�Ĵ���,����,�����ʱΪ:
//nms<=0xffffff*8*1000/SYSCLK
//SYSCLK��λΪHz,nms��λΪms
//��72M������,nms<=1864 
void delay_ms(uint16_t nms)
{	 		  	  
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	4603      	mov	r3, r0
 800843c:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;		   
	SysTick->LOAD=(uint32_t)nms*fac_ms;//ʱ�����(SysTick->LOADΪ24bit)
 800843e:	88fb      	ldrh	r3, [r7, #6]
 8008440:	4a15      	ldr	r2, [pc, #84]	; (8008498 <delay_ms+0x64>)
 8008442:	8812      	ldrh	r2, [r2, #0]
 8008444:	4611      	mov	r1, r2
 8008446:	4a15      	ldr	r2, [pc, #84]	; (800849c <delay_ms+0x68>)
 8008448:	fb01 f303 	mul.w	r3, r1, r3
 800844c:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //��ռ�����
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <delay_ms+0x68>)
 8008450:	2200      	movs	r2, #0
 8008452:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //��ʼ����  
 8008454:	4b11      	ldr	r3, [pc, #68]	; (800849c <delay_ms+0x68>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a10      	ldr	r2, [pc, #64]	; (800849c <delay_ms+0x68>)
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8008460:	4b0e      	ldr	r3, [pc, #56]	; (800849c <delay_ms+0x68>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//�ȴ�ʱ�䵽��   
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d004      	beq.n	800847a <delay_ms+0x46>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f2      	beq.n	8008460 <delay_ms+0x2c>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //�رռ�����
 800847a:	4b08      	ldr	r3, [pc, #32]	; (800849c <delay_ms+0x68>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a07      	ldr	r2, [pc, #28]	; (800849c <delay_ms+0x68>)
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	6013      	str	r3, [r2, #0]
	SysTick->VAL =0X00;       //��ռ�����	  	    
 8008486:	4b05      	ldr	r3, [pc, #20]	; (800849c <delay_ms+0x68>)
 8008488:	2200      	movs	r2, #0
 800848a:	609a      	str	r2, [r3, #8]
} 
 800848c:	bf00      	nop
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	240000ee 	.word	0x240000ee
 800849c:	e000e010 	.word	0xe000e010

080084a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084a4:	f7f8 f898 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */
float temp1,temp2;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084a8:	f000 f82c 	bl	8008504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084ac:	f000 facc 	bl	8008a48 <MX_GPIO_Init>
  MX_ETH_Init();
 80084b0:	f000 f8e2 	bl	8008678 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80084b4:	f000 fa4a 	bl	800894c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80084b8:	f000 fa94 	bl	80089e4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM12_Init();
 80084bc:	f000 f9c0 	bl	8008840 <MX_TIM12_Init>
  MX_TIM3_Init();
 80084c0:	f000 f922 	bl	8008708 <MX_TIM3_Init>
  MX_TIM13_Init();
 80084c4:	f000 fa1e 	bl	8008904 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 80084c8:	2104      	movs	r1, #4
 80084ca:	480b      	ldr	r0, [pc, #44]	; (80084f8 <main+0x58>)
 80084cc:	f7fb fcc8 	bl	8003e60 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   //TIM3输入出发使能
 80084d0:	2100      	movs	r1, #0
 80084d2:	480a      	ldr	r0, [pc, #40]	; (80084fc <main+0x5c>)
 80084d4:	f7fb fd52 	bl	8003f7c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80084d8:	2104      	movs	r1, #4
 80084da:	4808      	ldr	r0, [pc, #32]	; (80084fc <main+0x5c>)
 80084dc:	f7fb fd4e 	bl	8003f7c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 80084e0:	4807      	ldr	r0, [pc, #28]	; (8008500 <main+0x60>)
 80084e2:	f7fb fc5d 	bl	8003da0 <HAL_TIM_Base_Start_IT>

  delay_init();
 80084e6:	f7ff ff81 	bl	80083ec <delay_init>
  NVIC_Configuration();
 80084ea:	f001 f987 	bl	80097fc <NVIC_Configuration>
  OLED_Init();
 80084ee:	f000 fe57 	bl	80091a0 <OLED_Init>
  OLED_Clear()  	;
 80084f2:	f000 fd53 	bl	8008f9c <OLED_Clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80084f6:	e7fe      	b.n	80084f6 <main+0x56>
 80084f8:	24000620 	.word	0x24000620
 80084fc:	240005a0 	.word	0x240005a0
 8008500:	240005e0 	.word	0x240005e0

08008504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b0cc      	sub	sp, #304	; 0x130
 8008508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800850a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800850e:	224c      	movs	r2, #76	; 0x4c
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f001 fa2a 	bl	800996c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008518:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800851c:	2220      	movs	r2, #32
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fa23 	bl	800996c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008526:	f107 0308 	add.w	r3, r7, #8
 800852a:	4618      	mov	r0, r3
 800852c:	23bc      	movs	r3, #188	; 0xbc
 800852e:	461a      	mov	r2, r3
 8008530:	2100      	movs	r1, #0
 8008532:	f001 fa1b 	bl	800996c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008536:	2002      	movs	r0, #2
 8008538:	f7f9 f98a 	bl	8001850 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	4b4a      	ldr	r3, [pc, #296]	; (800866c <SystemClock_Config+0x168>)
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	4a49      	ldr	r2, [pc, #292]	; (800866c <SystemClock_Config+0x168>)
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800854e:	4b47      	ldr	r3, [pc, #284]	; (800866c <SystemClock_Config+0x168>)
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	f003 0201 	and.w	r2, r3, #1
 8008556:	1d3b      	adds	r3, r7, #4
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	4b45      	ldr	r3, [pc, #276]	; (8008670 <SystemClock_Config+0x16c>)
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008562:	4a43      	ldr	r2, [pc, #268]	; (8008670 <SystemClock_Config+0x16c>)
 8008564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008568:	6193      	str	r3, [r2, #24]
 800856a:	4b41      	ldr	r3, [pc, #260]	; (8008670 <SystemClock_Config+0x16c>)
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008572:	1d3b      	adds	r3, r7, #4
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800857a:	bf00      	nop
 800857c:	4b3c      	ldr	r3, [pc, #240]	; (8008670 <SystemClock_Config+0x16c>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008588:	d1f8      	bne.n	800857c <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800858a:	2301      	movs	r3, #1
 800858c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008590:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008594:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008598:	2302      	movs	r3, #2
 800859a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800859e:	2302      	movs	r3, #2
 80085a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80085a4:	2301      	movs	r3, #1
 80085a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80085aa:	2318      	movs	r3, #24
 80085ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80085b0:	2302      	movs	r3, #2
 80085b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80085b6:	2304      	movs	r3, #4
 80085b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80085bc:	2302      	movs	r3, #2
 80085be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80085c2:	230c      	movs	r3, #12
 80085c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80085d8:	4618      	mov	r0, r3
 80085da:	f7f9 f981 	bl	80018e0 <HAL_RCC_OscConfig>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80085e4:	f000 fc4a 	bl	8008e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085e8:	233f      	movs	r3, #63	; 0x3f
 80085ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085ee:	2303      	movs	r3, #3
 80085f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80085fa:	2300      	movs	r3, #0
 80085fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8008600:	2300      	movs	r3, #0
 8008602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8008606:	2300      	movs	r3, #0
 8008608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8008612:	2300      	movs	r3, #0
 8008614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008618:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800861c:	2101      	movs	r1, #1
 800861e:	4618      	mov	r0, r3
 8008620:	f7f9 fd16 	bl	8002050 <HAL_RCC_ClockConfig>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <SystemClock_Config+0x12a>
  {
    Error_Handler();
 800862a:	f000 fc27 	bl	8008e7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	4a10      	ldr	r2, [pc, #64]	; (8008674 <SystemClock_Config+0x170>)
 8008634:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	2200      	movs	r2, #0
 800863c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800863e:	f107 0308 	add.w	r3, r7, #8
 8008642:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800864a:	f107 0308 	add.w	r3, r7, #8
 800864e:	4618      	mov	r0, r3
 8008650:	f7fa f85c 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800865a:	f000 fc0f 	bl	8008e7c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800865e:	f7f9 f92f 	bl	80018c0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8008662:	bf00      	nop
 8008664:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	58000400 	.word	0x58000400
 8008670:	58024800 	.word	0x58024800
 8008674:	00040002 	.word	0x00040002

08008678 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800867e:	4b1d      	ldr	r3, [pc, #116]	; (80086f4 <MX_ETH_Init+0x7c>)
 8008680:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <MX_ETH_Init+0x80>)
 8008682:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008684:	2300      	movs	r3, #0
 8008686:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 800868c:	23e1      	movs	r3, #225	; 0xe1
 800868e:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8008690:	2300      	movs	r3, #0
 8008692:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8008694:	2300      	movs	r3, #0
 8008696:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8008698:	2300      	movs	r3, #0
 800869a:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800869c:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <MX_ETH_Init+0x7c>)
 800869e:	463b      	mov	r3, r7
 80086a0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80086a2:	4b14      	ldr	r3, [pc, #80]	; (80086f4 <MX_ETH_Init+0x7c>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80086a8:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <MX_ETH_Init+0x7c>)
 80086aa:	4a14      	ldr	r2, [pc, #80]	; (80086fc <MX_ETH_Init+0x84>)
 80086ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80086ae:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <MX_ETH_Init+0x7c>)
 80086b0:	4a13      	ldr	r2, [pc, #76]	; (8008700 <MX_ETH_Init+0x88>)
 80086b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80086b4:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <MX_ETH_Init+0x7c>)
 80086b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80086ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80086bc:	480d      	ldr	r0, [pc, #52]	; (80086f4 <MX_ETH_Init+0x7c>)
 80086be:	f7f8 f987 	bl	80009d0 <HAL_ETH_Init>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_ETH_Init+0x54>
  {
    Error_Handler();
 80086c8:	f000 fbd8 	bl	8008e7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80086cc:	2234      	movs	r2, #52	; 0x34
 80086ce:	2100      	movs	r1, #0
 80086d0:	480c      	ldr	r0, [pc, #48]	; (8008704 <MX_ETH_Init+0x8c>)
 80086d2:	f001 f94b 	bl	800996c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <MX_ETH_Init+0x8c>)
 80086d8:	2221      	movs	r2, #33	; 0x21
 80086da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <MX_ETH_Init+0x8c>)
 80086de:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80086e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80086e4:	4b07      	ldr	r3, [pc, #28]	; (8008704 <MX_ETH_Init+0x8c>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	24000660 	.word	0x24000660
 80086f8:	40028000 	.word	0x40028000
 80086fc:	24000070 	.word	0x24000070
 8008700:	24000010 	.word	0x24000010
 8008704:	240006d0 	.word	0x240006d0

08008708 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b090      	sub	sp, #64	; 0x40
 800870c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800870e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	609a      	str	r2, [r3, #8]
 800871a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800871c:	f107 031c 	add.w	r3, r7, #28
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	605a      	str	r2, [r3, #4]
 8008726:	609a      	str	r2, [r3, #8]
 8008728:	60da      	str	r2, [r3, #12]
 800872a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800872c:	f107 0310 	add.w	r3, r7, #16
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	605a      	str	r2, [r3, #4]
 8008736:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008738:	463b      	mov	r3, r7
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	605a      	str	r2, [r3, #4]
 8008740:	609a      	str	r2, [r3, #8]
 8008742:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008744:	4b3c      	ldr	r3, [pc, #240]	; (8008838 <MX_TIM3_Init+0x130>)
 8008746:	4a3d      	ldr	r2, [pc, #244]	; (800883c <MX_TIM3_Init+0x134>)
 8008748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96;
 800874a:	4b3b      	ldr	r3, [pc, #236]	; (8008838 <MX_TIM3_Init+0x130>)
 800874c:	2260      	movs	r2, #96	; 0x60
 800874e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008750:	4b39      	ldr	r3, [pc, #228]	; (8008838 <MX_TIM3_Init+0x130>)
 8008752:	2200      	movs	r2, #0
 8008754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8008756:	4b38      	ldr	r3, [pc, #224]	; (8008838 <MX_TIM3_Init+0x130>)
 8008758:	f242 7210 	movw	r2, #10000	; 0x2710
 800875c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800875e:	4b36      	ldr	r3, [pc, #216]	; (8008838 <MX_TIM3_Init+0x130>)
 8008760:	2200      	movs	r2, #0
 8008762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008764:	4b34      	ldr	r3, [pc, #208]	; (8008838 <MX_TIM3_Init+0x130>)
 8008766:	2200      	movs	r2, #0
 8008768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800876a:	4833      	ldr	r0, [pc, #204]	; (8008838 <MX_TIM3_Init+0x130>)
 800876c:	f7fb faec 	bl	8003d48 <HAL_TIM_Base_Init>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8008776:	f000 fb81 	bl	8008e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800877a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008780:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008784:	4619      	mov	r1, r3
 8008786:	482c      	ldr	r0, [pc, #176]	; (8008838 <MX_TIM3_Init+0x130>)
 8008788:	f7fb ff3a 	bl	8004600 <HAL_TIM_ConfigClockSource>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8008792:	f000 fb73 	bl	8008e7c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8008796:	4828      	ldr	r0, [pc, #160]	; (8008838 <MX_TIM3_Init+0x130>)
 8008798:	f7fb fbba 	bl	8003f10 <HAL_TIM_IC_Init>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80087a2:	f000 fb6b 	bl	8008e7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80087a6:	2304      	movs	r3, #4
 80087a8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80087aa:	2350      	movs	r3, #80	; 0x50
 80087ac:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80087ae:	2300      	movs	r3, #0
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80087b6:	f107 031c 	add.w	r3, r7, #28
 80087ba:	4619      	mov	r1, r3
 80087bc:	481e      	ldr	r0, [pc, #120]	; (8008838 <MX_TIM3_Init+0x130>)
 80087be:	f7fb ffef 	bl	80047a0 <HAL_TIM_SlaveConfigSynchro>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80087c8:	f000 fb58 	bl	8008e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087cc:	2300      	movs	r3, #0
 80087ce:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80087d4:	f107 0310 	add.w	r3, r7, #16
 80087d8:	4619      	mov	r1, r3
 80087da:	4817      	ldr	r0, [pc, #92]	; (8008838 <MX_TIM3_Init+0x130>)
 80087dc:	f7fc fe7e 	bl	80054dc <HAL_TIMEx_MasterConfigSynchronization>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80087e6:	f000 fb49 	bl	8008e7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80087ea:	2300      	movs	r3, #0
 80087ec:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80087ee:	2301      	movs	r3, #1
 80087f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80087fa:	463b      	mov	r3, r7
 80087fc:	2200      	movs	r2, #0
 80087fe:	4619      	mov	r1, r3
 8008800:	480d      	ldr	r0, [pc, #52]	; (8008838 <MX_TIM3_Init+0x130>)
 8008802:	f7fb fd48 	bl	8004296 <HAL_TIM_IC_ConfigChannel>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 800880c:	f000 fb36 	bl	8008e7c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8008810:	2302      	movs	r3, #2
 8008812:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8008814:	2302      	movs	r3, #2
 8008816:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008818:	463b      	mov	r3, r7
 800881a:	2204      	movs	r2, #4
 800881c:	4619      	mov	r1, r3
 800881e:	4806      	ldr	r0, [pc, #24]	; (8008838 <MX_TIM3_Init+0x130>)
 8008820:	f7fb fd39 	bl	8004296 <HAL_TIM_IC_ConfigChannel>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 800882a:	f000 fb27 	bl	8008e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800882e:	bf00      	nop
 8008830:	3740      	adds	r7, #64	; 0x40
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	240005a0 	.word	0x240005a0
 800883c:	40000400 	.word	0x40000400

08008840 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	; 0x30
 8008844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008846:	f107 0320 	add.w	r3, r7, #32
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	605a      	str	r2, [r3, #4]
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008854:	1d3b      	adds	r3, r7, #4
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	605a      	str	r2, [r3, #4]
 800885c:	609a      	str	r2, [r3, #8]
 800885e:	60da      	str	r2, [r3, #12]
 8008860:	611a      	str	r2, [r3, #16]
 8008862:	615a      	str	r2, [r3, #20]
 8008864:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8008866:	4b25      	ldr	r3, [pc, #148]	; (80088fc <MX_TIM12_Init+0xbc>)
 8008868:	4a25      	ldr	r2, [pc, #148]	; (8008900 <MX_TIM12_Init+0xc0>)
 800886a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 96;
 800886c:	4b23      	ldr	r3, [pc, #140]	; (80088fc <MX_TIM12_Init+0xbc>)
 800886e:	2260      	movs	r2, #96	; 0x60
 8008870:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008872:	4b22      	ldr	r3, [pc, #136]	; (80088fc <MX_TIM12_Init+0xbc>)
 8008874:	2200      	movs	r2, #0
 8008876:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 8008878:	4b20      	ldr	r3, [pc, #128]	; (80088fc <MX_TIM12_Init+0xbc>)
 800887a:	2263      	movs	r2, #99	; 0x63
 800887c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800887e:	4b1f      	ldr	r3, [pc, #124]	; (80088fc <MX_TIM12_Init+0xbc>)
 8008880:	2200      	movs	r2, #0
 8008882:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008884:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <MX_TIM12_Init+0xbc>)
 8008886:	2200      	movs	r2, #0
 8008888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800888a:	481c      	ldr	r0, [pc, #112]	; (80088fc <MX_TIM12_Init+0xbc>)
 800888c:	f7fb fa5c 	bl	8003d48 <HAL_TIM_Base_Init>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8008896:	f000 faf1 	bl	8008e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800889a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800889e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80088a0:	f107 0320 	add.w	r3, r7, #32
 80088a4:	4619      	mov	r1, r3
 80088a6:	4815      	ldr	r0, [pc, #84]	; (80088fc <MX_TIM12_Init+0xbc>)
 80088a8:	f7fb feaa 	bl	8004600 <HAL_TIM_ConfigClockSource>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80088b2:	f000 fae3 	bl	8008e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80088b6:	4811      	ldr	r0, [pc, #68]	; (80088fc <MX_TIM12_Init+0xbc>)
 80088b8:	f7fb fa9c 	bl	8003df4 <HAL_TIM_PWM_Init>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 80088c2:	f000 fadb 	bl	8008e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088c6:	2360      	movs	r3, #96	; 0x60
 80088c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 49;
 80088ca:	2331      	movs	r3, #49	; 0x31
 80088cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80088d6:	1d3b      	adds	r3, r7, #4
 80088d8:	2204      	movs	r2, #4
 80088da:	4619      	mov	r1, r3
 80088dc:	4807      	ldr	r0, [pc, #28]	; (80088fc <MX_TIM12_Init+0xbc>)
 80088de:	f7fb fd77 	bl	80043d0 <HAL_TIM_PWM_ConfigChannel>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 80088e8:	f000 fac8 	bl	8008e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80088ec:	4803      	ldr	r0, [pc, #12]	; (80088fc <MX_TIM12_Init+0xbc>)
 80088ee:	f000 fe5d 	bl	80095ac <HAL_TIM_MspPostInit>

}
 80088f2:	bf00      	nop
 80088f4:	3730      	adds	r7, #48	; 0x30
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	24000620 	.word	0x24000620
 8008900:	40001800 	.word	0x40001800

08008904 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8008908:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <MX_TIM13_Init+0x40>)
 800890a:	4a0f      	ldr	r2, [pc, #60]	; (8008948 <MX_TIM13_Init+0x44>)
 800890c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 9600;
 800890e:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <MX_TIM13_Init+0x40>)
 8008910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008914:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008916:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <MX_TIM13_Init+0x40>)
 8008918:	2200      	movs	r2, #0
 800891a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4999;
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <MX_TIM13_Init+0x40>)
 800891e:	f241 3287 	movw	r2, #4999	; 0x1387
 8008922:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <MX_TIM13_Init+0x40>)
 8008926:	2200      	movs	r2, #0
 8008928:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800892a:	4b06      	ldr	r3, [pc, #24]	; (8008944 <MX_TIM13_Init+0x40>)
 800892c:	2200      	movs	r2, #0
 800892e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8008930:	4804      	ldr	r0, [pc, #16]	; (8008944 <MX_TIM13_Init+0x40>)
 8008932:	f7fb fa09 	bl	8003d48 <HAL_TIM_Base_Init>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800893c:	f000 fa9e 	bl	8008e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8008940:	bf00      	nop
 8008942:	bd80      	pop	{r7, pc}
 8008944:	240005e0 	.word	0x240005e0
 8008948:	40001c00 	.word	0x40001c00

0800894c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008950:	4b22      	ldr	r3, [pc, #136]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008952:	4a23      	ldr	r2, [pc, #140]	; (80089e0 <MX_USART3_UART_Init+0x94>)
 8008954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008956:	4b21      	ldr	r3, [pc, #132]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800895c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800895e:	4b1f      	ldr	r3, [pc, #124]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008960:	2200      	movs	r2, #0
 8008962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008964:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008966:	2200      	movs	r2, #0
 8008968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800896a:	4b1c      	ldr	r3, [pc, #112]	; (80089dc <MX_USART3_UART_Init+0x90>)
 800896c:	2200      	movs	r2, #0
 800896e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008972:	220c      	movs	r2, #12
 8008974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008976:	4b19      	ldr	r3, [pc, #100]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008978:	2200      	movs	r2, #0
 800897a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800897c:	4b17      	ldr	r3, [pc, #92]	; (80089dc <MX_USART3_UART_Init+0x90>)
 800897e:	2200      	movs	r2, #0
 8008980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008982:	4b16      	ldr	r3, [pc, #88]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008984:	2200      	movs	r2, #0
 8008986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008988:	4b14      	ldr	r3, [pc, #80]	; (80089dc <MX_USART3_UART_Init+0x90>)
 800898a:	2200      	movs	r2, #0
 800898c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008990:	2200      	movs	r2, #0
 8008992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008994:	4811      	ldr	r0, [pc, #68]	; (80089dc <MX_USART3_UART_Init+0x90>)
 8008996:	f7fc fe1b 	bl	80055d0 <HAL_UART_Init>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80089a0:	f000 fa6c 	bl	8008e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80089a4:	2100      	movs	r1, #0
 80089a6:	480d      	ldr	r0, [pc, #52]	; (80089dc <MX_USART3_UART_Init+0x90>)
 80089a8:	f7ff f983 	bl	8007cb2 <HAL_UARTEx_SetTxFifoThreshold>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80089b2:	f000 fa63 	bl	8008e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80089b6:	2100      	movs	r1, #0
 80089b8:	4808      	ldr	r0, [pc, #32]	; (80089dc <MX_USART3_UART_Init+0x90>)
 80089ba:	f7ff f9b8 	bl	8007d2e <HAL_UARTEx_SetRxFifoThreshold>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80089c4:	f000 fa5a 	bl	8008e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80089c8:	4804      	ldr	r0, [pc, #16]	; (80089dc <MX_USART3_UART_Init+0x90>)
 80089ca:	f7ff f939 	bl	8007c40 <HAL_UARTEx_DisableFifoMode>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80089d4:	f000 fa52 	bl	8008e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80089d8:	bf00      	nop
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	2400010c 	.word	0x2400010c
 80089e0:	40004800 	.word	0x40004800

080089e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089e8:	4b15      	ldr	r3, [pc, #84]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80089ea:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80089ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80089ee:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80089f0:	2209      	movs	r2, #9
 80089f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089f4:	4b12      	ldr	r3, [pc, #72]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80089f6:	2202      	movs	r2, #2
 80089f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089fa:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a00:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a02:	2202      	movs	r2, #2
 8008a04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008a06:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a0c:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a12:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008a1e:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a2a:	4805      	ldr	r0, [pc, #20]	; (8008a40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008a2c:	f7f8 fdc8 	bl	80015c0 <HAL_PCD_Init>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8008a36:	f000 fa21 	bl	8008e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008a3a:	bf00      	nop
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	24000198 	.word	0x24000198
 8008a44:	40080000 	.word	0x40080000

08008a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08e      	sub	sp, #56	; 0x38
 8008a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	605a      	str	r2, [r3, #4]
 8008a58:	609a      	str	r2, [r3, #8]
 8008a5a:	60da      	str	r2, [r3, #12]
 8008a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a5e:	4ba3      	ldr	r3, [pc, #652]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a64:	4aa1      	ldr	r2, [pc, #644]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008a66:	f043 0304 	orr.w	r3, r3, #4
 8008a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a6e:	4b9f      	ldr	r3, [pc, #636]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	623b      	str	r3, [r7, #32]
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008a7c:	4b9b      	ldr	r3, [pc, #620]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a82:	4a9a      	ldr	r2, [pc, #616]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008a84:	f043 0320 	orr.w	r3, r3, #32
 8008a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a8c:	4b97      	ldr	r3, [pc, #604]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	61fb      	str	r3, [r7, #28]
 8008a98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008a9a:	4b94      	ldr	r3, [pc, #592]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aa0:	4a92      	ldr	r2, [pc, #584]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008aaa:	4b90      	ldr	r3, [pc, #576]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab4:	61bb      	str	r3, [r7, #24]
 8008ab6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ab8:	4b8c      	ldr	r3, [pc, #560]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008abe:	4a8b      	ldr	r2, [pc, #556]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008ac0:	f043 0301 	orr.w	r3, r3, #1
 8008ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ac8:	4b88      	ldr	r3, [pc, #544]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ad6:	4b85      	ldr	r3, [pc, #532]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008adc:	4a83      	ldr	r2, [pc, #524]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008ade:	f043 0302 	orr.w	r3, r3, #2
 8008ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ae6:	4b81      	ldr	r3, [pc, #516]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008af4:	4b7d      	ldr	r3, [pc, #500]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008afa:	4a7c      	ldr	r2, [pc, #496]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008afc:	f043 0310 	orr.w	r3, r3, #16
 8008b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008b04:	4b79      	ldr	r3, [pc, #484]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b0a:	f003 0310 	and.w	r3, r3, #16
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b12:	4b76      	ldr	r3, [pc, #472]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b18:	4a74      	ldr	r2, [pc, #464]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008b1a:	f043 0308 	orr.w	r3, r3, #8
 8008b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008b22:	4b72      	ldr	r3, [pc, #456]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	60bb      	str	r3, [r7, #8]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b30:	4b6e      	ldr	r3, [pc, #440]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b36:	4a6d      	ldr	r2, [pc, #436]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008b40:	4b6a      	ldr	r3, [pc, #424]	; (8008cec <MX_GPIO_Init+0x2a4>)
 8008b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4a:	607b      	str	r3, [r7, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008b54:	4866      	ldr	r0, [pc, #408]	; (8008cf0 <MX_GPIO_Init+0x2a8>)
 8008b56:	f7f8 fd01 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED3_Pin|key_5_Pin, GPIO_PIN_RESET);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f244 0109 	movw	r1, #16393	; 0x4009
 8008b60:	4864      	ldr	r0, [pc, #400]	; (8008cf4 <MX_GPIO_Init+0x2ac>)
 8008b62:	f7f8 fcfb 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_RES_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 8008b66:	2201      	movs	r2, #1
 8008b68:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008b6c:	4862      	ldr	r0, [pc, #392]	; (8008cf8 <MX_GPIO_Init+0x2b0>)
 8008b6e:	f7f8 fcf5 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|key_8_Pin|key_7_Pin, GPIO_PIN_RESET);
 8008b72:	2200      	movs	r2, #0
 8008b74:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 8008b78:	4860      	ldr	r0, [pc, #384]	; (8008cfc <MX_GPIO_Init+0x2b4>)
 8008b7a:	f7f8 fcef 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_D1_Pin|OLED_D0_Pin, GPIO_PIN_SET);
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8008b84:	485d      	ldr	r0, [pc, #372]	; (8008cfc <MX_GPIO_Init+0x2b4>)
 8008b86:	f7f8 fce9 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(key_6_GPIO_Port, key_6_Pin, GPIO_PIN_RESET);
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008b90:	485b      	ldr	r0, [pc, #364]	; (8008d00 <MX_GPIO_Init+0x2b8>)
 8008b92:	f7f8 fce3 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008b96:	2200      	movs	r2, #0
 8008b98:	2102      	movs	r1, #2
 8008b9a:	4857      	ldr	r0, [pc, #348]	; (8008cf8 <MX_GPIO_Init+0x2b0>)
 8008b9c:	f7f8 fcde 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_button_Pin */
  GPIO_InitStruct.Pin = blue_button_Pin;
 8008ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008ba6:	4b57      	ldr	r3, [pc, #348]	; (8008d04 <MX_GPIO_Init+0x2bc>)
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008baa:	2302      	movs	r3, #2
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(blue_button_GPIO_Port, &GPIO_InitStruct);
 8008bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4854      	ldr	r0, [pc, #336]	; (8008d08 <MX_GPIO_Init+0x2c0>)
 8008bb6:	f7f8 fb21 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8008bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8008bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4847      	ldr	r0, [pc, #284]	; (8008cf0 <MX_GPIO_Init+0x2a8>)
 8008bd4:	f7f8 fb12 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LED3_Pin key_5_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LED3_Pin|key_5_Pin;
 8008bd8:	f244 0309 	movw	r3, #16393	; 0x4009
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bde:	2301      	movs	r3, #1
 8008be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008be6:	2300      	movs	r3, #0
 8008be8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4840      	ldr	r0, [pc, #256]	; (8008cf4 <MX_GPIO_Init+0x2ac>)
 8008bf2:	f7f8 fb03 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_CS_Pin;
 8008bf6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c04:	2302      	movs	r3, #2
 8008c06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	483a      	ldr	r0, [pc, #232]	; (8008cf8 <MX_GPIO_Init+0x2b0>)
 8008c10:	f7f8 faf4 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : key_2_Pin key_3_Pin key_4_Pin */
  GPIO_InitStruct.Pin = key_2_Pin|key_3_Pin|key_4_Pin;
 8008c14:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c26:	4619      	mov	r1, r3
 8008c28:	4832      	ldr	r0, [pc, #200]	; (8008cf4 <MX_GPIO_Init+0x2ac>)
 8008c2a:	f7f8 fae7 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin key_8_Pin key_7_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|key_8_Pin|key_7_Pin;
 8008c2e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c34:	2301      	movs	r3, #1
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c44:	4619      	mov	r1, r3
 8008c46:	482d      	ldr	r0, [pc, #180]	; (8008cfc <MX_GPIO_Init+0x2b4>)
 8008c48:	f7f8 fad8 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_D1_Pin OLED_D0_Pin */
  GPIO_InitStruct.Pin = OLED_D1_Pin|OLED_D0_Pin;
 8008c4c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c52:	2301      	movs	r3, #1
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c62:	4619      	mov	r1, r3
 8008c64:	4825      	ldr	r0, [pc, #148]	; (8008cfc <MX_GPIO_Init+0x2b4>)
 8008c66:	f7f8 fac9 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8008c6a:	2380      	movs	r3, #128	; 0x80
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c6e:	4b25      	ldr	r3, [pc, #148]	; (8008d04 <MX_GPIO_Init+0x2bc>)
 8008c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8008c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4823      	ldr	r0, [pc, #140]	; (8008d0c <MX_GPIO_Init+0x2c4>)
 8008c7e:	f7f8 fabd 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : key_1_Pin */
  GPIO_InitStruct.Pin = key_1_Pin;
 8008c82:	2380      	movs	r3, #128	; 0x80
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c86:	2300      	movs	r3, #0
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(key_1_GPIO_Port, &GPIO_InitStruct);
 8008c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c92:	4619      	mov	r1, r3
 8008c94:	481c      	ldr	r0, [pc, #112]	; (8008d08 <MX_GPIO_Init+0x2c0>)
 8008c96:	f7f8 fab1 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : key_6_Pin */
  GPIO_InitStruct.Pin = key_6_Pin;
 8008c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(key_6_GPIO_Port, &GPIO_InitStruct);
 8008cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4813      	ldr	r0, [pc, #76]	; (8008d00 <MX_GPIO_Init+0x2b8>)
 8008cb4:	f7f8 faa2 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ccc:	4619      	mov	r1, r3
 8008cce:	480a      	ldr	r0, [pc, #40]	; (8008cf8 <MX_GPIO_Init+0x2b0>)
 8008cd0:	f7f8 fa94 	bl	80011fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	2028      	movs	r0, #40	; 0x28
 8008cda:	f7f7 fe28 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008cde:	2028      	movs	r0, #40	; 0x28
 8008ce0:	f7f7 fe3f 	bl	8000962 <HAL_NVIC_EnableIRQ>

}
 8008ce4:	bf00      	nop
 8008ce6:	3738      	adds	r7, #56	; 0x38
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	58024400 	.word	0x58024400
 8008cf0:	58021400 	.word	0x58021400
 8008cf4:	58020400 	.word	0x58020400
 8008cf8:	58021000 	.word	0x58021000
 8008cfc:	58020c00 	.word	0x58020c00
 8008d00:	58020000 	.word	0x58020000
 8008d04:	11110000 	.word	0x11110000
 8008d08:	58020800 	.word	0x58020800
 8008d0c:	58021800 	.word	0x58021800

08008d10 <TIM_SetTIM12Changefrequency2>:
/**
 * TIM12CH2
 * 设置占空�??????????????
 */
void TIM_SetTIM12Changefrequency2(uint32_t compare,uint32_t frequency)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	TIM12->CCR2=compare;
 8008d1a:	4a06      	ldr	r2, [pc, #24]	; (8008d34 <TIM_SetTIM12Changefrequency2+0x24>)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM12->ARR=frequency;
 8008d20:	4a04      	ldr	r2, [pc, #16]	; (8008d34 <TIM_SetTIM12Changefrequency2+0x24>)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40001800 	.word	0x40001800

08008d38 <HAL_TIM_IC_CaptureCallback>:
	freq = 90000000.0f / tmp1;

}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
	//volatile static uint32_t _tmp1 = 0, _tmp2 = 0;
	tmp1;
 8008d40:	4b1c      	ldr	r3, [pc, #112]	; (8008db4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7f1b      	ldrb	r3, [r3, #28]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d124      	bne.n	8008d96 <HAL_TIM_IC_CaptureCallback+0x5e>
	    {
	        tmp1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);//周期
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	481a      	ldr	r0, [pc, #104]	; (8008db8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8008d50:	f7fb fd68 	bl	8004824 <HAL_TIM_ReadCapturedValue>
 8008d54:	4602      	mov	r2, r0
 8008d56:	4b17      	ldr	r3, [pc, #92]	; (8008db4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008d58:	601a      	str	r2, [r3, #0]
	        if(tmp1!=0)
 8008d5a:	4b16      	ldr	r3, [pc, #88]	; (8008db4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d012      	beq.n	8008d88 <HAL_TIM_IC_CaptureCallback+0x50>
	        {
	        	freq=1000000/tmp1;
 8008d62:	4b14      	ldr	r3, [pc, #80]	; (8008db4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a15      	ldr	r2, [pc, #84]	; (8008dbc <HAL_TIM_IC_CaptureCallback+0x84>)
 8008d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6c:	4a14      	ldr	r2, [pc, #80]	; (8008dc0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8008d6e:	6013      	str	r3, [r2, #0]
	        	duty=tmp2*100/tmp1;
 8008d70:	4b14      	ldr	r3, [pc, #80]	; (8008dc4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2264      	movs	r2, #100	; 0x64
 8008d76:	fb02 f203 	mul.w	r2, r2, r3
 8008d7a:	4b0e      	ldr	r3, [pc, #56]	; (8008db4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d82:	4a11      	ldr	r2, [pc, #68]	; (8008dc8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8008d84:	6013      	str	r3, [r2, #0]
	    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
	    {
	        tmp2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);//占空�????????????

	    }
}
 8008d86:	e011      	b.n	8008dac <HAL_TIM_IC_CaptureCallback+0x74>
	        	duty=0;
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
	        	freq=0;
 8008d8e:	4b0c      	ldr	r3, [pc, #48]	; (8008dc0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
}
 8008d94:	e00a      	b.n	8008dac <HAL_TIM_IC_CaptureCallback+0x74>
	    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7f1b      	ldrb	r3, [r3, #28]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d106      	bne.n	8008dac <HAL_TIM_IC_CaptureCallback+0x74>
	        tmp2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);//占空�????????????
 8008d9e:	2104      	movs	r1, #4
 8008da0:	4805      	ldr	r0, [pc, #20]	; (8008db8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8008da2:	f7fb fd3f 	bl	8004824 <HAL_TIM_ReadCapturedValue>
 8008da6:	4602      	mov	r2, r0
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8008daa:	601a      	str	r2, [r3, #0]
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	240000f8 	.word	0x240000f8
 8008db8:	240005a0 	.word	0x240005a0
 8008dbc:	000f4240 	.word	0x000f4240
 8008dc0:	240000f4 	.word	0x240000f4
 8008dc4:	240000fc 	.word	0x240000fc
 8008dc8:	240000f0 	.word	0x240000f0

08008dcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//oled显示屏显示中断
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	6078      	str	r0, [r7, #4]
	if(htim==(&htim13))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a0c      	ldr	r2, [pc, #48]	; (8008e08 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d111      	bne.n	8008e00 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		OLED_ShowNum(64,5,duty,3,16);
 8008ddc:	4b0b      	ldr	r3, [pc, #44]	; (8008e0c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	2310      	movs	r3, #16
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	2303      	movs	r3, #3
 8008de6:	2105      	movs	r1, #5
 8008de8:	2040      	movs	r0, #64	; 0x40
 8008dea:	f000 f975 	bl	80090d8 <OLED_ShowNum>
		OLED_ShowNum(5,5,freq,7,16);
 8008dee:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	2310      	movs	r3, #16
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	2307      	movs	r3, #7
 8008df8:	2105      	movs	r1, #5
 8008dfa:	2005      	movs	r0, #5
 8008dfc:	f000 f96c 	bl	80090d8 <OLED_ShowNum>

	}
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	240005e0 	.word	0x240005e0
 8008e0c:	240000f0 	.word	0x240000f0
 8008e10:	240000f4 	.word	0x240000f4

08008e14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	80fb      	strh	r3, [r7, #6]
	dutyset=dutyset+10;
 8008e1e:	4b15      	ldr	r3, [pc, #84]	; (8008e74 <HAL_GPIO_EXTI_Callback+0x60>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	330a      	adds	r3, #10
 8008e24:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <HAL_GPIO_EXTI_Callback+0x60>)
 8008e26:	6013      	str	r3, [r2, #0]
	if(freq_flag)
 8008e28:	4b13      	ldr	r3, [pc, #76]	; (8008e78 <HAL_GPIO_EXTI_Callback+0x64>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <HAL_GPIO_EXTI_Callback+0x34>
	{
		TIM_SetTIM12Changefrequency2(dutyset*10,999);
 8008e30:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <HAL_GPIO_EXTI_Callback+0x60>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	005b      	lsls	r3, r3, #1
 8008e3c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff ff65 	bl	8008d10 <TIM_SetTIM12Changefrequency2>
 8008e46:	e005      	b.n	8008e54 <HAL_GPIO_EXTI_Callback+0x40>
	}
	else{
	TIM_SetTIM12Changefrequency2(dutyset,99);
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <HAL_GPIO_EXTI_Callback+0x60>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2163      	movs	r1, #99	; 0x63
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff ff5e 	bl	8008d10 <TIM_SetTIM12Changefrequency2>
	}
	if(dutyset==90)
 8008e54:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <HAL_GPIO_EXTI_Callback+0x60>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b5a      	cmp	r3, #90	; 0x5a
 8008e5a:	d107      	bne.n	8008e6c <HAL_GPIO_EXTI_Callback+0x58>
	{
		dutyset=0;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_GPIO_EXTI_Callback+0x60>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
		freq_flag=~freq_flag;
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <HAL_GPIO_EXTI_Callback+0x64>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	43db      	mvns	r3, r3
 8008e68:	4a03      	ldr	r2, [pc, #12]	; (8008e78 <HAL_GPIO_EXTI_Callback+0x64>)
 8008e6a:	6013      	str	r3, [r2, #0]
	}
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	24000100 	.word	0x24000100
 8008e78:	24000104 	.word	0x24000104

08008e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008e80:	bf00      	nop
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <OLED_WR_Byte>:
#else
//��SSD1106д��һ���ֽڡ�
//dat:Ҫд�������/����
//cmd:����/�����־ 0,��ʾ����;1,��ʾ����;
void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	460a      	mov	r2, r1
 8008e96:	71fb      	strb	r3, [r7, #7]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if(cmd)
 8008e9c:	79bb      	ldrb	r3, [r7, #6]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d006      	beq.n	8008eb0 <OLED_WR_Byte+0x24>
	  {OLED_DC_Set();}
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ea8:	4824      	ldr	r0, [pc, #144]	; (8008f3c <OLED_WR_Byte+0xb0>)
 8008eaa:	f7f8 fb57 	bl	800155c <HAL_GPIO_WritePin>
 8008eae:	e005      	b.n	8008ebc <OLED_WR_Byte+0x30>
	else 
	  {OLED_DC_Clr();	}
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008eb6:	4821      	ldr	r0, [pc, #132]	; (8008f3c <OLED_WR_Byte+0xb0>)
 8008eb8:	f7f8 fb50 	bl	800155c <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ec2:	481f      	ldr	r0, [pc, #124]	; (8008f40 <OLED_WR_Byte+0xb4>)
 8008ec4:	f7f8 fb4a 	bl	800155c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
 8008ecc:	e022      	b.n	8008f14 <OLED_WR_Byte+0x88>
	{			  
		OLED_SCLK_Clr();
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ed4:	481b      	ldr	r0, [pc, #108]	; (8008f44 <OLED_WR_Byte+0xb8>)
 8008ed6:	f7f8 fb41 	bl	800155c <HAL_GPIO_WritePin>
		if(dat&0x80)
 8008eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da06      	bge.n	8008ef0 <OLED_WR_Byte+0x64>
		   OLED_SDIN_Set();
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008ee8:	4816      	ldr	r0, [pc, #88]	; (8008f44 <OLED_WR_Byte+0xb8>)
 8008eea:	f7f8 fb37 	bl	800155c <HAL_GPIO_WritePin>
 8008eee:	e005      	b.n	8008efc <OLED_WR_Byte+0x70>
		else 
		   OLED_SDIN_Clr();
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008ef6:	4813      	ldr	r0, [pc, #76]	; (8008f44 <OLED_WR_Byte+0xb8>)
 8008ef8:	f7f8 fb30 	bl	800155c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008efc:	2201      	movs	r2, #1
 8008efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f02:	4810      	ldr	r0, [pc, #64]	; (8008f44 <OLED_WR_Byte+0xb8>)
 8008f04:	f7f8 fb2a 	bl	800155c <HAL_GPIO_WritePin>
		dat<<=1;   
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	3301      	adds	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b07      	cmp	r3, #7
 8008f18:	d9d9      	bls.n	8008ece <OLED_WR_Byte+0x42>
	}				 		  
	OLED_CS_Set();
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f20:	4807      	ldr	r0, [pc, #28]	; (8008f40 <OLED_WR_Byte+0xb4>)
 8008f22:	f7f8 fb1b 	bl	800155c <HAL_GPIO_WritePin>
	OLED_DC_Set();   	  
 8008f26:	2201      	movs	r2, #1
 8008f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f2c:	4803      	ldr	r0, [pc, #12]	; (8008f3c <OLED_WR_Byte+0xb0>)
 8008f2e:	f7f8 fb15 	bl	800155c <HAL_GPIO_WritePin>
} 
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	58021400 	.word	0x58021400
 8008f40:	58021000 	.word	0x58021000
 8008f44:	58020c00 	.word	0x58020c00

08008f48 <OLED_Set_Pos>:
#endif
	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460a      	mov	r2, r1
 8008f52:	71fb      	strb	r3, [r7, #7]
 8008f54:	4613      	mov	r3, r2
 8008f56:	71bb      	strb	r3, [r7, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8008f58:	79bb      	ldrb	r3, [r7, #6]
 8008f5a:	3b50      	subs	r3, #80	; 0x50
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff ff93 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	091b      	lsrs	r3, r3, #4
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f043 0310 	orr.w	r3, r3, #16
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff ff89 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 8008f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f7e:	f003 030e 	and.w	r3, r3, #14
 8008f82:	b25b      	sxtb	r3, r3
 8008f84:	f043 0301 	orr.w	r3, r3, #1
 8008f88:	b25b      	sxtb	r3, r3
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff ff7c 	bl	8008e8c <OLED_WR_Byte>
}   	  
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)  
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	71fb      	strb	r3, [r7, #7]
 8008fa6:	e01f      	b.n	8008fe8 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	3b50      	subs	r3, #80	; 0x50
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff ff6b 	bl	8008e8c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	2000      	movs	r0, #0
 8008fba:	f7ff ff67 	bl	8008e8c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	2010      	movs	r0, #16
 8008fc2:	f7ff ff63 	bl	8008e8c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	71bb      	strb	r3, [r7, #6]
 8008fca:	e006      	b.n	8008fda <OLED_Clear+0x3e>
 8008fcc:	2101      	movs	r1, #1
 8008fce:	2000      	movs	r0, #0
 8008fd0:	f7ff ff5c 	bl	8008e8c <OLED_WR_Byte>
 8008fd4:	79bb      	ldrb	r3, [r7, #6]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	71bb      	strb	r3, [r7, #6]
 8008fda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	daf4      	bge.n	8008fcc <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	71fb      	strb	r3, [r7, #7]
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	2b07      	cmp	r3, #7
 8008fec:	d9dc      	bls.n	8008fa8 <OLED_Clear+0xc>
	} //������ʾ
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr)
{      	
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	71fb      	strb	r3, [r7, #7]
 8009002:	460b      	mov	r3, r1
 8009004:	71bb      	strb	r3, [r7, #6]
 8009006:	4613      	mov	r3, r2
 8009008:	717b      	strb	r3, [r7, #5]
	unsigned char c=0,i=0;	
 800900a:	2300      	movs	r3, #0
 800900c:	73bb      	strb	r3, [r7, #14]
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 8009012:	797b      	ldrb	r3, [r7, #5]
 8009014:	3b20      	subs	r3, #32
 8009016:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8009018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901c:	2b00      	cmp	r3, #0
 800901e:	da04      	bge.n	800902a <OLED_ShowChar+0x32>
 8009020:	2300      	movs	r3, #0
 8009022:	71fb      	strb	r3, [r7, #7]
 8009024:	79bb      	ldrb	r3, [r7, #6]
 8009026:	3302      	adds	r3, #2
 8009028:	71bb      	strb	r3, [r7, #6]
		if(SIZE ==16)
			{
			OLED_Set_Pos(x,y);	
 800902a:	79ba      	ldrb	r2, [r7, #6]
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff ff89 	bl	8008f48 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]
 800903a:	e00c      	b.n	8009056 <OLED_ShowChar+0x5e>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	011a      	lsls	r2, r3, #4
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	4413      	add	r3, r2
 8009044:	4a15      	ldr	r2, [pc, #84]	; (800909c <OLED_ShowChar+0xa4>)
 8009046:	5cd3      	ldrb	r3, [r2, r3]
 8009048:	2101      	movs	r1, #1
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff ff1e 	bl	8008e8c <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	3301      	adds	r3, #1
 8009054:	73fb      	strb	r3, [r7, #15]
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	2b07      	cmp	r3, #7
 800905a:	d9ef      	bls.n	800903c <OLED_ShowChar+0x44>
			OLED_Set_Pos(x,y+1);
 800905c:	79bb      	ldrb	r3, [r7, #6]
 800905e:	3301      	adds	r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff ff6e 	bl	8008f48 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
 8009070:	e00d      	b.n	800908e <OLED_ShowChar+0x96>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	011a      	lsls	r2, r3, #4
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	4413      	add	r3, r2
 800907a:	3308      	adds	r3, #8
 800907c:	4a07      	ldr	r2, [pc, #28]	; (800909c <OLED_ShowChar+0xa4>)
 800907e:	5cd3      	ldrb	r3, [r2, r3]
 8009080:	2101      	movs	r1, #1
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff ff02 	bl	8008e8c <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	3301      	adds	r3, #1
 800908c:	73fb      	strb	r3, [r7, #15]
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	2b07      	cmp	r3, #7
 8009092:	d9ee      	bls.n	8009072 <OLED_ShowChar+0x7a>
				OLED_Set_Pos(x,y+1);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8009094:	bf00      	nop
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	080099a4 	.word	0x080099a4

080090a0 <oled_pow>:
//m^n����
uint32_t oled_pow(uint8_t m,uint8_t n)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	460a      	mov	r2, r1
 80090aa:	71fb      	strb	r3, [r7, #7]
 80090ac:	4613      	mov	r3, r2
 80090ae:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80090b0:	2301      	movs	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 80090b4:	e004      	b.n	80090c0 <oled_pow+0x20>
 80090b6:	79fa      	ldrb	r2, [r7, #7]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	79bb      	ldrb	r3, [r7, #6]
 80090c2:	1e5a      	subs	r2, r3, #1
 80090c4:	71ba      	strb	r2, [r7, #6]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f5      	bne.n	80090b6 <oled_pow+0x16>
	return result;
 80090ca:	68fb      	ldr	r3, [r7, #12]
}				  
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <OLED_ShowNum>:
//len :���ֵ�λ��
//size:�����С
//mode:ģʽ	0,���ģʽ;1,����ģʽ
//num:��ֵ(0~4294967295);	 		  
void OLED_ShowNum(uint8_t x,uint8_t y,uint32_t num,uint8_t len,uint8_t size)
{         	
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	603a      	str	r2, [r7, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	4603      	mov	r3, r0
 80090e4:	71fb      	strb	r3, [r7, #7]
 80090e6:	460b      	mov	r3, r1
 80090e8:	71bb      	strb	r3, [r7, #6]
 80090ea:	4613      	mov	r3, r2
 80090ec:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
 80090f6:	e049      	b.n	800918c <OLED_ShowNum+0xb4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 80090f8:	797a      	ldrb	r2, [r7, #5]
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b2db      	uxtb	r3, r3
 8009104:	4619      	mov	r1, r3
 8009106:	200a      	movs	r0, #10
 8009108:	f7ff ffca 	bl	80090a0 <oled_pow>
 800910c:	4602      	mov	r2, r0
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	fbb3 f1f2 	udiv	r1, r3, r2
 8009114:	4b21      	ldr	r3, [pc, #132]	; (800919c <OLED_ShowNum+0xc4>)
 8009116:	fba3 2301 	umull	r2, r3, r3, r1
 800911a:	08da      	lsrs	r2, r3, #3
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	1aca      	subs	r2, r1, r3
 8009126:	4613      	mov	r3, r2
 8009128:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800912a:	7bbb      	ldrb	r3, [r7, #14]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d119      	bne.n	8009164 <OLED_ShowNum+0x8c>
 8009130:	7bfa      	ldrb	r2, [r7, #15]
 8009132:	797b      	ldrb	r3, [r7, #5]
 8009134:	3b01      	subs	r3, #1
 8009136:	429a      	cmp	r2, r3
 8009138:	da14      	bge.n	8009164 <OLED_ShowNum+0x8c>
		{
			if(temp==0)
 800913a:	7b7b      	ldrb	r3, [r7, #13]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10f      	bne.n	8009160 <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ');
 8009140:	7e3b      	ldrb	r3, [r7, #24]
 8009142:	085b      	lsrs	r3, r3, #1
 8009144:	b2db      	uxtb	r3, r3
 8009146:	7bfa      	ldrb	r2, [r7, #15]
 8009148:	fb12 f303 	smulbb	r3, r2, r3
 800914c:	b2da      	uxtb	r2, r3
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	4413      	add	r3, r2
 8009152:	b2db      	uxtb	r3, r3
 8009154:	79b9      	ldrb	r1, [r7, #6]
 8009156:	2220      	movs	r2, #32
 8009158:	4618      	mov	r0, r3
 800915a:	f7ff ff4d 	bl	8008ff8 <OLED_ShowChar>
				continue;
 800915e:	e012      	b.n	8009186 <OLED_ShowNum+0xae>
			}else enshow=1; 
 8009160:	2301      	movs	r3, #1
 8009162:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0'); 
 8009164:	7e3b      	ldrb	r3, [r7, #24]
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	b2db      	uxtb	r3, r3
 800916a:	7bfa      	ldrb	r2, [r7, #15]
 800916c:	fb12 f303 	smulbb	r3, r2, r3
 8009170:	b2da      	uxtb	r2, r3
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	4413      	add	r3, r2
 8009176:	b2d8      	uxtb	r0, r3
 8009178:	7b7b      	ldrb	r3, [r7, #13]
 800917a:	3330      	adds	r3, #48	; 0x30
 800917c:	b2da      	uxtb	r2, r3
 800917e:	79bb      	ldrb	r3, [r7, #6]
 8009180:	4619      	mov	r1, r3
 8009182:	f7ff ff39 	bl	8008ff8 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	3301      	adds	r3, #1
 800918a:	73fb      	strb	r3, [r7, #15]
 800918c:	7bfa      	ldrb	r2, [r7, #15]
 800918e:	797b      	ldrb	r3, [r7, #5]
 8009190:	429a      	cmp	r2, r3
 8009192:	d3b1      	bcc.n	80090f8 <OLED_ShowNum+0x20>
	}
} 
 8009194:	bf00      	nop
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	cccccccd 	.word	0xcccccccd

080091a0 <OLED_Init>:
} 


//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
 	 



 
  OLED_RST_Set();
 80091a4:	2201      	movs	r2, #1
 80091a6:	2180      	movs	r1, #128	; 0x80
 80091a8:	4847      	ldr	r0, [pc, #284]	; (80092c8 <OLED_Init+0x128>)
 80091aa:	f7f8 f9d7 	bl	800155c <HAL_GPIO_WritePin>
	delay_ms(100);
 80091ae:	2064      	movs	r0, #100	; 0x64
 80091b0:	f7ff f940 	bl	8008434 <delay_ms>
	OLED_RST_Clr();
 80091b4:	2200      	movs	r2, #0
 80091b6:	2180      	movs	r1, #128	; 0x80
 80091b8:	4843      	ldr	r0, [pc, #268]	; (80092c8 <OLED_Init+0x128>)
 80091ba:	f7f8 f9cf 	bl	800155c <HAL_GPIO_WritePin>
	delay_ms(200);
 80091be:	20c8      	movs	r0, #200	; 0xc8
 80091c0:	f7ff f938 	bl	8008434 <delay_ms>
	OLED_RST_Set(); 
 80091c4:	2201      	movs	r2, #1
 80091c6:	2180      	movs	r1, #128	; 0x80
 80091c8:	483f      	ldr	r0, [pc, #252]	; (80092c8 <OLED_Init+0x128>)
 80091ca:	f7f8 f9c7 	bl	800155c <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 80091ce:	2100      	movs	r1, #0
 80091d0:	20ae      	movs	r0, #174	; 0xae
 80091d2:	f7ff fe5b 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 80091d6:	2100      	movs	r1, #0
 80091d8:	2000      	movs	r0, #0
 80091da:	f7ff fe57 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 80091de:	2100      	movs	r1, #0
 80091e0:	2010      	movs	r0, #16
 80091e2:	f7ff fe53 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80091e6:	2100      	movs	r1, #0
 80091e8:	2040      	movs	r0, #64	; 0x40
 80091ea:	f7ff fe4f 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 80091ee:	2100      	movs	r1, #0
 80091f0:	2081      	movs	r0, #129	; 0x81
 80091f2:	f7ff fe4b 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 80091f6:	2100      	movs	r1, #0
 80091f8:	20cf      	movs	r0, #207	; 0xcf
 80091fa:	f7ff fe47 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 80091fe:	2100      	movs	r1, #0
 8009200:	20a1      	movs	r0, #161	; 0xa1
 8009202:	f7ff fe43 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 8009206:	2100      	movs	r1, #0
 8009208:	20c8      	movs	r0, #200	; 0xc8
 800920a:	f7ff fe3f 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 800920e:	2100      	movs	r1, #0
 8009210:	20a6      	movs	r0, #166	; 0xa6
 8009212:	f7ff fe3b 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8009216:	2100      	movs	r1, #0
 8009218:	20a8      	movs	r0, #168	; 0xa8
 800921a:	f7ff fe37 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 800921e:	2100      	movs	r1, #0
 8009220:	203f      	movs	r0, #63	; 0x3f
 8009222:	f7ff fe33 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 8009226:	2100      	movs	r1, #0
 8009228:	20d3      	movs	r0, #211	; 0xd3
 800922a:	f7ff fe2f 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 800922e:	2100      	movs	r1, #0
 8009230:	2000      	movs	r0, #0
 8009232:	f7ff fe2b 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 8009236:	2100      	movs	r1, #0
 8009238:	20d5      	movs	r0, #213	; 0xd5
 800923a:	f7ff fe27 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 800923e:	2100      	movs	r1, #0
 8009240:	2080      	movs	r0, #128	; 0x80
 8009242:	f7ff fe23 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8009246:	2100      	movs	r1, #0
 8009248:	20d9      	movs	r0, #217	; 0xd9
 800924a:	f7ff fe1f 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 800924e:	2100      	movs	r1, #0
 8009250:	20f1      	movs	r0, #241	; 0xf1
 8009252:	f7ff fe1b 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8009256:	2100      	movs	r1, #0
 8009258:	20da      	movs	r0, #218	; 0xda
 800925a:	f7ff fe17 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 800925e:	2100      	movs	r1, #0
 8009260:	2012      	movs	r0, #18
 8009262:	f7ff fe13 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8009266:	2100      	movs	r1, #0
 8009268:	20db      	movs	r0, #219	; 0xdb
 800926a:	f7ff fe0f 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 800926e:	2100      	movs	r1, #0
 8009270:	2040      	movs	r0, #64	; 0x40
 8009272:	f7ff fe0b 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8009276:	2100      	movs	r1, #0
 8009278:	2020      	movs	r0, #32
 800927a:	f7ff fe07 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 800927e:	2100      	movs	r1, #0
 8009280:	2002      	movs	r0, #2
 8009282:	f7ff fe03 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8009286:	2100      	movs	r1, #0
 8009288:	208d      	movs	r0, #141	; 0x8d
 800928a:	f7ff fdff 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 800928e:	2100      	movs	r1, #0
 8009290:	2014      	movs	r0, #20
 8009292:	f7ff fdfb 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8009296:	2100      	movs	r1, #0
 8009298:	20a4      	movs	r0, #164	; 0xa4
 800929a:	f7ff fdf7 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 800929e:	2100      	movs	r1, #0
 80092a0:	20a6      	movs	r0, #166	; 0xa6
 80092a2:	f7ff fdf3 	bl	8008e8c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 80092a6:	2100      	movs	r1, #0
 80092a8:	20af      	movs	r0, #175	; 0xaf
 80092aa:	f7ff fdef 	bl	8008e8c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 80092ae:	2100      	movs	r1, #0
 80092b0:	20af      	movs	r0, #175	; 0xaf
 80092b2:	f7ff fdeb 	bl	8008e8c <OLED_WR_Byte>
	OLED_Clear();
 80092b6:	f7ff fe71 	bl	8008f9c <OLED_Clear>
	OLED_Set_Pos(0,0); 	
 80092ba:	2100      	movs	r1, #0
 80092bc:	2000      	movs	r0, #0
 80092be:	f7ff fe43 	bl	8008f48 <OLED_Set_Pos>
}  
 80092c2:	bf00      	nop
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	58021000 	.word	0x58021000

080092cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <HAL_MspInit+0x30>)
 80092d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80092d8:	4a08      	ldr	r2, [pc, #32]	; (80092fc <HAL_MspInit+0x30>)
 80092da:	f043 0302 	orr.w	r3, r3, #2
 80092de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80092e2:	4b06      	ldr	r3, [pc, #24]	; (80092fc <HAL_MspInit+0x30>)
 80092e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	607b      	str	r3, [r7, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	58024400 	.word	0x58024400

08009300 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08e      	sub	sp, #56	; 0x38
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	609a      	str	r2, [r3, #8]
 8009314:	60da      	str	r2, [r3, #12]
 8009316:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a59      	ldr	r2, [pc, #356]	; (8009484 <HAL_ETH_MspInit+0x184>)
 800931e:	4293      	cmp	r3, r2
 8009320:	f040 80ab 	bne.w	800947a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009324:	4b58      	ldr	r3, [pc, #352]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009326:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800932a:	4a57      	ldr	r2, [pc, #348]	; (8009488 <HAL_ETH_MspInit+0x188>)
 800932c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009330:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009334:	4b54      	ldr	r3, [pc, #336]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800933a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800933e:	623b      	str	r3, [r7, #32]
 8009340:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009342:	4b51      	ldr	r3, [pc, #324]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009348:	4a4f      	ldr	r2, [pc, #316]	; (8009488 <HAL_ETH_MspInit+0x188>)
 800934a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800934e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009352:	4b4d      	ldr	r3, [pc, #308]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009360:	4b49      	ldr	r3, [pc, #292]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009366:	4a48      	ldr	r2, [pc, #288]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800936c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009370:	4b45      	ldr	r3, [pc, #276]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800937a:	61bb      	str	r3, [r7, #24]
 800937c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800937e:	4b42      	ldr	r3, [pc, #264]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009384:	4a40      	ldr	r2, [pc, #256]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009386:	f043 0304 	orr.w	r3, r3, #4
 800938a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800938e:	4b3e      	ldr	r3, [pc, #248]	; (8009488 <HAL_ETH_MspInit+0x188>)
 8009390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800939c:	4b3a      	ldr	r3, [pc, #232]	; (8009488 <HAL_ETH_MspInit+0x188>)
 800939e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093a2:	4a39      	ldr	r2, [pc, #228]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093a4:	f043 0301 	orr.w	r3, r3, #1
 80093a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80093ac:	4b36      	ldr	r3, [pc, #216]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	613b      	str	r3, [r7, #16]
 80093b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093ba:	4b33      	ldr	r3, [pc, #204]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093c0:	4a31      	ldr	r2, [pc, #196]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093c2:	f043 0302 	orr.w	r3, r3, #2
 80093c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80093ca:	4b2f      	ldr	r3, [pc, #188]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80093d8:	4b2b      	ldr	r3, [pc, #172]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093de:	4a2a      	ldr	r2, [pc, #168]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80093e8:	4b27      	ldr	r3, [pc, #156]	; (8009488 <HAL_ETH_MspInit+0x188>)
 80093ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	60bb      	str	r3, [r7, #8]
 80093f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80093f6:	2332      	movs	r3, #50	; 0x32
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093fa:	2302      	movs	r3, #2
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009402:	2300      	movs	r3, #0
 8009404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009406:	230b      	movs	r3, #11
 8009408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800940a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800940e:	4619      	mov	r1, r3
 8009410:	481e      	ldr	r0, [pc, #120]	; (800948c <HAL_ETH_MspInit+0x18c>)
 8009412:	f7f7 fef3 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009416:	2386      	movs	r3, #134	; 0x86
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800941a:	2302      	movs	r3, #2
 800941c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800941e:	2300      	movs	r3, #0
 8009420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009422:	2300      	movs	r3, #0
 8009424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009426:	230b      	movs	r3, #11
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800942a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800942e:	4619      	mov	r1, r3
 8009430:	4817      	ldr	r0, [pc, #92]	; (8009490 <HAL_ETH_MspInit+0x190>)
 8009432:	f7f7 fee3 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800943c:	2302      	movs	r3, #2
 800943e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009440:	2300      	movs	r3, #0
 8009442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009444:	2300      	movs	r3, #0
 8009446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009448:	230b      	movs	r3, #11
 800944a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800944c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009450:	4619      	mov	r1, r3
 8009452:	4810      	ldr	r0, [pc, #64]	; (8009494 <HAL_ETH_MspInit+0x194>)
 8009454:	f7f7 fed2 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009458:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800945e:	2302      	movs	r3, #2
 8009460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009462:	2300      	movs	r3, #0
 8009464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009466:	2300      	movs	r3, #0
 8009468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800946a:	230b      	movs	r3, #11
 800946c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800946e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009472:	4619      	mov	r1, r3
 8009474:	4808      	ldr	r0, [pc, #32]	; (8009498 <HAL_ETH_MspInit+0x198>)
 8009476:	f7f7 fec1 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800947a:	bf00      	nop
 800947c:	3738      	adds	r7, #56	; 0x38
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	40028000 	.word	0x40028000
 8009488:	58024400 	.word	0x58024400
 800948c:	58020800 	.word	0x58020800
 8009490:	58020000 	.word	0x58020000
 8009494:	58020400 	.word	0x58020400
 8009498:	58021800 	.word	0x58021800

0800949c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08c      	sub	sp, #48	; 0x30
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094a4:	f107 031c 	add.w	r3, r7, #28
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a37      	ldr	r2, [pc, #220]	; (8009598 <HAL_TIM_Base_MspInit+0xfc>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d136      	bne.n	800952c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80094be:	4b37      	ldr	r3, [pc, #220]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 80094c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094c4:	4a35      	ldr	r2, [pc, #212]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 80094c6:	f043 0302 	orr.w	r3, r3, #2
 80094ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80094ce:	4b33      	ldr	r3, [pc, #204]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 80094d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094d4:	f003 0302 	and.w	r3, r3, #2
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094dc:	4b2f      	ldr	r3, [pc, #188]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 80094de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094e2:	4a2e      	ldr	r2, [pc, #184]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 80094e4:	f043 0301 	orr.w	r3, r3, #1
 80094e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80094ec:	4b2b      	ldr	r3, [pc, #172]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 80094ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80094fa:	2340      	movs	r3, #64	; 0x40
 80094fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094fe:	2302      	movs	r3, #2
 8009500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009502:	2300      	movs	r3, #0
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009506:	2300      	movs	r3, #0
 8009508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800950a:	2302      	movs	r3, #2
 800950c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800950e:	f107 031c 	add.w	r3, r7, #28
 8009512:	4619      	mov	r1, r3
 8009514:	4822      	ldr	r0, [pc, #136]	; (80095a0 <HAL_TIM_Base_MspInit+0x104>)
 8009516:	f7f7 fe71 	bl	80011fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800951a:	2200      	movs	r2, #0
 800951c:	2100      	movs	r1, #0
 800951e:	201d      	movs	r0, #29
 8009520:	f7f7 fa05 	bl	800092e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009524:	201d      	movs	r0, #29
 8009526:	f7f7 fa1c 	bl	8000962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800952a:	e030      	b.n	800958e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM12)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1c      	ldr	r2, [pc, #112]	; (80095a4 <HAL_TIM_Base_MspInit+0x108>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d10f      	bne.n	8009556 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8009536:	4b19      	ldr	r3, [pc, #100]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 8009538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800953c:	4a17      	ldr	r2, [pc, #92]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 800953e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009542:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009546:	4b15      	ldr	r3, [pc, #84]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 8009548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800954c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	693b      	ldr	r3, [r7, #16]
}
 8009554:	e01b      	b.n	800958e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM13)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a13      	ldr	r2, [pc, #76]	; (80095a8 <HAL_TIM_Base_MspInit+0x10c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d116      	bne.n	800958e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009560:	4b0e      	ldr	r3, [pc, #56]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 8009562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009566:	4a0d      	ldr	r2, [pc, #52]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 8009568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800956c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <HAL_TIM_Base_MspInit+0x100>)
 8009572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800957e:	2200      	movs	r2, #0
 8009580:	2100      	movs	r1, #0
 8009582:	202c      	movs	r0, #44	; 0x2c
 8009584:	f7f7 f9d3 	bl	800092e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009588:	202c      	movs	r0, #44	; 0x2c
 800958a:	f7f7 f9ea 	bl	8000962 <HAL_NVIC_EnableIRQ>
}
 800958e:	bf00      	nop
 8009590:	3730      	adds	r7, #48	; 0x30
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	40000400 	.word	0x40000400
 800959c:	58024400 	.word	0x58024400
 80095a0:	58020000 	.word	0x58020000
 80095a4:	40001800 	.word	0x40001800
 80095a8:	40001c00 	.word	0x40001c00

080095ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b4:	f107 030c 	add.w	r3, r7, #12
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	605a      	str	r2, [r3, #4]
 80095be:	609a      	str	r2, [r3, #8]
 80095c0:	60da      	str	r2, [r3, #12]
 80095c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a13      	ldr	r2, [pc, #76]	; (8009618 <HAL_TIM_MspPostInit+0x6c>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d11f      	bne.n	800960e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095ce:	4b13      	ldr	r3, [pc, #76]	; (800961c <HAL_TIM_MspPostInit+0x70>)
 80095d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095d4:	4a11      	ldr	r2, [pc, #68]	; (800961c <HAL_TIM_MspPostInit+0x70>)
 80095d6:	f043 0302 	orr.w	r3, r3, #2
 80095da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80095de:	4b0f      	ldr	r3, [pc, #60]	; (800961c <HAL_TIM_MspPostInit+0x70>)
 80095e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095e4:	f003 0302 	and.w	r3, r3, #2
 80095e8:	60bb      	str	r3, [r7, #8]
 80095ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration    
    PB15     ------> TIM12_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80095ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095f2:	2302      	movs	r3, #2
 80095f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095fa:	2300      	movs	r3, #0
 80095fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80095fe:	2302      	movs	r3, #2
 8009600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009602:	f107 030c 	add.w	r3, r7, #12
 8009606:	4619      	mov	r1, r3
 8009608:	4805      	ldr	r0, [pc, #20]	; (8009620 <HAL_TIM_MspPostInit+0x74>)
 800960a:	f7f7 fdf7 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800960e:	bf00      	nop
 8009610:	3720      	adds	r7, #32
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	40001800 	.word	0x40001800
 800961c:	58024400 	.word	0x58024400
 8009620:	58020400 	.word	0x58020400

08009624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	; 0x28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800962c:	f107 0314 	add.w	r3, r7, #20
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	609a      	str	r2, [r3, #8]
 8009638:	60da      	str	r2, [r3, #12]
 800963a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a1a      	ldr	r2, [pc, #104]	; (80096ac <HAL_UART_MspInit+0x88>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d12e      	bne.n	80096a4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8009646:	4b1a      	ldr	r3, [pc, #104]	; (80096b0 <HAL_UART_MspInit+0x8c>)
 8009648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800964c:	4a18      	ldr	r2, [pc, #96]	; (80096b0 <HAL_UART_MspInit+0x8c>)
 800964e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009652:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009656:	4b16      	ldr	r3, [pc, #88]	; (80096b0 <HAL_UART_MspInit+0x8c>)
 8009658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800965c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009664:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <HAL_UART_MspInit+0x8c>)
 8009666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800966a:	4a11      	ldr	r2, [pc, #68]	; (80096b0 <HAL_UART_MspInit+0x8c>)
 800966c:	f043 0308 	orr.w	r3, r3, #8
 8009670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009674:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <HAL_UART_MspInit+0x8c>)
 8009676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	60fb      	str	r3, [r7, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8009682:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009688:	2302      	movs	r3, #2
 800968a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009690:	2300      	movs	r3, #0
 8009692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8009694:	2307      	movs	r3, #7
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	4619      	mov	r1, r3
 800969e:	4805      	ldr	r0, [pc, #20]	; (80096b4 <HAL_UART_MspInit+0x90>)
 80096a0:	f7f7 fdac 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80096a4:	bf00      	nop
 80096a6:	3728      	adds	r7, #40	; 0x28
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	40004800 	.word	0x40004800
 80096b0:	58024400 	.word	0x58024400
 80096b4:	58020c00 	.word	0x58020c00

080096b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b08a      	sub	sp, #40	; 0x28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c0:	f107 0314 	add.w	r3, r7, #20
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	605a      	str	r2, [r3, #4]
 80096ca:	609a      	str	r2, [r3, #8]
 80096cc:	60da      	str	r2, [r3, #12]
 80096ce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a21      	ldr	r2, [pc, #132]	; (800975c <HAL_PCD_MspInit+0xa4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d13b      	bne.n	8009752 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096da:	4b21      	ldr	r3, [pc, #132]	; (8009760 <HAL_PCD_MspInit+0xa8>)
 80096dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096e0:	4a1f      	ldr	r2, [pc, #124]	; (8009760 <HAL_PCD_MspInit+0xa8>)
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096ea:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <HAL_PCD_MspInit+0xa8>)
 80096ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	613b      	str	r3, [r7, #16]
 80096f6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80096f8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80096fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096fe:	2302      	movs	r3, #2
 8009700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009706:	2300      	movs	r3, #0
 8009708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800970a:	230a      	movs	r3, #10
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800970e:	f107 0314 	add.w	r3, r7, #20
 8009712:	4619      	mov	r1, r3
 8009714:	4813      	ldr	r0, [pc, #76]	; (8009764 <HAL_PCD_MspInit+0xac>)
 8009716:	f7f7 fd71 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800971a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800971e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009720:	2300      	movs	r3, #0
 8009722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009724:	2300      	movs	r3, #0
 8009726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009728:	f107 0314 	add.w	r3, r7, #20
 800972c:	4619      	mov	r1, r3
 800972e:	480d      	ldr	r0, [pc, #52]	; (8009764 <HAL_PCD_MspInit+0xac>)
 8009730:	f7f7 fd64 	bl	80011fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009734:	4b0a      	ldr	r3, [pc, #40]	; (8009760 <HAL_PCD_MspInit+0xa8>)
 8009736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800973a:	4a09      	ldr	r2, [pc, #36]	; (8009760 <HAL_PCD_MspInit+0xa8>)
 800973c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009740:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <HAL_PCD_MspInit+0xa8>)
 8009746:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800974a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8009752:	bf00      	nop
 8009754:	3728      	adds	r7, #40	; 0x28
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	40080000 	.word	0x40080000
 8009760:	58024400 	.word	0x58024400
 8009764:	58020000 	.word	0x58020000

08009768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800976c:	bf00      	nop
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009776:	b480      	push	{r7}
 8009778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800977a:	e7fe      	b.n	800977a <HardFault_Handler+0x4>

0800977c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009780:	e7fe      	b.n	8009780 <MemManage_Handler+0x4>

08009782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009782:	b480      	push	{r7}
 8009784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009786:	e7fe      	b.n	8009786 <BusFault_Handler+0x4>

08009788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800978c:	e7fe      	b.n	800978c <UsageFault_Handler+0x4>

0800978e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800978e:	b480      	push	{r7}
 8009790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009792:	bf00      	nop
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80097a0:	bf00      	nop
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80097aa:	b480      	push	{r7}
 80097ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80097ae:	bf00      	nop
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80097bc:	f7f6 ff7a 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80097c0:	bf00      	nop
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80097c8:	4802      	ldr	r0, [pc, #8]	; (80097d4 <TIM3_IRQHandler+0x10>)
 80097ca:	f7fa fc45 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80097ce:	bf00      	nop
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	240005a0 	.word	0x240005a0

080097d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80097dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80097e0:	f7f7 fed6 	bl	8001590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80097e4:	bf00      	nop
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80097ec:	4802      	ldr	r0, [pc, #8]	; (80097f8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80097ee:	f7fa fc33 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80097f2:	bf00      	nop
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	240005e0 	.word	0x240005e0

080097fc <NVIC_Configuration>:
//��Ȩ���У�����ؾ���
//Copyright(C) ����ԭ�� 2009-2019
//All rights reserved
//********************************************************************************  
void NVIC_Configuration(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0


    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8009800:	2005      	movs	r0, #5
 8009802:	f7f7 f889 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>


}
 8009806:	bf00      	nop
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009810:	4b29      	ldr	r3, [pc, #164]	; (80098b8 <SystemInit+0xac>)
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009816:	4a28      	ldr	r2, [pc, #160]	; (80098b8 <SystemInit+0xac>)
 8009818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800981c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009820:	4b26      	ldr	r3, [pc, #152]	; (80098bc <SystemInit+0xb0>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a25      	ldr	r2, [pc, #148]	; (80098bc <SystemInit+0xb0>)
 8009826:	f043 0301 	orr.w	r3, r3, #1
 800982a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800982c:	4b23      	ldr	r3, [pc, #140]	; (80098bc <SystemInit+0xb0>)
 800982e:	2200      	movs	r2, #0
 8009830:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009832:	4b22      	ldr	r3, [pc, #136]	; (80098bc <SystemInit+0xb0>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	4921      	ldr	r1, [pc, #132]	; (80098bc <SystemInit+0xb0>)
 8009838:	4b21      	ldr	r3, [pc, #132]	; (80098c0 <SystemInit+0xb4>)
 800983a:	4013      	ands	r3, r2
 800983c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800983e:	4b1f      	ldr	r3, [pc, #124]	; (80098bc <SystemInit+0xb0>)
 8009840:	2200      	movs	r2, #0
 8009842:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009844:	4b1d      	ldr	r3, [pc, #116]	; (80098bc <SystemInit+0xb0>)
 8009846:	2200      	movs	r2, #0
 8009848:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800984a:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <SystemInit+0xb0>)
 800984c:	2200      	movs	r2, #0
 800984e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8009850:	4b1a      	ldr	r3, [pc, #104]	; (80098bc <SystemInit+0xb0>)
 8009852:	2200      	movs	r2, #0
 8009854:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8009856:	4b19      	ldr	r3, [pc, #100]	; (80098bc <SystemInit+0xb0>)
 8009858:	2200      	movs	r2, #0
 800985a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800985c:	4b17      	ldr	r3, [pc, #92]	; (80098bc <SystemInit+0xb0>)
 800985e:	2200      	movs	r2, #0
 8009860:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009862:	4b16      	ldr	r3, [pc, #88]	; (80098bc <SystemInit+0xb0>)
 8009864:	2200      	movs	r2, #0
 8009866:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8009868:	4b14      	ldr	r3, [pc, #80]	; (80098bc <SystemInit+0xb0>)
 800986a:	2200      	movs	r2, #0
 800986c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <SystemInit+0xb0>)
 8009870:	2200      	movs	r2, #0
 8009872:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8009874:	4b11      	ldr	r3, [pc, #68]	; (80098bc <SystemInit+0xb0>)
 8009876:	2200      	movs	r2, #0
 8009878:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <SystemInit+0xb0>)
 800987c:	2200      	movs	r2, #0
 800987e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009880:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <SystemInit+0xb0>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a0d      	ldr	r2, [pc, #52]	; (80098bc <SystemInit+0xb0>)
 8009886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800988a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800988c:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <SystemInit+0xb0>)
 800988e:	2200      	movs	r2, #0
 8009890:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009892:	4b0c      	ldr	r3, [pc, #48]	; (80098c4 <SystemInit+0xb8>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <SystemInit+0xbc>)
 8009898:	4013      	ands	r3, r2
 800989a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989e:	d202      	bcs.n	80098a6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80098a0:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <SystemInit+0xc0>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80098a6:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <SystemInit+0xac>)
 80098a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098ac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80098ae:	bf00      	nop
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	e000ed00 	.word	0xe000ed00
 80098bc:	58024400 	.word	0x58024400
 80098c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80098c4:	5c001000 	.word	0x5c001000
 80098c8:	ffff0000 	.word	0xffff0000
 80098cc:	51008108 	.word	0x51008108

080098d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80098d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80098d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80098d6:	e003      	b.n	80098e0 <LoopCopyDataInit>

080098d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80098da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80098dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80098de:	3104      	adds	r1, #4

080098e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80098e0:	480b      	ldr	r0, [pc, #44]	; (8009910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80098e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80098e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80098e8:	d3f6      	bcc.n	80098d8 <CopyDataInit>
  ldr  r2, =_sbss
 80098ea:	4a0b      	ldr	r2, [pc, #44]	; (8009918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80098ec:	e002      	b.n	80098f4 <LoopFillZerobss>

080098ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80098ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80098f0:	f842 3b04 	str.w	r3, [r2], #4

080098f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80098f4:	4b09      	ldr	r3, [pc, #36]	; (800991c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80098f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80098f8:	d3f9      	bcc.n	80098ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80098fa:	f7ff ff87 	bl	800980c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80098fe:	f000 f811 	bl	8009924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009902:	f7fe fdcd 	bl	80084a0 <main>
  bx  lr    
 8009906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009908:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800990c:	08009fb4 	.word	0x08009fb4
  ldr  r0, =_sdata
 8009910:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8009914:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8009918:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 800991c:	24000704 	.word	0x24000704

08009920 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009920:	e7fe      	b.n	8009920 <ADC3_IRQHandler>
	...

08009924 <__libc_init_array>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	4e0d      	ldr	r6, [pc, #52]	; (800995c <__libc_init_array+0x38>)
 8009928:	4c0d      	ldr	r4, [pc, #52]	; (8009960 <__libc_init_array+0x3c>)
 800992a:	1ba4      	subs	r4, r4, r6
 800992c:	10a4      	asrs	r4, r4, #2
 800992e:	2500      	movs	r5, #0
 8009930:	42a5      	cmp	r5, r4
 8009932:	d109      	bne.n	8009948 <__libc_init_array+0x24>
 8009934:	4e0b      	ldr	r6, [pc, #44]	; (8009964 <__libc_init_array+0x40>)
 8009936:	4c0c      	ldr	r4, [pc, #48]	; (8009968 <__libc_init_array+0x44>)
 8009938:	f000 f820 	bl	800997c <_init>
 800993c:	1ba4      	subs	r4, r4, r6
 800993e:	10a4      	asrs	r4, r4, #2
 8009940:	2500      	movs	r5, #0
 8009942:	42a5      	cmp	r5, r4
 8009944:	d105      	bne.n	8009952 <__libc_init_array+0x2e>
 8009946:	bd70      	pop	{r4, r5, r6, pc}
 8009948:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800994c:	4798      	blx	r3
 800994e:	3501      	adds	r5, #1
 8009950:	e7ee      	b.n	8009930 <__libc_init_array+0xc>
 8009952:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009956:	4798      	blx	r3
 8009958:	3501      	adds	r5, #1
 800995a:	e7f2      	b.n	8009942 <__libc_init_array+0x1e>
 800995c:	08009fac 	.word	0x08009fac
 8009960:	08009fac 	.word	0x08009fac
 8009964:	08009fac 	.word	0x08009fac
 8009968:	08009fb0 	.word	0x08009fb0

0800996c <memset>:
 800996c:	4402      	add	r2, r0
 800996e:	4603      	mov	r3, r0
 8009970:	4293      	cmp	r3, r2
 8009972:	d100      	bne.n	8009976 <memset+0xa>
 8009974:	4770      	bx	lr
 8009976:	f803 1b01 	strb.w	r1, [r3], #1
 800997a:	e7f9      	b.n	8009970 <memset+0x4>

0800997c <_init>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr

08009988 <_fini>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr

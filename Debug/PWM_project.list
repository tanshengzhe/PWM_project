
PWM_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009168  08009168  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009170  08009170  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009188  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080091e8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005e8  240000d0  08009248  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240006b8  08009248  000206b8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022409  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000031e2  00000000  00000000  00042507  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001458  00000000  00000000  000456f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001330  00000000  00000000  00046b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00037640  00000000  00000000  00047e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001091f  00000000  00000000  0007f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001649ff  00000000  00000000  0008fdd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001f47d6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000057bc  00000000  00000000  001f4854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009130 	.word	0x08009130

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009130 	.word	0x08009130

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f99b 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f001 fea5 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f008 fa61 	bl	8008af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	08009158 	.word	0x08009158
 8000640:	24000008 	.word	0x24000008
 8000644:	2400000c 	.word	0x2400000c

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f983 	bl	800097e <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f94d 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000008 	.word	0x24000008
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	240000fc 	.word	0x240000fc

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	240000fc 	.word	0x240000fc

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffee 	bl	80006dc <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Delay+0x40>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffde 	bl	80006dc <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000004 	.word	0x24000004

08000738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetREVID+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	5c001000 	.word	0x5c001000

08000750 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	604b      	str	r3, [r1, #4]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	58000400 	.word	0x58000400

08000778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000788:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <__NVIC_SetPriorityGrouping+0x40>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <__NVIC_SetPriorityGrouping+0x44>)
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x40>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	05fa0000 	.word	0x05fa0000

080007c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <__NVIC_GetPriorityGrouping+0x18>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	f003 0307 	and.w	r3, r3, #7
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db0b      	blt.n	8000806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	f003 021f 	and.w	r2, r3, #31
 80007f4:	4907      	ldr	r1, [pc, #28]	; (8000814 <__NVIC_EnableIRQ+0x38>)
 80007f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fa:	095b      	lsrs	r3, r3, #5
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000828:	2b00      	cmp	r3, #0
 800082a:	db0a      	blt.n	8000842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	b2da      	uxtb	r2, r3
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <__NVIC_SetPriority+0x4c>)
 8000832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000836:	0112      	lsls	r2, r2, #4
 8000838:	b2d2      	uxtb	r2, r2
 800083a:	440b      	add	r3, r1
 800083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000840:	e00a      	b.n	8000858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <__NVIC_SetPriority+0x50>)
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	f003 030f 	and.w	r3, r3, #15
 800084e:	3b04      	subs	r3, #4
 8000850:	0112      	lsls	r2, r2, #4
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	440b      	add	r3, r1
 8000856:	761a      	strb	r2, [r3, #24]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e100 	.word	0xe000e100
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800086c:	b480      	push	{r7}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f1c3 0307 	rsb	r3, r3, #7
 8000886:	2b04      	cmp	r3, #4
 8000888:	bf28      	it	cs
 800088a:	2304      	movcs	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3304      	adds	r3, #4
 8000892:	2b06      	cmp	r3, #6
 8000894:	d902      	bls.n	800089c <NVIC_EncodePriority+0x30>
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3b03      	subs	r3, #3
 800089a:	e000      	b.n	800089e <NVIC_EncodePriority+0x32>
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43da      	mvns	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	401a      	ands	r2, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b4:	f04f 31ff 	mov.w	r1, #4294967295
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43d9      	mvns	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c4:	4313      	orrs	r3, r2
         );
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3724      	adds	r7, #36	; 0x24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff8e 	bl	8000818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff29 	bl	8000778 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800093c:	f7ff ff40 	bl	80007c0 <__NVIC_GetPriorityGrouping>
 8000940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	68b9      	ldr	r1, [r7, #8]
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f7ff ff90 	bl	800086c <NVIC_EncodePriority>
 800094c:	4602      	mov	r2, r0
 800094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff5f 	bl	8000818 <__NVIC_SetPriority>
}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff33 	bl	80007dc <__NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffa4 	bl	80008d4 <SysTick_Config>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e0c6      	b.n	8000b38 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f008 f8b8 	bl	8008b28 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2223      	movs	r2, #35	; 0x23
 80009bc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b60      	ldr	r3, [pc, #384]	; (8000b40 <HAL_ETH_Init+0x1a8>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c4:	4a5e      	ldr	r2, [pc, #376]	; (8000b40 <HAL_ETH_Init+0x1a8>)
 80009c6:	f043 0302 	orr.w	r3, r3, #2
 80009ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ce:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <HAL_ETH_Init+0x1a8>)
 80009d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d103      	bne.n	80009ec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff feb3 	bl	8000750 <HAL_SYSCFG_ETHInterfaceSelect>
 80009ea:	e003      	b.n	80009f4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80009ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009f0:	f7ff feae 	bl	8000750 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a0c:	f7ff fe66 	bl	80006dc <HAL_GetTick>
 8000a10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000a12:	e00f      	b.n	8000a34 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000a14:	f7ff fe62 	bl	80006dc <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a22:	d907      	bls.n	8000a34 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	22e0      	movs	r2, #224	; 0xe0
 8000a2e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e081      	b.n	8000b38 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1e6      	bne.n	8000a14 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 fac0 	bl	8000fcc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000a4c:	f001 fde2 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8000a50:	4602      	mov	r2, r0
 8000a52:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <HAL_ETH_Init+0x1ac>)
 8000a54:	fba3 2302 	umull	r2, r3, r3, r2
 8000a58:	0c9a      	lsrs	r2, r3, #18
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3a01      	subs	r2, #1
 8000a60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 fa13 	bl	8000e90 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a80:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a84:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d007      	beq.n	8000aa2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2201      	movs	r2, #1
 8000a96:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	22e0      	movs	r2, #224	; 0xe0
 8000a9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e04a      	b.n	8000b38 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	f241 1308 	movw	r3, #4360	; 0x1108
 8000aaa:	4413      	add	r3, r2
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <HAL_ETH_Init+0x1b0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6952      	ldr	r2, [r2, #20]
 8000ab6:	0052      	lsls	r2, r2, #1
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	6809      	ldr	r1, [r1, #0]
 8000abc:	431a      	orrs	r2, r3
 8000abe:	f241 1308 	movw	r3, #4360	; 0x1108
 8000ac2:	440b      	add	r3, r1
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 fad8 	bl	800107c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 fb1c 	bl	800110a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	3305      	adds	r3, #5
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	021a      	lsls	r2, r3, #8
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	3303      	adds	r3, #3
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	061a      	lsls	r2, r3, #24
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	3302      	adds	r3, #2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	041b      	lsls	r3, r3, #16
 8000b04:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000b1e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000b20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2210      	movs	r2, #16
 8000b34:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58024400 	.word	0x58024400
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	ffff8001 	.word	0xffff8001

08000b4c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8000b5e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8000b66:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	7b1b      	ldrb	r3, [r3, #12]
 8000b6c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8000b6e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	7b5b      	ldrb	r3, [r3, #13]
 8000b74:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000b76:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	7b9b      	ldrb	r3, [r3, #14]
 8000b7c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8000b7e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	7bdb      	ldrb	r3, [r3, #15]
 8000b84:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000b86:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	7c12      	ldrb	r2, [r2, #16]
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d102      	bne.n	8000b96 <ETH_SetMACConfig+0x4a>
 8000b90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b94:	e000      	b.n	8000b98 <ETH_SetMACConfig+0x4c>
 8000b96:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000b98:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	7c52      	ldrb	r2, [r2, #17]
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d102      	bne.n	8000ba8 <ETH_SetMACConfig+0x5c>
 8000ba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ba6:	e000      	b.n	8000baa <ETH_SetMACConfig+0x5e>
 8000ba8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000baa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	7c9b      	ldrb	r3, [r3, #18]
 8000bb0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000bb2:	431a      	orrs	r2, r3
                                macconf->Speed |
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8000bb8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8000bbe:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	7f1b      	ldrb	r3, [r3, #28]
 8000bc4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8000bc6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	7f5b      	ldrb	r3, [r3, #29]
 8000bcc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8000bce:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	7f92      	ldrb	r2, [r2, #30]
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	d102      	bne.n	8000bde <ETH_SetMACConfig+0x92>
 8000bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bdc:	e000      	b.n	8000be0 <ETH_SetMACConfig+0x94>
 8000bde:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8000be0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	7fdb      	ldrb	r3, [r3, #31]
 8000be6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8000be8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	d102      	bne.n	8000bfa <ETH_SetMACConfig+0xae>
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	e000      	b.n	8000bfc <ETH_SetMACConfig+0xb0>
 8000bfa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8000bfc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8000c02:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c0a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8000c0c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b56      	ldr	r3, [pc, #344]	; (8000d78 <ETH_SetMACConfig+0x22c>)
 8000c1e:	4013      	ands	r3, r2
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c38:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8000c42:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000c4a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000c4c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	d102      	bne.n	8000c5e <ETH_SetMACConfig+0x112>
 8000c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c5c:	e000      	b.n	8000c60 <ETH_SetMACConfig+0x114>
 8000c5e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8000c60:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <ETH_SetMACConfig+0x230>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	68f9      	ldr	r1, [r7, #12]
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <ETH_SetMACConfig+0x234>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	68f9      	ldr	r1, [r7, #12]
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000ca8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000cae:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d101      	bne.n	8000cbe <ETH_SetMACConfig+0x172>
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	e000      	b.n	8000cc0 <ETH_SetMACConfig+0x174>
 8000cbe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8000cc0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000cd2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8000ce8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000cf0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cfe:	f023 0103 	bic.w	r1, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8000d16:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d101      	bne.n	8000d3a <ETH_SetMACConfig+0x1ee>
 8000d36:	2240      	movs	r2, #64	; 0x40
 8000d38:	e000      	b.n	8000d3c <ETH_SetMACConfig+0x1f0>
 8000d3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8000d3c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000d44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8000d46:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8000d4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8000d5c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	00048083 	.word	0x00048083
 8000d7c:	c0f88000 	.word	0xc0f88000
 8000d80:	fffffef0 	.word	0xfffffef0

08000d84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <ETH_SetDMAConfig+0xf8>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	6809      	ldr	r1, [r1, #0]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8000daa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	791b      	ldrb	r3, [r3, #4]
 8000db0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000db6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	7b1b      	ldrb	r3, [r3, #12]
 8000dbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f241 0304 	movw	r3, #4100	; 0x1004
 8000dca:	4413      	add	r3, r2
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <ETH_SetDMAConfig+0xfc>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6811      	ldr	r1, [r2, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	f241 0304 	movw	r3, #4100	; 0x1004
 8000dde:	440b      	add	r3, r1
 8000de0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	7b5b      	ldrb	r3, [r3, #13]
 8000de6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <ETH_SetDMAConfig+0x100>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6811      	ldr	r1, [r2, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8000e0a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	7d1b      	ldrb	r3, [r3, #20]
 8000e14:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e16:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	7f5b      	ldrb	r3, [r3, #29]
 8000e1c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f241 1304 	movw	r3, #4356	; 0x1104
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <ETH_SetDMAConfig+0x104>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	6811      	ldr	r1, [r2, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8000e3e:	440b      	add	r3, r1
 8000e40:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	7f1b      	ldrb	r3, [r3, #28]
 8000e46:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	f241 1308 	movw	r3, #4360	; 0x1108
 8000e58:	4413      	add	r3, r2
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <ETH_SetDMAConfig+0x108>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6811      	ldr	r1, [r2, #0]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	431a      	orrs	r2, r3
 8000e68:	f241 1308 	movw	r3, #4360	; 0x1108
 8000e6c:	440b      	add	r3, r1
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	ffff87fd 	.word	0xffff87fd
 8000e80:	ffff2ffe 	.word	0xffff2ffe
 8000e84:	fffec000 	.word	0xfffec000
 8000e88:	ffc0efef 	.word	0xffc0efef
 8000e8c:	7fc0ffff 	.word	0x7fc0ffff

08000e90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0a4      	sub	sp, #144	; 0x90
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000ee8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8000f12:	2300      	movs	r3, #0
 8000f14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8000f22:	2301      	movs	r3, #1
 8000f24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000f28:	2320      	movs	r3, #32
 8000f2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000f3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fde6 	bl	8000b4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000f9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000fb0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fee1 	bl	8000d84 <ETH_SetDMAConfig>
}
 8000fc2:	bf00      	nop
 8000fc4:	3790      	adds	r7, #144	; 0x90
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000fe6:	f001 fb15 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8000fea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d908      	bls.n	8001006 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4a1d      	ldr	r2, [pc, #116]	; (800106c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d804      	bhi.n	8001006 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e027      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d908      	bls.n	8001020 <ETH_MAC_MDIO_ClkConfig+0x54>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d804      	bhi.n	8001020 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e01a      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d903      	bls.n	8001030 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d911      	bls.n	8001054 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d908      	bls.n	800104a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d804      	bhi.n	800104a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e005      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e000      	b.n	8001056 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001054:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	01312cff 	.word	0x01312cff
 800106c:	02160ebf 	.word	0x02160ebf
 8001070:	039386ff 	.word	0x039386ff
 8001074:	05f5e0ff 	.word	0x05f5e0ff
 8001078:	08f0d17f 	.word	0x08f0d17f

0800107c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e01d      	b.n	80010c6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	3206      	adds	r2, #6
 80010bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	d9de      	bls.n	800108a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f241 132c 	movw	r3, #4396	; 0x112c
 80010da:	4413      	add	r3, r2
 80010dc:	2203      	movs	r2, #3
 80010de:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68d9      	ldr	r1, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f241 1314 	movw	r3, #4372	; 0x1114
 80010ec:	4413      	add	r3, r2
 80010ee:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80010fc:	601a      	str	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800110a:	b480      	push	{r7}
 800110c:	b085      	sub	sp, #20
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	e024      	b.n	8001162 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6919      	ldr	r1, [r3, #16]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	330a      	adds	r3, #10
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d9d7      	bls.n	8001118 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f241 1330 	movw	r3, #4400	; 0x1130
 800118e:	4413      	add	r3, r2
 8001190:	2203      	movs	r2, #3
 8001192:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6919      	ldr	r1, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	f241 131c 	movw	r3, #4380	; 0x111c
 80011a0:	4413      	add	r3, r2
 80011a2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	f241 1328 	movw	r3, #4392	; 0x1128
 80011b4:	4413      	add	r3, r2
 80011b6:	6019      	str	r1, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011d2:	4b89      	ldr	r3, [pc, #548]	; (80013f8 <HAL_GPIO_Init+0x234>)
 80011d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011d6:	e194      	b.n	8001502 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8186 	beq.w	80014fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x3c>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	69b9      	ldr	r1, [r7, #24]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d00b      	beq.n	800129c <HAL_GPIO_Init+0xd8>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d007      	beq.n	800129c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001290:	2b11      	cmp	r3, #17
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b12      	cmp	r3, #18
 800129a:	d130      	bne.n	80012fe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d2:	2201      	movs	r2, #1
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	f003 0201 	and.w	r2, r3, #1
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80e0 	beq.w	80014fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x238>)
 800133e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001342:	4a2e      	ldr	r2, [pc, #184]	; (80013fc <HAL_GPIO_Init+0x238>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_GPIO_Init+0x238>)
 800134e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135a:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x23c>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_GPIO_Init+0x240>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d052      	beq.n	800142c <HAL_GPIO_Init+0x268>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_GPIO_Init+0x244>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d031      	beq.n	80013f2 <HAL_GPIO_Init+0x22e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_GPIO_Init+0x248>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d02b      	beq.n	80013ee <HAL_GPIO_Init+0x22a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x24c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d025      	beq.n	80013ea <HAL_GPIO_Init+0x226>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <HAL_GPIO_Init+0x250>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x222>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_GPIO_Init+0x254>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d019      	beq.n	80013e2 <HAL_GPIO_Init+0x21e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a1a      	ldr	r2, [pc, #104]	; (800141c <HAL_GPIO_Init+0x258>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_GPIO_Init+0x25c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x260>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_GPIO_Init+0x264>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x20e>
 80013ce:	2309      	movs	r3, #9
 80013d0:	e02d      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013d2:	230a      	movs	r3, #10
 80013d4:	e02b      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013d6:	2308      	movs	r3, #8
 80013d8:	e029      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013da:	2307      	movs	r3, #7
 80013dc:	e027      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013de:	2306      	movs	r3, #6
 80013e0:	e025      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e023      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e021      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e01f      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e01d      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01b      	b.n	800142e <HAL_GPIO_Init+0x26a>
 80013f6:	bf00      	nop
 80013f8:	58000080 	.word	0x58000080
 80013fc:	58024400 	.word	0x58024400
 8001400:	58000400 	.word	0x58000400
 8001404:	58020000 	.word	0x58020000
 8001408:	58020400 	.word	0x58020400
 800140c:	58020800 	.word	0x58020800
 8001410:	58020c00 	.word	0x58020c00
 8001414:	58021000 	.word	0x58021000
 8001418:	58021400 	.word	0x58021400
 800141c:	58021800 	.word	0x58021800
 8001420:	58021c00 	.word	0x58021c00
 8001424:	58022000 	.word	0x58022000
 8001428:	58022400 	.word	0x58022400
 800142c:	2300      	movs	r3, #0
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143e:	4938      	ldr	r1, [pc, #224]	; (8001520 <HAL_GPIO_Init+0x35c>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	3301      	adds	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	f47f ae63 	bne.w	80011d8 <HAL_GPIO_Init+0x14>
  }
}
 8001512:	bf00      	nop
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	58000400 	.word	0x58000400

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001558:	b08f      	sub	sp, #60	; 0x3c
 800155a:	af0a      	add	r7, sp, #40	; 0x28
 800155c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e116      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f007 fc8c 	bl	8008ea0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 fc76 	bl	8007e98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	687e      	ldr	r6, [r7, #4]
 80015b4:	466d      	mov	r5, sp
 80015b6:	f106 0410 	add.w	r4, r6, #16
 80015ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ca:	1d33      	adds	r3, r6, #4
 80015cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ce:	6838      	ldr	r0, [r7, #0]
 80015d0:	f006 fc00 	bl	8007dd4 <USB_CoreInit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0d7      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 fc64 	bl	8007eba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e04a      	b.n	800168e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	333d      	adds	r3, #61	; 0x3d
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	333c      	adds	r3, #60	; 0x3c
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	b298      	uxth	r0, r3
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3342      	adds	r3, #66	; 0x42
 8001634:	4602      	mov	r2, r0
 8001636:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	333f      	adds	r3, #63	; 0x3f
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3344      	adds	r3, #68	; 0x44
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3348      	adds	r3, #72	; 0x48
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3350      	adds	r3, #80	; 0x50
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	d3af      	bcc.n	80015f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e044      	b.n	8001728 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3b5      	bcc.n	800169e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	687e      	ldr	r6, [r7, #4]
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001750:	1d33      	adds	r3, r6, #4
 8001752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f006 fbdb 	bl	8007f10 <USB_DevInit>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e014      	b.n	8001796 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2b01      	cmp	r3, #1
 8001782:	d102      	bne.n	800178a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f80b 	bl	80017a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f006 fd8b 	bl	80082aa <USB_DevDisconnect>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	10000003 	.word	0x10000003

080017e8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d008      	beq.n	800180e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d001      	beq.n	800180e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e01d      	b.n	800184a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	490f      	ldr	r1, [pc, #60]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181e:	f7fe ff5d 	bl	80006dc <HAL_GetTick>
 8001822:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001824:	e009      	b.n	800183a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8001826:	f7fe ff59 	bl	80006dc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001834:	d901      	bls.n	800183a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e007      	b.n	800184a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_PWREx_ConfigSupply+0x6c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001846:	d1ee      	bne.n	8001826 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	58024800 	.word	0x58024800

08001858 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	58024800 	.word	0x58024800

08001878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e3a4      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8087 	beq.w	80019a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001898:	4b9a      	ldr	r3, [pc, #616]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018a2:	4b98      	ldr	r3, [pc, #608]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d007      	beq.n	80018be <HAL_RCC_OscConfig+0x46>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	2b18      	cmp	r3, #24
 80018b2:	d110      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d10b      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018be:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d06c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x12c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d168      	bne.n	80019a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e37e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x76>
 80018e0:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a87      	ldr	r2, [pc, #540]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e02e      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_RCC_OscConfig+0x98>
 80018f6:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a82      	ldr	r2, [pc, #520]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	4b80      	ldr	r3, [pc, #512]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e01d      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0xbc>
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a79      	ldr	r2, [pc, #484]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a76      	ldr	r2, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0xd4>
 8001934:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a72      	ldr	r2, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6f      	ldr	r2, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7fe fec2 	bl	80006dc <HAL_GetTick>
 8001958:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800195c:	f7fe febe 	bl	80006dc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b64      	cmp	r3, #100	; 0x64
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e332      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0xe4>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7fe feae 	bl	80006dc <HAL_GetTick>
 8001980:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7fe feaa 	bl	80006dc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e31e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001996:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x10c>
 80019a2:	e000      	b.n	80019a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80b0 	beq.w	8001b14 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0x162>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	d149      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d144      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x17a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e2f0      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0219 	bic.w	r2, r3, #25
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4941      	ldr	r1, [pc, #260]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7fe fe6a 	bl	80006dc <HAL_GetTick>
 8001a08:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7fe fe66 	bl	80006dc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2da      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	f7fe fe85 	bl	8000738 <HAL_GetREVID>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d80a      	bhi.n	8001a4e <HAL_RCC_OscConfig+0x1d6>
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	031b      	lsls	r3, r3, #12
 8001a46:	492f      	ldr	r1, [pc, #188]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	e062      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	4929      	ldr	r1, [pc, #164]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a62:	e057      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d038      	beq.n	8001ade <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 0219 	bic.w	r2, r3, #25
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fe2d 	bl	80006dc <HAL_GetTick>
 8001a82:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a86:	f7fe fe29 	bl	80006dc <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e29d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	f7fe fe48 	bl	8000738 <HAL_GetREVID>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f241 0303 	movw	r3, #4099	; 0x1003
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d80a      	bhi.n	8001ac8 <HAL_RCC_OscConfig+0x250>
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	031b      	lsls	r3, r3, #12
 8001ac0:	4910      	ldr	r1, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
 8001ac6:	e025      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	490b      	ldr	r1, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e01a      	b.n	8001b14 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_RCC_OscConfig+0x28c>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7fe fdf7 	bl	80006dc <HAL_GetTick>
 8001aee:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7fe fdf3 	bl	80006dc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d903      	bls.n	8001b08 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e267      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
 8001b04:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b08:	4ba0      	ldr	r3, [pc, #640]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ee      	bne.n	8001af2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 808f 	beq.w	8001c40 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b9a      	ldr	r3, [pc, #616]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b2a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b2c:	4b97      	ldr	r3, [pc, #604]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d007      	beq.n	8001b48 <HAL_RCC_OscConfig+0x2d0>
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b18      	cmp	r3, #24
 8001b3c:	d12d      	bne.n	8001b9a <HAL_RCC_OscConfig+0x322>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d128      	bne.n	8001b9a <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b48:	4b90      	ldr	r3, [pc, #576]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2e8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b80      	cmp	r3, #128	; 0x80
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e239      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b60:	f7fe fdea 	bl	8000738 <HAL_GetREVID>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f241 0303 	movw	r3, #4099	; 0x1003
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d80a      	bhi.n	8001b84 <HAL_RCC_OscConfig+0x30c>
 8001b6e:	4b87      	ldr	r3, [pc, #540]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	4983      	ldr	r1, [pc, #524]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b82:	e05d      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b84:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	061b      	lsls	r3, r3, #24
 8001b92:	497e      	ldr	r1, [pc, #504]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b98:	e052      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d035      	beq.n	8001c0e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ba2:	4b7a      	ldr	r3, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a79      	ldr	r2, [pc, #484]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7fe fd95 	bl	80006dc <HAL_GetTick>
 8001bb2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001bb6:	f7fe fd91 	bl	80006dc <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e205      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bc8:	4b70      	ldr	r3, [pc, #448]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bd4:	f7fe fdb0 	bl	8000738 <HAL_GetREVID>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f241 0303 	movw	r3, #4099	; 0x1003
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d80a      	bhi.n	8001bf8 <HAL_RCC_OscConfig+0x380>
 8001be2:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	069b      	lsls	r3, r3, #26
 8001bf0:	4966      	ldr	r1, [pc, #408]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
 8001bf6:	e023      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
 8001bf8:	4b64      	ldr	r3, [pc, #400]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	4961      	ldr	r1, [pc, #388]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e018      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5e      	ldr	r2, [pc, #376]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7fe fd5f 	bl	80006dc <HAL_GetTick>
 8001c1e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c22:	f7fe fd5b 	bl	80006dc <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1cf      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c34:	4b55      	ldr	r3, [pc, #340]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d036      	beq.n	8001cba <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d019      	beq.n	8001c88 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c54:	4b4d      	ldr	r3, [pc, #308]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	4a4c      	ldr	r2, [pc, #304]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7fe fd3c 	bl	80006dc <HAL_GetTick>
 8001c64:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7fe fd38 	bl	80006dc <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1ac      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x3f0>
 8001c86:	e018      	b.n	8001cba <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b40      	ldr	r3, [pc, #256]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8c:	4a3f      	ldr	r2, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7fe fd22 	bl	80006dc <HAL_GetTick>
 8001c98:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7fe fd1e 	bl	80006dc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e192      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d036      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2e      	ldr	r2, [pc, #184]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cda:	f7fe fcff 	bl	80006dc <HAL_GetTick>
 8001cde:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7fe fcfb 	bl	80006dc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e16f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x46a>
 8001d00:	e018      	b.n	8001d34 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d02:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe fce5 	bl	80006dc <HAL_GetTick>
 8001d12:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d16:	f7fe fce1 	bl	80006dc <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e155      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8086 	beq.w	8001e4e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_OscConfig+0x518>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_RCC_OscConfig+0x518>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d4e:	f7fe fcc5 	bl	80006dc <HAL_GetTick>
 8001d52:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7fe fcc1 	bl	80006dc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	; 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e135      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_OscConfig+0x518>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x51c>
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a02      	ldr	r2, [pc, #8]	; (8001d8c <HAL_RCC_OscConfig+0x514>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	e032      	b.n	8001df0 <HAL_RCC_OscConfig+0x578>
 8001d8a:	bf00      	nop
 8001d8c:	58024400 	.word	0x58024400
 8001d90:	58024800 	.word	0x58024800
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x53e>
 8001d9c:	4b8f      	ldr	r3, [pc, #572]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a8e      	ldr	r2, [pc, #568]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	4b8c      	ldr	r3, [pc, #560]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a8b      	ldr	r2, [pc, #556]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x578>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x560>
 8001dbe:	4b87      	ldr	r3, [pc, #540]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a86      	ldr	r2, [pc, #536]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b84      	ldr	r3, [pc, #528]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x578>
 8001dd8:	4b80      	ldr	r3, [pc, #512]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a7c      	ldr	r2, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7fe fc70 	bl	80006dc <HAL_GetTick>
 8001dfc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe fc6c 	bl	80006dc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0de      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e16:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ee      	beq.n	8001e00 <HAL_RCC_OscConfig+0x588>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7fe fc5a 	bl	80006dc <HAL_GetTick>
 8001e28:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fc56 	bl	80006dc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0c8      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e42:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ee      	bne.n	8001e2c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80bd 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e58:	4b60      	ldr	r3, [pc, #384]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e60:	2b18      	cmp	r3, #24
 8001e62:	f000 80b4 	beq.w	8001fce <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	f040 8095 	bne.w	8001f9a <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a59      	ldr	r2, [pc, #356]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fc2e 	bl	80006dc <HAL_GetTick>
 8001e80:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe fc2a 	bl	80006dc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e09e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_RCC_OscConfig+0x768>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4949      	ldr	r1, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	628b      	str	r3, [r1, #40]	; 0x28
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	025b      	lsls	r3, r3, #9
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	061b      	lsls	r3, r3, #24
 8001ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001eec:	493b      	ldr	r1, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	4a39      	ldr	r2, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f0a:	00d2      	lsls	r2, r2, #3
 8001f0c:	4933      	ldr	r1, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	f023 020c 	bic.w	r2, r3, #12
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	492f      	ldr	r1, [pc, #188]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	f023 0202 	bic.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	492a      	ldr	r1, [pc, #168]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f36:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe fbb3 	bl	80006dc <HAL_GetTick>
 8001f76:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe fbaf 	bl	80006dc <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e023      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x702>
 8001f98:	e01b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001fa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fb99 	bl	80006dc <HAL_GetTick>
 8001faa:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fae:	f7fe fb95 	bl	80006dc <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_OscConfig+0x764>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0x736>
 8001fcc:	e001      	b.n	8001fd2 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	fffffc0c 	.word	0xfffffc0c
 8001fe4:	ffff0007 	.word	0xffff0007

08001fe8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e18d      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b8a      	ldr	r3, [pc, #552]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b87      	ldr	r3, [pc, #540]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4985      	ldr	r1, [pc, #532]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b83      	ldr	r3, [pc, #524]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e175      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002044:	429a      	cmp	r2, r3
 8002046:	d908      	bls.n	800205a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002048:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	4975      	ldr	r1, [pc, #468]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002056:	4313      	orrs	r3, r2
 8002058:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002072:	429a      	cmp	r2, r3
 8002074:	d908      	bls.n	8002088 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002076:	4b6d      	ldr	r3, [pc, #436]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	496a      	ldr	r1, [pc, #424]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002084:	4313      	orrs	r3, r2
 8002086:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d908      	bls.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	495e      	ldr	r1, [pc, #376]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69da      	ldr	r2, [r3, #28]
 80020c6:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d908      	bls.n	80020e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020d2:	4b56      	ldr	r3, [pc, #344]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4953      	ldr	r1, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b4d      	ldr	r3, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d908      	bls.n	8002112 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f023 020f 	bic.w	r2, r3, #15
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4947      	ldr	r1, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800210e:	4313      	orrs	r3, r2
 8002110:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d055      	beq.n	80021ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800211e:	4b43      	ldr	r3, [pc, #268]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4940      	ldr	r1, [pc, #256]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d121      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0e7      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d115      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0db      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0cf      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002178:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0c7      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4925      	ldr	r1, [pc, #148]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 8002196:	4313      	orrs	r3, r2
 8002198:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe fa9f 	bl	80006dc <HAL_GetTick>
 800219e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe fa9b 	bl	80006dc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0af      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d1eb      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d208      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f023 020f 	bic.w	r2, r3, #15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x244>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d214      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 020f 	bic.w	r2, r3, #15
 800220e:	4906      	ldr	r1, [pc, #24]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_ClockConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e077      	b.n	8002318 <HAL_RCC_ClockConfig+0x330>
 8002228:	52002000 	.word	0x52002000
 800222c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002248:	429a      	cmp	r2, r3
 800224a:	d208      	bcs.n	800225e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800224c:	4b34      	ldr	r3, [pc, #208]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	4931      	ldr	r1, [pc, #196]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 800225a:	4313      	orrs	r3, r2
 800225c:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002276:	429a      	cmp	r2, r3
 8002278:	d208      	bcs.n	800228c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4926      	ldr	r1, [pc, #152]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 8002288:	4313      	orrs	r3, r2
 800228a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d010      	beq.n	80022ba <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d208      	bcs.n	80022ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	491a      	ldr	r1, [pc, #104]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d208      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	490f      	ldr	r1, [pc, #60]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022e8:	f000 f822 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022ec:	4601      	mov	r1, r0
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCC_ClockConfig+0x338>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x33c>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
 8002304:	4a08      	ldr	r2, [pc, #32]	; (8002328 <HAL_RCC_ClockConfig+0x340>)
 8002306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_RCC_ClockConfig+0x344>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f99b 	bl	8000648 <HAL_InitTick>
 8002312:	4603      	mov	r3, r0
 8002314:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002316:	7afb      	ldrb	r3, [r7, #11]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	58024400 	.word	0x58024400
 8002324:	08009158 	.word	0x08009158
 8002328:	24000008 	.word	0x24000008
 800232c:	24000000 	.word	0x24000000

08002330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002336:	4baf      	ldr	r3, [pc, #700]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800233e:	2b18      	cmp	r3, #24
 8002340:	f200 814e 	bhi.w	80025e0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	080023b1 	.word	0x080023b1
 8002350:	080025e1 	.word	0x080025e1
 8002354:	080025e1 	.word	0x080025e1
 8002358:	080025e1 	.word	0x080025e1
 800235c:	080025e1 	.word	0x080025e1
 8002360:	080025e1 	.word	0x080025e1
 8002364:	080025e1 	.word	0x080025e1
 8002368:	080025e1 	.word	0x080025e1
 800236c:	080023d7 	.word	0x080023d7
 8002370:	080025e1 	.word	0x080025e1
 8002374:	080025e1 	.word	0x080025e1
 8002378:	080025e1 	.word	0x080025e1
 800237c:	080025e1 	.word	0x080025e1
 8002380:	080025e1 	.word	0x080025e1
 8002384:	080025e1 	.word	0x080025e1
 8002388:	080025e1 	.word	0x080025e1
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080025e1 	.word	0x080025e1
 8002394:	080025e1 	.word	0x080025e1
 8002398:	080025e1 	.word	0x080025e1
 800239c:	080025e1 	.word	0x080025e1
 80023a0:	080025e1 	.word	0x080025e1
 80023a4:	080025e1 	.word	0x080025e1
 80023a8:	080025e1 	.word	0x080025e1
 80023ac:	080023e3 	.word	0x080023e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023b0:	4b90      	ldr	r3, [pc, #576]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d009      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023bc:	4b8d      	ldr	r3, [pc, #564]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	08db      	lsrs	r3, r3, #3
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	4a8c      	ldr	r2, [pc, #560]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80023ce:	e10a      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80023d0:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80023d2:	61bb      	str	r3, [r7, #24]
    break;
 80023d4:	e107      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80023d8:	61bb      	str	r3, [r7, #24]
    break;
 80023da:	e104      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80023dc:	4b88      	ldr	r3, [pc, #544]	; (8002600 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80023de:	61bb      	str	r3, [r7, #24]
    break;
 80023e0:	e101      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80023e2:	4b84      	ldr	r3, [pc, #528]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80023ec:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023f8:	4b7e      	ldr	r3, [pc, #504]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002402:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80da 	beq.w	80025da <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d05a      	beq.n	80024e2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800242c:	2b01      	cmp	r3, #1
 800242e:	d302      	bcc.n	8002436 <HAL_RCC_GetSysClockFreq+0x106>
 8002430:	2b02      	cmp	r3, #2
 8002432:	d078      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002434:	e099      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002436:	4b6f      	ldr	r3, [pc, #444]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02d      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002442:	4b6c      	ldr	r3, [pc, #432]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	08db      	lsrs	r3, r3, #3
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246c:	4b61      	ldr	r3, [pc, #388]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002480:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002498:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800249c:	e087      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002608 <HAL_RCC_GetSysClockFreq+0x2d8>
 80024ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b0:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024e0:	e065      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ec:	eddf 6a47 	vldr	s13, [pc, #284]	; 800260c <HAL_RCC_GetSysClockFreq+0x2dc>
 80024f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f4:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002504:	ed97 6a02 	vldr	s12, [r7, #8]
 8002508:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2d4>
 800250c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002520:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002524:	e043      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002530:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002610 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002548:	ed97 6a02 	vldr	s12, [r7, #8]
 800254c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800255c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002568:	e021      	b.n	80025ae <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002574:	eddf 6a25 	vldr	s13, [pc, #148]	; 800260c <HAL_RCC_GetSysClockFreq+0x2dc>
 8002578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800258c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002590:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002604 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800259c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025ac:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	0a5b      	lsrs	r3, r3, #9
 80025b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b8:	3301      	adds	r3, #1
 80025ba:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80025ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d2:	ee17 3a90 	vmov	r3, s15
 80025d6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80025d8:	e005      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
    break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80025e2:	61bb      	str	r3, [r7, #24]
    break;
 80025e4:	bf00      	nop
  }

  return sysclockfreq;
 80025e6:	69bb      	ldr	r3, [r7, #24]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3724      	adds	r7, #36	; 0x24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	58024400 	.word	0x58024400
 80025f8:	03d09000 	.word	0x03d09000
 80025fc:	003d0900 	.word	0x003d0900
 8002600:	007a1200 	.word	0x007a1200
 8002604:	46000000 	.word	0x46000000
 8002608:	4c742400 	.word	0x4c742400
 800260c:	4a742400 	.word	0x4a742400
 8002610:	4af42400 	.word	0x4af42400

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002618:	f001 f9e2 	bl	80039e0 <HAL_RCCEx_GetD1SysClockFreq>
 800261c:	4601      	mov	r1, r0
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <HAL_RCC_GetHCLKFreq+0x30>)
 8002628:	5cd3      	ldrb	r3, [r2, r3]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	fa21 f303 	lsr.w	r3, r1, r3
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <HAL_RCC_GetHCLKFreq+0x34>)
 8002634:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetHCLKFreq+0x34>)
 8002638:	681b      	ldr	r3, [r3, #0]
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	58024400 	.word	0x58024400
 8002644:	08009158 	.word	0x08009158
 8002648:	2400000c 	.word	0x2400000c

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002650:	f7ff ffe0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002654:	4601      	mov	r1, r0
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	fa21 f303 	lsr.w	r3, r1, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024400 	.word	0x58024400
 8002674:	08009158 	.word	0x08009158

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800267c:	f7ff ffca 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002680:	4601      	mov	r1, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58024400 	.word	0x58024400
 80026a0:	08009158 	.word	0x08009158

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b0:	2300      	movs	r3, #0
 80026b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03d      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c8:	d013      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80026ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ce:	d802      	bhi.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026d4:	e01f      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026da:	d013      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026e0:	d01c      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026e2:	e018      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e4:	4baf      	ldr	r3, [pc, #700]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	4aae      	ldr	r2, [pc, #696]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026f0:	e015      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2102      	movs	r1, #2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f98d 	bl	8003a18 <RCCEx_PLL2_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002702:	e00c      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3324      	adds	r3, #36	; 0x24
 8002708:	2102      	movs	r1, #2
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fa36 	bl	8003b7c <RCCEx_PLL3_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002714:	e003      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
      break;
 800271a:	e000      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800271c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002724:	4b9f      	ldr	r3, [pc, #636]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002730:	499c      	ldr	r1, [pc, #624]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002732:	4313      	orrs	r3, r2
 8002734:	650b      	str	r3, [r1, #80]	; 0x50
 8002736:	e001      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d03d      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	2b04      	cmp	r3, #4
 800274e:	d826      	bhi.n	800279e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	0800276d 	.word	0x0800276d
 800275c:	0800277b 	.word	0x0800277b
 8002760:	0800278d 	.word	0x0800278d
 8002764:	080027a5 	.word	0x080027a5
 8002768:	080027a5 	.word	0x080027a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800276c:	4b8d      	ldr	r3, [pc, #564]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	4a8c      	ldr	r2, [pc, #560]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002778:	e015      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f949 	bl	8003a18 <RCCEx_PLL2_Config>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800278a:	e00c      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3324      	adds	r3, #36	; 0x24
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f001 f9f2 	bl	8003b7c <RCCEx_PLL3_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800279c:	e003      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
      break;
 80027a2:	e000      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80027a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ac:	4b7d      	ldr	r3, [pc, #500]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b0:	f023 0207 	bic.w	r2, r3, #7
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	497a      	ldr	r1, [pc, #488]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	650b      	str	r3, [r1, #80]	; 0x50
 80027be:	e001      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d03e      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	2b80      	cmp	r3, #128	; 0x80
 80027d6:	d01c      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80027d8:	2b80      	cmp	r3, #128	; 0x80
 80027da:	d804      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d00d      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80027e4:	e01e      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80027e6:	2bc0      	cmp	r3, #192	; 0xc0
 80027e8:	d01f      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ee:	d01e      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80027f0:	e018      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f2:	4b6c      	ldr	r3, [pc, #432]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	4a6b      	ldr	r2, [pc, #428]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80027fe:	e017      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f001 f906 	bl	8003a18 <RCCEx_PLL2_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002810:	e00e      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3324      	adds	r3, #36	; 0x24
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f001 f9af 	bl	8003b7c <RCCEx_PLL3_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	75fb      	strb	r3, [r7, #23]
      break;
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800282e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002836:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4958      	ldr	r1, [pc, #352]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002844:	4313      	orrs	r3, r2
 8002846:	650b      	str	r3, [r1, #80]	; 0x50
 8002848:	e001      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002856:	2b00      	cmp	r3, #0
 8002858:	d044      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002864:	d01f      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286a:	d805      	bhi.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002874:	d00e      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002876:	e01f      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002878:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800287c:	d01f      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800287e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002882:	d01e      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002884:	e018      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	4a46      	ldr	r2, [pc, #280]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002892:	e017      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f001 f8bc 	bl	8003a18 <RCCEx_PLL2_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028a4:	e00e      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3324      	adds	r3, #36	; 0x24
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 f965 	bl	8003b7c <RCCEx_PLL3_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028b6:	e005      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	75fb      	strb	r3, [r7, #23]
      break;
 80028bc:	e002      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80028c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028ca:	4b36      	ldr	r3, [pc, #216]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028d8:	4932      	ldr	r1, [pc, #200]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	658b      	str	r3, [r1, #88]	; 0x58
 80028de:	e001      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d044      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028fa:	d01f      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80028fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002900:	d805      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002906:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290a:	d00e      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800290c:	e01f      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800290e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002912:	d01f      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002918:	d01e      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800291a:	e018      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002928:	e017      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f001 f871 	bl	8003a18 <RCCEx_PLL2_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800293a:	e00e      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3324      	adds	r3, #36	; 0x24
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f001 f91a 	bl	8003b7c <RCCEx_PLL3_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800294c:	e005      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	75fb      	strb	r3, [r7, #23]
      break;
 8002952:	e002      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002954:	bf00      	nop
 8002956:	e000      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800296e:	490d      	ldr	r1, [pc, #52]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002970:	4313      	orrs	r3, r2
 8002972:	658b      	str	r3, [r1, #88]	; 0x58
 8002974:	e001      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d035      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298a:	2b10      	cmp	r3, #16
 800298c:	d00c      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800298e:	2b10      	cmp	r3, #16
 8002990:	d802      	bhi.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01b      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002996:	e017      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d00c      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800299c:	2b30      	cmp	r3, #48	; 0x30
 800299e:	d018      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80029a0:	e012      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a8:	4baf      	ldr	r3, [pc, #700]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	4aae      	ldr	r2, [pc, #696]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029b4:	e00e      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2102      	movs	r1, #2
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 f82b 	bl	8003a18 <RCCEx_PLL2_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80029c6:	e005      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	75fb      	strb	r3, [r7, #23]
      break;
 80029cc:	e002      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80029d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029da:	4ba3      	ldr	r3, [pc, #652]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	49a0      	ldr	r1, [pc, #640]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80029ec:	e001      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d042      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a06:	d01f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0c:	d805      	bhi.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a16:	d00e      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002a18:	e01f      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002a1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a1e:	d01f      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a24:	d01e      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002a26:	e018      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a28:	4b8f      	ldr	r3, [pc, #572]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a8e      	ldr	r2, [pc, #568]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a34:	e017      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 ffeb 	bl	8003a18 <RCCEx_PLL2_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a46:	e00e      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3324      	adds	r3, #36	; 0x24
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 f894 	bl	8003b7c <RCCEx_PLL3_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a58:	e005      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5e:	e002      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002a60:	bf00      	nop
 8002a62:	e000      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	497b      	ldr	r1, [pc, #492]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8002a7e:	e001      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d042      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a98:	d01b      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a9e:	d805      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d022      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002aaa:	e01b      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ab0:	d01d      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab6:	d01c      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002ab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002abc:	d01b      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002abe:	e011      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 ffa6 	bl	8003a18 <RCCEx_PLL2_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ad0:	e012      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3324      	adds	r3, #36	; 0x24
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 f84f 	bl	8003b7c <RCCEx_PLL3_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ae2:	e009      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002aea:	bf00      	nop
 8002aec:	e004      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002aee:	bf00      	nop
 8002af0:	e002      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	4957      	ldr	r1, [pc, #348]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	650b      	str	r3, [r1, #80]	; 0x50
 8002b10:	e001      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2c:	d01b      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b32:	d805      	bhi.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d022      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b3e:	e01b      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d01d      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4a:	d01c      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b50:	d01b      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002b52:	e011      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 ff5c 	bl	8003a18 <RCCEx_PLL2_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b64:	e012      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3324      	adds	r3, #36	; 0x24
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 f805 	bl	8003b7c <RCCEx_PLL3_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b76:	e009      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e004      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b82:	bf00      	nop
 8002b84:	e002      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b86:	bf00      	nop
 8002b88:	e000      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b92:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ba0:	4931      	ldr	r1, [pc, #196]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8002ba6:	e001      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d02d      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc0:	d005      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002bc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc6:	d009      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002bcc:	e00f      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bda:	e00c      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 ff18 	bl	8003a18 <RCCEx_PLL2_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bec:	e003      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c08:	4917      	ldr	r1, [pc, #92]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d035      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d81b      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c6d 	.word	0x08002c6d
 8002c34:	08002c41 	.word	0x08002c41
 8002c38:	08002c4f 	.word	0x08002c4f
 8002c3c:	08002c6d 	.word	0x08002c6d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c4c:	e00f      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fedf 	bl	8003a18 <RCCEx_PLL2_Config>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c5e:	e006      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	75fb      	strb	r3, [r7, #23]
      break;
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002c66:	bf00      	nop
 8002c68:	58024400 	.word	0x58024400
      break;
 8002c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c74:	4bba      	ldr	r3, [pc, #744]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c78:	f023 0203 	bic.w	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	49b7      	ldr	r1, [pc, #732]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c86:	e001      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8086 	beq.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c9a:	4bb2      	ldr	r3, [pc, #712]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4ab1      	ldr	r2, [pc, #708]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca6:	f7fd fd19 	bl	80006dc <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cac:	e009      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cae:	f7fd fd15 	bl	80006dc <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d902      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	75fb      	strb	r3, [r7, #23]
        break;
 8002cc0:	e005      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc2:	4ba8      	ldr	r3, [pc, #672]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ef      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d166      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cd4:	4ba2      	ldr	r3, [pc, #648]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cde:	4053      	eors	r3, r2
 8002ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce8:	4b9d      	ldr	r3, [pc, #628]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf2:	4b9b      	ldr	r3, [pc, #620]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a9a      	ldr	r2, [pc, #616]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfe:	4b98      	ldr	r3, [pc, #608]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a97      	ldr	r2, [pc, #604]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d0a:	4a95      	ldr	r2, [pc, #596]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1a:	d115      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fd fcde 	bl	80006dc <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d22:	e00b      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7fd fcda 	bl	80006dc <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d902      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	75fb      	strb	r3, [r7, #23]
            break;
 8002d3a:	e005      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d3c:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ed      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d126      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d5c:	d10d      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002d5e:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d6c:	0919      	lsrs	r1, r3, #4
 8002d6e:	4b7e      	ldr	r3, [pc, #504]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002d70:	400b      	ands	r3, r1
 8002d72:	497b      	ldr	r1, [pc, #492]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	610b      	str	r3, [r1, #16]
 8002d78:	e005      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002d7a:	4b79      	ldr	r3, [pc, #484]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	4a78      	ldr	r2, [pc, #480]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d84:	6113      	str	r3, [r2, #16]
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	4972      	ldr	r1, [pc, #456]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	670b      	str	r3, [r1, #112]	; 0x70
 8002d9a:	e004      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	75bb      	strb	r3, [r7, #22]
 8002da0:	e001      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d07d      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db6:	2b28      	cmp	r3, #40	; 0x28
 8002db8:	d866      	bhi.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002e8f 	.word	0x08002e8f
 8002dc4:	08002e89 	.word	0x08002e89
 8002dc8:	08002e89 	.word	0x08002e89
 8002dcc:	08002e89 	.word	0x08002e89
 8002dd0:	08002e89 	.word	0x08002e89
 8002dd4:	08002e89 	.word	0x08002e89
 8002dd8:	08002e89 	.word	0x08002e89
 8002ddc:	08002e89 	.word	0x08002e89
 8002de0:	08002e65 	.word	0x08002e65
 8002de4:	08002e89 	.word	0x08002e89
 8002de8:	08002e89 	.word	0x08002e89
 8002dec:	08002e89 	.word	0x08002e89
 8002df0:	08002e89 	.word	0x08002e89
 8002df4:	08002e89 	.word	0x08002e89
 8002df8:	08002e89 	.word	0x08002e89
 8002dfc:	08002e89 	.word	0x08002e89
 8002e00:	08002e77 	.word	0x08002e77
 8002e04:	08002e89 	.word	0x08002e89
 8002e08:	08002e89 	.word	0x08002e89
 8002e0c:	08002e89 	.word	0x08002e89
 8002e10:	08002e89 	.word	0x08002e89
 8002e14:	08002e89 	.word	0x08002e89
 8002e18:	08002e89 	.word	0x08002e89
 8002e1c:	08002e89 	.word	0x08002e89
 8002e20:	08002e8f 	.word	0x08002e8f
 8002e24:	08002e89 	.word	0x08002e89
 8002e28:	08002e89 	.word	0x08002e89
 8002e2c:	08002e89 	.word	0x08002e89
 8002e30:	08002e89 	.word	0x08002e89
 8002e34:	08002e89 	.word	0x08002e89
 8002e38:	08002e89 	.word	0x08002e89
 8002e3c:	08002e89 	.word	0x08002e89
 8002e40:	08002e8f 	.word	0x08002e8f
 8002e44:	08002e89 	.word	0x08002e89
 8002e48:	08002e89 	.word	0x08002e89
 8002e4c:	08002e89 	.word	0x08002e89
 8002e50:	08002e89 	.word	0x08002e89
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08002e89 	.word	0x08002e89
 8002e5c:	08002e89 	.word	0x08002e89
 8002e60:	08002e8f 	.word	0x08002e8f
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fdd4 	bl	8003a18 <RCCEx_PLL2_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e74:	e00c      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3324      	adds	r3, #36	; 0x24
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fe7d 	bl	8003b7c <RCCEx_PLL3_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e86:	e003      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8c:	e000      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea2:	492f      	ldr	r1, [pc, #188]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ea8:	e001      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d037      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d820      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002f0b 	.word	0x08002f0b
 8002ecc:	08002ee1 	.word	0x08002ee1
 8002ed0:	08002ef3 	.word	0x08002ef3
 8002ed4:	08002f0b 	.word	0x08002f0b
 8002ed8:	08002f0b 	.word	0x08002f0b
 8002edc:	08002f0b 	.word	0x08002f0b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fd96 	bl	8003a18 <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3324      	adds	r3, #36	; 0x24
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fe3f 	bl	8003b7c <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f02:	e003      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f023 0207 	bic.w	r2, r3, #7
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	4910      	ldr	r1, [pc, #64]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	654b      	str	r3, [r1, #84]	; 0x54
 8002f24:	e001      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d040      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	2b05      	cmp	r3, #5
 8002f3e:	d827      	bhi.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f97 	.word	0x08002f97
 8002f4c:	08002f6d 	.word	0x08002f6d
 8002f50:	08002f7f 	.word	0x08002f7f
 8002f54:	08002f97 	.word	0x08002f97
 8002f58:	08002f97 	.word	0x08002f97
 8002f5c:	08002f97 	.word	0x08002f97
 8002f60:	58024400 	.word	0x58024400
 8002f64:	58024800 	.word	0x58024800
 8002f68:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fd50 	bl	8003a18 <RCCEx_PLL2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f7c:	e00c      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3324      	adds	r3, #36	; 0x24
 8002f82:	2101      	movs	r1, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fdf9 	bl	8003b7c <RCCEx_PLL3_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f8e:	e003      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
      break;
 8002f94:	e000      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f9e:	4bb3      	ldr	r3, [pc, #716]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f023 0207 	bic.w	r2, r3, #7
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	49af      	ldr	r1, [pc, #700]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d044      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fce:	d01b      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd4:	d805      	bhi.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d022      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002fe0:	e01b      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d01d      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fec:	d01c      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ff2:	d01b      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002ff4:	e011      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fd0b 	bl	8003a18 <RCCEx_PLL2_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003006:	e012      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fdb4 	bl	8003b7c <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003018:	e009      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
      break;
 800301e:	e006      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003020:	bf00      	nop
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003024:	bf00      	nop
 8003026:	e002      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003028:	bf00      	nop
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800302c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003034:	4b8d      	ldr	r3, [pc, #564]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003042:	498a      	ldr	r1, [pc, #552]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003044:	4313      	orrs	r3, r2
 8003046:	654b      	str	r3, [r1, #84]	; 0x54
 8003048:	e001      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003064:	d01b      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306a:	d805      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d022      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003076:	e01b      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307c:	d01d      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800307e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003082:	d01c      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003088:	d01b      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800308a:	e011      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fcc0 	bl	8003a18 <RCCEx_PLL2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800309c:	e012      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3324      	adds	r3, #36	; 0x24
 80030a2:	2102      	movs	r1, #2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fd69 	bl	8003b7c <RCCEx_PLL3_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030ae:	e009      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	75fb      	strb	r3, [r7, #23]
      break;
 80030b4:	e006      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030b6:	bf00      	nop
 80030b8:	e004      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80030c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030ca:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d8:	4964      	ldr	r1, [pc, #400]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	658b      	str	r3, [r1, #88]	; 0x58
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d044      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fa:	d01b      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80030fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003100:	d805      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d022      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800310c:	e01b      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003112:	d01d      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003114:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003118:	d01c      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800311a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800311e:	d01b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003120:	e011      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fc75 	bl	8003a18 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003132:	e012      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fd1e 	bl	8003b7c <RCCEx_PLL3_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003144:	e009      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      break;
 800314a:	e006      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800314c:	bf00      	nop
 800314e:	e004      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003150:	bf00      	nop
 8003152:	e002      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003154:	bf00      	nop
 8003156:	e000      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003160:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800316e:	493f      	ldr	r1, [pc, #252]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003170:	4313      	orrs	r3, r2
 8003172:	658b      	str	r3, [r1, #88]	; 0x58
 8003174:	e001      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01b      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d10b      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3324      	adds	r3, #36	; 0x24
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fcef 	bl	8003b7c <RCCEx_PLL3_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00c      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75bb      	strb	r3, [r7, #22]
 80031a8:	e009      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031aa:	4b30      	ldr	r3, [pc, #192]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b8:	492c      	ldr	r1, [pc, #176]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01b      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d10b      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3324      	adds	r3, #36	; 0x24
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fccd 	bl	8003b7c <RCCEx_PLL3_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00c      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75bb      	strb	r3, [r7, #22]
 80031ec:	e009      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031fc:	491b      	ldr	r1, [pc, #108]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d032      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d00d      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 800321a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321e:	d016      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fbf4 	bl	8003a18 <RCCEx_PLL2_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003234:	e00c      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3324      	adds	r3, #36	; 0x24
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fc9d 	bl	8003b7c <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003246:	e003      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]
      break;
 800324c:	e000      	b.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 800324e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10c      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003264:	4901      	ldr	r1, [pc, #4]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	658b      	str	r3, [r1, #88]	; 0x58
 800326a:	e003      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800326c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d02f      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800328a:	d00c      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800328c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003290:	d015      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003296:	d10f      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003298:	4b79      	ldr	r3, [pc, #484]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	4a78      	ldr	r2, [pc, #480]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800329e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80032a4:	e00c      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3324      	adds	r3, #36	; 0x24
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fc65 	bl	8003b7c <RCCEx_PLL3_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032b6:	e003      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
      break;
 80032bc:	e000      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80032be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c6:	4b6e      	ldr	r3, [pc, #440]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d4:	496a      	ldr	r1, [pc, #424]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	654b      	str	r3, [r1, #84]	; 0x54
 80032da:	e001      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d029      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d007      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80032fa:	e00f      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032fc:	4b60      	ldr	r3, [pc, #384]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	4a5f      	ldr	r2, [pc, #380]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003308:	e00b      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	2102      	movs	r1, #2
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fb81 	bl	8003a18 <RCCEx_PLL2_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	75fb      	strb	r3, [r7, #23]
      break;
 8003320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003328:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	4952      	ldr	r1, [pc, #328]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	64cb      	str	r3, [r1, #76]	; 0x4c
 800333a:	e001      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3324      	adds	r3, #36	; 0x24
 8003350:	2102      	movs	r1, #2
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fc12 	bl	8003b7c <RCCEx_PLL3_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02f      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	d00c      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8003378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337c:	d802      	bhi.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d011      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003382:	e00d      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8003384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003388:	d00f      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800338a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800338e:	d00e      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8003390:	e006      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800339e:	e007      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
      break;
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80033ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033b6:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c2:	492f      	ldr	r1, [pc, #188]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	654b      	str	r3, [r1, #84]	; 0x54
 80033c8:	e001      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4926      	ldr	r1, [pc, #152]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003406:	491e      	ldr	r1, [pc, #120]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003424:	4916      	ldr	r1, [pc, #88]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800343c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003440:	6113      	str	r3, [r2, #16]
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da08      	bge.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	4906      	ldr	r1, [pc, #24]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800346c:	7dbb      	ldrb	r3, [r7, #22]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	58024400 	.word	0x58024400

08003484 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003488:	f7ff f8c4 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 800348c:	4601      	mov	r1, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	08009158 	.word	0x08009158

080034b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034b8:	4b9d      	ldr	r3, [pc, #628]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80034c2:	4b9b      	ldr	r3, [pc, #620]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	0b1b      	lsrs	r3, r3, #12
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80034ce:	4b98      	ldr	r3, [pc, #608]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034d8:	4b95      	ldr	r3, [pc, #596]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	fb02 f303 	mul.w	r3, r2, r3
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 810a 	beq.w	8003710 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d05a      	beq.n	80035b8 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8003502:	2b01      	cmp	r3, #1
 8003504:	d302      	bcc.n	800350c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8003506:	2b02      	cmp	r3, #2
 8003508:	d078      	beq.n	80035fc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800350a:	e099      	b.n	8003640 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800350c:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02d      	beq.n	8003574 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003518:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	08db      	lsrs	r3, r3, #3
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	4a84      	ldr	r2, [pc, #528]	; (8003734 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
 8003528:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003542:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003552:	ed97 6a03 	vldr	s12, [r7, #12]
 8003556:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800355a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800356a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003572:	e087      	b.n	8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800373c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003586:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003596:	ed97 6a03 	vldr	s12, [r7, #12]
 800359a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800359e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035b6:	e065      	b.n	8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80035c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ca:	4b59      	ldr	r3, [pc, #356]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035da:	ed97 6a03 	vldr	s12, [r7, #12]
 80035de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80035e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035fa:	e043      	b.n	8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003744 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800360a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360e:	4b48      	ldr	r3, [pc, #288]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003622:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800363e:	e021      	b.n	8003684 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800364e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003652:	4b37      	ldr	r3, [pc, #220]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003662:	ed97 6a03 	vldr	s12, [r7, #12]
 8003666:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003738 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800366a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	0a5b      	lsrs	r3, r3, #9
 800368a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800369a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800369e:	edd7 6a07 	vldr	s13, [r7, #28]
 80036a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036aa:	ee17 2a90 	vmov	r2, s15
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	0c1b      	lsrs	r3, r3, #16
 80036b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80036d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d8:	ee17 2a90 	vmov	r2, s15
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80036e0:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	0e1b      	lsrs	r3, r3, #24
 80036e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80036fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003706:	ee17 2a90 	vmov	r2, s15
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
}
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	58024400 	.word	0x58024400
 8003734:	03d09000 	.word	0x03d09000
 8003738:	46000000 	.word	0x46000000
 800373c:	4c742400 	.word	0x4c742400
 8003740:	4a742400 	.word	0x4a742400
 8003744:	4af42400 	.word	0x4af42400

08003748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003750:	4b9d      	ldr	r3, [pc, #628]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800375a:	4b9b      	ldr	r3, [pc, #620]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	0d1b      	lsrs	r3, r3, #20
 8003760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003764:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8003766:	4b98      	ldr	r3, [pc, #608]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003770:	4b95      	ldr	r3, [pc, #596]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	08db      	lsrs	r3, r3, #3
 8003776:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	fb02 f303 	mul.w	r3, r2, r3
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003788:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 810a 	beq.w	80039a8 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d05a      	beq.n	8003850 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 800379a:	2b01      	cmp	r3, #1
 800379c:	d302      	bcc.n	80037a4 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d078      	beq.n	8003894 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80037a2:	e099      	b.n	80038d8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a4:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d02d      	beq.n	800380c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037b0:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	08db      	lsrs	r3, r3, #3
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	4a84      	ldr	r2, [pc, #528]	; (80039cc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
 80037c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037da:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80037f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800380a:	e087      	b.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003816:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039d4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800381a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003832:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800384e:	e065      	b.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800385e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003862:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003872:	ed97 6a03 	vldr	s12, [r7, #12]
 8003876:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800387a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003892:	e043      	b.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80038a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a6:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80038be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038d6:	e021      	b.n	800391c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80038e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800391a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800391c:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	0a5b      	lsrs	r3, r3, #9
 8003922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003936:	edd7 6a07 	vldr	s13, [r7, #28]
 800393a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003942:	ee17 2a90 	vmov	r2, s15
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800394a:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	0c1b      	lsrs	r3, r3, #16
 8003950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003964:	edd7 6a07 	vldr	s13, [r7, #28]
 8003968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800396c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003970:	ee17 2a90 	vmov	r2, s15
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	0e1b      	lsrs	r3, r3, #24
 800397e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003992:	edd7 6a07 	vldr	s13, [r7, #28]
 8003996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399e:	ee17 2a90 	vmov	r2, s15
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
}
 80039ba:	bf00      	nop
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	58024400 	.word	0x58024400
 80039cc:	03d09000 	.word	0x03d09000
 80039d0:	46000000 	.word	0x46000000
 80039d4:	4c742400 	.word	0x4c742400
 80039d8:	4a742400 	.word	0x4a742400
 80039dc:	4af42400 	.word	0x4af42400

080039e0 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039e4:	f7fe fca4 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80039e8:	4601      	mov	r1, r0
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa21 f303 	lsr.w	r3, r1, r3
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003a02:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	08009158 	.word	0x08009158
 8003a14:	24000008 	.word	0x24000008

08003a18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a26:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d101      	bne.n	8003a36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e099      	b.n	8003b6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a36:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003a3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a42:	f7fc fe4b 	bl	80006dc <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a48:	e008      	b.n	8003a5c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a4a:	f7fc fe47 	bl	80006dc <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e086      	b.n	8003b6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a5c:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a68:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	031b      	lsls	r3, r3, #12
 8003a76:	493f      	ldr	r1, [pc, #252]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	025b      	lsls	r3, r3, #9
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	061b      	lsls	r3, r3, #24
 8003aa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003aac:	4931      	ldr	r1, [pc, #196]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	492d      	ldr	r1, [pc, #180]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	f023 0220 	bic.w	r2, r3, #32
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4928      	ldr	r1, [pc, #160]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	4a26      	ldr	r2, [pc, #152]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003adc:	f023 0310 	bic.w	r3, r3, #16
 8003ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <RCCEx_PLL2_Config+0x160>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	69d2      	ldr	r2, [r2, #28]
 8003aee:	00d2      	lsls	r2, r2, #3
 8003af0:	4920      	ldr	r1, [pc, #128]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003af6:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003afc:	f043 0310 	orr.w	r3, r3, #16
 8003b00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d106      	bne.n	8003b16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b14:	e00f      	b.n	8003b36 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b28:	e005      	b.n	8003b36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b42:	f7fc fdcb 	bl	80006dc <HAL_GetTick>
 8003b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b48:	e008      	b.n	8003b5c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b4a:	f7fc fdc7 	bl	80006dc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e006      	b.n	8003b6a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <RCCEx_PLL2_Config+0x15c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	58024400 	.word	0x58024400
 8003b78:	ffff0007 	.word	0xffff0007

08003b7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b8a:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d101      	bne.n	8003b9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e099      	b.n	8003cce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a4e      	ldr	r2, [pc, #312]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba6:	f7fc fd99 	bl	80006dc <HAL_GetTick>
 8003baa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bae:	f7fc fd95 	bl	80006dc <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e086      	b.n	8003cce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bc0:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	493f      	ldr	r1, [pc, #252]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	628b      	str	r3, [r1, #40]	; 0x28
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	025b      	lsls	r3, r3, #9
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	061b      	lsls	r3, r3, #24
 8003c0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c10:	4931      	ldr	r1, [pc, #196]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	492d      	ldr	r1, [pc, #180]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	4928      	ldr	r1, [pc, #160]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c46:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <RCCEx_PLL3_Config+0x160>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	69d2      	ldr	r2, [r2, #28]
 8003c52:	00d2      	lsls	r2, r2, #3
 8003c54:	4920      	ldr	r1, [pc, #128]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c5a:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a19      	ldr	r2, [pc, #100]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c78:	e00f      	b.n	8003c9a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c80:	4b15      	ldr	r3, [pc, #84]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c8c:	e005      	b.n	8003c9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c8e:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca6:	f7fc fd19 	bl	80006dc <HAL_GetTick>
 8003caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cac:	e008      	b.n	8003cc0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cae:	f7fc fd15 	bl	80006dc <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e006      	b.n	8003cce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <RCCEx_PLL3_Config+0x15c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	ffff0007 	.word	0xffff0007

08003ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e01d      	b.n	8003d2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f004 ffdc 	bl	8008cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f000 fd8c 	bl	800483c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e01d      	b.n	8003d84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f815 	bl	8003d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	4610      	mov	r0, r2
 8003d76:	f000 fd61 	bl	800483c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2201      	movs	r2, #1
 8003db0:	6839      	ldr	r1, [r7, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 fb16 	bl	80053e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <HAL_TIM_PWM_Start+0x98>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d013      	beq.n	8003dea <HAL_TIM_PWM_Start+0x4a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_TIM_PWM_Start+0x9c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00e      	beq.n	8003dea <HAL_TIM_PWM_Start+0x4a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1b      	ldr	r2, [pc, #108]	; (8003e40 <HAL_TIM_PWM_Start+0xa0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d009      	beq.n	8003dea <HAL_TIM_PWM_Start+0x4a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <HAL_TIM_PWM_Start+0xa4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_TIM_PWM_Start+0x4a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_TIM_PWM_Start+0xa8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_Start+0x4e>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_TIM_PWM_Start+0x50>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_TIM_PWM_Start+0xac>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d00b      	beq.n	8003e2e <HAL_TIM_PWM_Start+0x8e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d007      	beq.n	8003e2e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40010400 	.word	0x40010400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800
 8003e4c:	00010007 	.word	0x00010007

08003e50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e01d      	b.n	8003e9e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f815 	bl	8003ea6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f000 fcd4 	bl	800483c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d841      	bhi.n	8003f50 <HAL_TIM_IC_Start_IT+0x94>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_TIM_IC_Start_IT+0x18>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f51 	.word	0x08003f51
 8003edc:	08003f51 	.word	0x08003f51
 8003ee0:	08003f51 	.word	0x08003f51
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f51 	.word	0x08003f51
 8003eec:	08003f51 	.word	0x08003f51
 8003ef0:	08003f51 	.word	0x08003f51
 8003ef4:	08003f2d 	.word	0x08003f2d
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003f51 	.word	0x08003f51
 8003f04:	08003f3f 	.word	0x08003f3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0202 	orr.w	r2, r2, #2
 8003f16:	60da      	str	r2, [r3, #12]
      break;
 8003f18:	e01b      	b.n	8003f52 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0204 	orr.w	r2, r2, #4
 8003f28:	60da      	str	r2, [r3, #12]
      break;
 8003f2a:	e012      	b.n	8003f52 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0208 	orr.w	r2, r2, #8
 8003f3a:	60da      	str	r2, [r3, #12]
      break;
 8003f3c:	e009      	b.n	8003f52 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0210 	orr.w	r2, r2, #16
 8003f4c:	60da      	str	r2, [r3, #12]
      break;
 8003f4e:	e000      	b.n	8003f52 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003f50:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2201      	movs	r2, #1
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fa42 	bl	80053e4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_TIM_IC_Start_IT+0xd8>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d00b      	beq.n	8003f8a <HAL_TIM_IC_Start_IT+0xce>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f78:	d007      	beq.n	8003f8a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	00010007 	.word	0x00010007

08003f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0202 	mvn.w	r2, #2
 8003fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f004 fd44 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fc0c 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fc13 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0204 	mvn.w	r2, #4
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f004 fd1a 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fbe2 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fbe9 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b08      	cmp	r3, #8
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0208 	mvn.w	r2, #8
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2204      	movs	r2, #4
 8004072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f004 fcf0 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fbb8 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fbbf 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0210 	mvn.w	r2, #16
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2208      	movs	r2, #8
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f004 fcc6 	bl	8008a68 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fb8e 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb95 	bl	8004814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d10e      	bne.n	800411c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0201 	mvn.w	r2, #1
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fb68 	bl	80047ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d107      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f001 f9da 	bl	80054fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004156:	d10e      	bne.n	8004176 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d107      	bne.n	8004176 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800416e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f001 f9cd 	bl	8005510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d10e      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb43 	bl	8004828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0220 	mvn.w	r2, #32
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f001 f98d 	bl	80054e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e08a      	b.n	8004306 <HAL_TIM_IC_ConfigChannel+0x130>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11b      	bne.n	800423e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6819      	ldr	r1, [r3, #0]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f000 ff1d 	bl	8005054 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 020c 	bic.w	r2, r2, #12
 8004228:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6999      	ldr	r1, [r3, #24]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	619a      	str	r2, [r3, #24]
 800423c:	e05a      	b.n	80042f4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d11c      	bne.n	800427e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f000 ffa1 	bl	800519a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004266:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	619a      	str	r2, [r3, #24]
 800427c:	e03a      	b.n	80042f4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d11b      	bne.n	80042bc <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f000 ffee 	bl	8005274 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 020c 	bic.w	r2, r2, #12
 80042a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69d9      	ldr	r1, [r3, #28]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	61da      	str	r2, [r3, #28]
 80042ba:	e01b      	b.n	80042f4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f001 f80e 	bl	80052ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042de:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69d9      	ldr	r1, [r3, #28]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004326:	2302      	movs	r3, #2
 8004328:	e105      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x226>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b14      	cmp	r3, #20
 800433e:	f200 80f0 	bhi.w	8004522 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800439d 	.word	0x0800439d
 800434c:	08004523 	.word	0x08004523
 8004350:	08004523 	.word	0x08004523
 8004354:	08004523 	.word	0x08004523
 8004358:	080043dd 	.word	0x080043dd
 800435c:	08004523 	.word	0x08004523
 8004360:	08004523 	.word	0x08004523
 8004364:	08004523 	.word	0x08004523
 8004368:	0800441f 	.word	0x0800441f
 800436c:	08004523 	.word	0x08004523
 8004370:	08004523 	.word	0x08004523
 8004374:	08004523 	.word	0x08004523
 8004378:	0800445f 	.word	0x0800445f
 800437c:	08004523 	.word	0x08004523
 8004380:	08004523 	.word	0x08004523
 8004384:	08004523 	.word	0x08004523
 8004388:	080044a1 	.word	0x080044a1
 800438c:	08004523 	.word	0x08004523
 8004390:	08004523 	.word	0x08004523
 8004394:	08004523 	.word	0x08004523
 8004398:	080044e1 	.word	0x080044e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fae4 	bl	8004970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0208 	orr.w	r2, r2, #8
 80043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	619a      	str	r2, [r3, #24]
      break;
 80043da:	e0a3      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fb54 	bl	8004a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	021a      	lsls	r2, r3, #8
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	619a      	str	r2, [r3, #24]
      break;
 800441c:	e082      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fbbd 	bl	8004ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0208 	orr.w	r2, r2, #8
 8004438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0204 	bic.w	r2, r2, #4
 8004448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	61da      	str	r2, [r3, #28]
      break;
 800445c:	e062      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fc23 	bl	8004cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	021a      	lsls	r2, r3, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	61da      	str	r2, [r3, #28]
      break;
 800449e:	e041      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fc6a 	bl	8004d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044de:	e021      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fcac 	bl	8004e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004520:	e000      	b.n	8004524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004522:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop

08004540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIM_ConfigClockSource+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e0b7      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x188>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4b57      	ldr	r3, [pc, #348]	; (80046d0 <HAL_TIM_ConfigClockSource+0x190>)
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b70      	cmp	r3, #112	; 0x70
 800458e:	d02e      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0xae>
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d812      	bhi.n	80045ba <HAL_TIM_ConfigClockSource+0x7a>
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	f000 8084 	beq.w	80046a2 <HAL_TIM_ConfigClockSource+0x162>
 800459a:	2b30      	cmp	r3, #48	; 0x30
 800459c:	d806      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x6c>
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d07f      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d07d      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d07b      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80045aa:	e084      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80045ac:	2b50      	cmp	r3, #80	; 0x50
 80045ae:	d048      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0x102>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d056      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0x122>
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d064      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x142>
      break;
 80045b8:	e07d      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80045ba:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045be:	d070      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
 80045c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80045c4:	d809      	bhi.n	80045da <HAL_TIM_ConfigClockSource+0x9a>
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	d027      	beq.n	800461c <HAL_TIM_ConfigClockSource+0xdc>
 80045cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d0:	d067      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d06d      	beq.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045d8:	e06d      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80045da:	4a3e      	ldr	r2, [pc, #248]	; (80046d4 <HAL_TIM_ConfigClockSource+0x194>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d060      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
 80045e0:	4a3d      	ldr	r2, [pc, #244]	; (80046d8 <HAL_TIM_ConfigClockSource+0x198>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d05d      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
 80045e6:	4a3d      	ldr	r2, [pc, #244]	; (80046dc <HAL_TIM_ConfigClockSource+0x19c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d05a      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80045ec:	e063      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f000 fed1 	bl	80053a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004610:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	609a      	str	r2, [r3, #8]
      break;
 800461a:	e04c      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f000 feba 	bl	80053a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463e:	609a      	str	r2, [r3, #8]
      break;
 8004640:	e039      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	f000 fd74 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2150      	movs	r1, #80	; 0x50
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fe84 	bl	8005368 <TIM_ITRx_SetConfig>
      break;
 8004660:	e029      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	461a      	mov	r2, r3
 8004670:	f000 fdd0 	bl	8005214 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2160      	movs	r1, #96	; 0x60
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fe74 	bl	8005368 <TIM_ITRx_SetConfig>
      break;
 8004680:	e019      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	f000 fd54 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fe64 	bl	8005368 <TIM_ITRx_SetConfig>
      break;
 80046a0:	e009      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f000 fe5b 	bl	8005368 <TIM_ITRx_SetConfig>
      break;
 80046b2:	e000      	b.n	80046b6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80046b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	ffceff88 	.word	0xffceff88
 80046d4:	00100030 	.word	0x00100030
 80046d8:	00100040 	.word	0x00100040
 80046dc:	00100020 	.word	0x00100020

080046e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e031      	b.n	800475c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fbfe 	bl	8004f0c <TIM_SlaveTimer_SetConfig>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e018      	b.n	800475c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004738:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004748:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	d831      	bhi.n	80047dc <HAL_TIM_ReadCapturedValue+0x78>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <HAL_TIM_ReadCapturedValue+0x1c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047dd 	.word	0x080047dd
 8004788:	080047dd 	.word	0x080047dd
 800478c:	080047dd 	.word	0x080047dd
 8004790:	080047bf 	.word	0x080047bf
 8004794:	080047dd 	.word	0x080047dd
 8004798:	080047dd 	.word	0x080047dd
 800479c:	080047dd 	.word	0x080047dd
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047dd 	.word	0x080047dd
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080047dd 	.word	0x080047dd
 80047b0:	080047d3 	.word	0x080047d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ba:	60fb      	str	r3, [r7, #12]

      break;
 80047bc:	e00f      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	60fb      	str	r3, [r7, #12]

      break;
 80047c6:	e00a      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	60fb      	str	r3, [r7, #12]

      break;
 80047d0:	e005      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	60fb      	str	r3, [r7, #12]

      break;
 80047da:	e000      	b.n	80047de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047dc:	bf00      	nop
  }

  return tmpreg;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a40      	ldr	r2, [pc, #256]	; (8004950 <TIM_Base_SetConfig+0x114>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485a:	d00f      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3d      	ldr	r2, [pc, #244]	; (8004954 <TIM_Base_SetConfig+0x118>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00b      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a3c      	ldr	r2, [pc, #240]	; (8004958 <TIM_Base_SetConfig+0x11c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3b      	ldr	r2, [pc, #236]	; (800495c <TIM_Base_SetConfig+0x120>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3a      	ldr	r2, [pc, #232]	; (8004960 <TIM_Base_SetConfig+0x124>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2f      	ldr	r2, [pc, #188]	; (8004950 <TIM_Base_SetConfig+0x114>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d01b      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2c      	ldr	r2, [pc, #176]	; (8004954 <TIM_Base_SetConfig+0x118>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d017      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	; (8004958 <TIM_Base_SetConfig+0x11c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <TIM_Base_SetConfig+0x120>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <TIM_Base_SetConfig+0x124>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a28      	ldr	r2, [pc, #160]	; (8004964 <TIM_Base_SetConfig+0x128>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a27      	ldr	r2, [pc, #156]	; (8004968 <TIM_Base_SetConfig+0x12c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0x9a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a26      	ldr	r2, [pc, #152]	; (800496c <TIM_Base_SetConfig+0x130>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a10      	ldr	r2, [pc, #64]	; (8004950 <TIM_Base_SetConfig+0x114>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00f      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a11      	ldr	r2, [pc, #68]	; (8004964 <TIM_Base_SetConfig+0x128>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a10      	ldr	r2, [pc, #64]	; (8004968 <TIM_Base_SetConfig+0x12c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_Base_SetConfig+0xf8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <TIM_Base_SetConfig+0x130>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d103      	bne.n	800493c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	615a      	str	r2, [r3, #20]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40010400 	.word	0x40010400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0201 	bic.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <TIM_OC1_SetConfig+0x108>)
 800499c:	4013      	ands	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 0302 	bic.w	r3, r3, #2
 80049b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2d      	ldr	r2, [pc, #180]	; (8004a7c <TIM_OC1_SetConfig+0x10c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00f      	beq.n	80049ec <TIM_OC1_SetConfig+0x7c>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	; (8004a80 <TIM_OC1_SetConfig+0x110>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00b      	beq.n	80049ec <TIM_OC1_SetConfig+0x7c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a2b      	ldr	r2, [pc, #172]	; (8004a84 <TIM_OC1_SetConfig+0x114>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <TIM_OC1_SetConfig+0x7c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a2a      	ldr	r2, [pc, #168]	; (8004a88 <TIM_OC1_SetConfig+0x118>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_OC1_SetConfig+0x7c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <TIM_OC1_SetConfig+0x11c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10c      	bne.n	8004a06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0308 	bic.w	r3, r3, #8
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <TIM_OC1_SetConfig+0x10c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00f      	beq.n	8004a2e <TIM_OC1_SetConfig+0xbe>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <TIM_OC1_SetConfig+0x110>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00b      	beq.n	8004a2e <TIM_OC1_SetConfig+0xbe>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <TIM_OC1_SetConfig+0x114>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d007      	beq.n	8004a2e <TIM_OC1_SetConfig+0xbe>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <TIM_OC1_SetConfig+0x118>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d003      	beq.n	8004a2e <TIM_OC1_SetConfig+0xbe>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <TIM_OC1_SetConfig+0x11c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d111      	bne.n	8004a52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	fffeff8f 	.word	0xfffeff8f
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f023 0210 	bic.w	r2, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <TIM_OC2_SetConfig+0xfc>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0320 	bic.w	r3, r3, #32
 8004ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <TIM_OC2_SetConfig+0x100>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_OC2_SetConfig+0x68>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <TIM_OC2_SetConfig+0x104>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10d      	bne.n	8004b14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <TIM_OC2_SetConfig+0x100>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00f      	beq.n	8004b3c <TIM_OC2_SetConfig+0xac>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <TIM_OC2_SetConfig+0x104>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00b      	beq.n	8004b3c <TIM_OC2_SetConfig+0xac>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <TIM_OC2_SetConfig+0x108>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_OC2_SetConfig+0xac>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <TIM_OC2_SetConfig+0x10c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC2_SetConfig+0xac>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a1a      	ldr	r2, [pc, #104]	; (8004ba0 <TIM_OC2_SetConfig+0x110>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d113      	bne.n	8004b64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	feff8fff 	.word	0xfeff8fff
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010400 	.word	0x40010400
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400
 8004ba0:	40014800 	.word	0x40014800

08004ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0303 	bic.w	r3, r3, #3
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <TIM_OC3_SetConfig+0xf8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <TIM_OC3_SetConfig+0x66>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <TIM_OC3_SetConfig+0xfc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10d      	bne.n	8004c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <TIM_OC3_SetConfig+0xf8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00f      	beq.n	8004c4e <TIM_OC3_SetConfig+0xaa>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <TIM_OC3_SetConfig+0xfc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00b      	beq.n	8004c4e <TIM_OC3_SetConfig+0xaa>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <TIM_OC3_SetConfig+0x100>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d007      	beq.n	8004c4e <TIM_OC3_SetConfig+0xaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <TIM_OC3_SetConfig+0x104>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_OC3_SetConfig+0xaa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a18      	ldr	r2, [pc, #96]	; (8004cac <TIM_OC3_SetConfig+0x108>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d113      	bne.n	8004c76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40010400 	.word	0x40010400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800

08004cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <TIM_OC4_SetConfig+0xbc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_OC4_SetConfig+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <TIM_OC4_SetConfig+0xc0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00b      	beq.n	8004d30 <TIM_OC4_SetConfig+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <TIM_OC4_SetConfig+0xc4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_OC4_SetConfig+0x80>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC4_SetConfig+0xc8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_OC4_SetConfig+0x80>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <TIM_OC4_SetConfig+0xcc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d109      	bne.n	8004d44 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40010400 	.word	0x40010400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <TIM_OC5_SetConfig+0xb0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_OC5_SetConfig+0x76>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <TIM_OC5_SetConfig+0xb4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_OC5_SetConfig+0x76>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC5_SetConfig+0xb8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_OC5_SetConfig+0x76>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM_OC5_SetConfig+0xbc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC5_SetConfig+0x76>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM_OC5_SetConfig+0xc0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d109      	bne.n	8004e0a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800

08004e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	051b      	lsls	r3, r3, #20
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <TIM_OC6_SetConfig+0xb4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a17      	ldr	r2, [pc, #92]	; (8004efc <TIM_OC6_SetConfig+0xb8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <TIM_OC6_SetConfig+0xbc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <TIM_OC6_SetConfig+0xc0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC6_SetConfig+0x78>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <TIM_OC6_SetConfig+0xc4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	029b      	lsls	r3, r3, #10
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800

08004f0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4b47      	ldr	r3, [pc, #284]	; (8005040 <TIM_SlaveTimer_SetConfig+0x134>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4b44      	ldr	r3, [pc, #272]	; (8005044 <TIM_SlaveTimer_SetConfig+0x138>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b60      	cmp	r3, #96	; 0x60
 8004f50:	d065      	beq.n	800501e <TIM_SlaveTimer_SetConfig+0x112>
 8004f52:	2b60      	cmp	r3, #96	; 0x60
 8004f54:	d80f      	bhi.n	8004f76 <TIM_SlaveTimer_SetConfig+0x6a>
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d06b      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d804      	bhi.n	8004f68 <TIM_SlaveTimer_SetConfig+0x5c>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d067      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d065      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004f66:	e065      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d025      	beq.n	8004fb8 <TIM_SlaveTimer_SetConfig+0xac>
 8004f6c:	2b50      	cmp	r3, #80	; 0x50
 8004f6e:	d04c      	beq.n	800500a <TIM_SlaveTimer_SetConfig+0xfe>
 8004f70:	2b30      	cmp	r3, #48	; 0x30
 8004f72:	d05e      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8004f74:	e05e      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8004f76:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f7a:	d05a      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
 8004f7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f80:	d805      	bhi.n	8004f8e <TIM_SlaveTimer_SetConfig+0x82>
 8004f82:	2b70      	cmp	r3, #112	; 0x70
 8004f84:	d00d      	beq.n	8004fa2 <TIM_SlaveTimer_SetConfig+0x96>
 8004f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8a:	d052      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8004f8c:	e052      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
  switch (sSlaveConfig->InputTrigger)
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <TIM_SlaveTimer_SetConfig+0x13c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d04e      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
 8004f94:	4a2d      	ldr	r2, [pc, #180]	; (800504c <TIM_SlaveTimer_SetConfig+0x140>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d04b      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
 8004f9a:	4a2d      	ldr	r2, [pc, #180]	; (8005050 <TIM_SlaveTimer_SetConfig+0x144>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d048      	beq.n	8005032 <TIM_SlaveTimer_SetConfig+0x126>
      break;
 8004fa0:	e048      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_ETR_SetConfig(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68d9      	ldr	r1, [r3, #12]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f000 f9f7 	bl	80053a4 <TIM_ETR_SetConfig>
      break;
 8004fb6:	e03d      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d101      	bne.n	8004fc4 <TIM_SlaveTimer_SetConfig+0xb8>
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e038      	b.n	8005036 <TIM_SlaveTimer_SetConfig+0x12a>
      tmpccer = htim->Instance->CCER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fea:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	621a      	str	r2, [r3, #32]
      break;
 8005008:	e014      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6899      	ldr	r1, [r3, #8]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	461a      	mov	r2, r3
 8005018:	f000 f890 	bl	800513c <TIM_TI1_ConfigInputStage>
      break;
 800501c:	e00a      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	461a      	mov	r2, r3
 800502c:	f000 f8f2 	bl	8005214 <TIM_TI2_ConfigInputStage>
      break;
 8005030:	e000      	b.n	8005034 <TIM_SlaveTimer_SetConfig+0x128>
      break;
 8005032:	bf00      	nop
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	ffcfff8f 	.word	0xffcfff8f
 8005044:	fffefff8 	.word	0xfffefff8
 8005048:	00100030 	.word	0x00100030
 800504c:	00100040 	.word	0x00100040
 8005050:	00100020 	.word	0x00100020

08005054 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a28      	ldr	r2, [pc, #160]	; (8005120 <TIM_TI1_SetConfig+0xcc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01b      	beq.n	80050ba <TIM_TI1_SetConfig+0x66>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005088:	d017      	beq.n	80050ba <TIM_TI1_SetConfig+0x66>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a25      	ldr	r2, [pc, #148]	; (8005124 <TIM_TI1_SetConfig+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <TIM_TI1_SetConfig+0x66>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a24      	ldr	r2, [pc, #144]	; (8005128 <TIM_TI1_SetConfig+0xd4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00f      	beq.n	80050ba <TIM_TI1_SetConfig+0x66>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a23      	ldr	r2, [pc, #140]	; (800512c <TIM_TI1_SetConfig+0xd8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_TI1_SetConfig+0x66>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a22      	ldr	r2, [pc, #136]	; (8005130 <TIM_TI1_SetConfig+0xdc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d007      	beq.n	80050ba <TIM_TI1_SetConfig+0x66>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a21      	ldr	r2, [pc, #132]	; (8005134 <TIM_TI1_SetConfig+0xe0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_TI1_SetConfig+0x66>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a20      	ldr	r2, [pc, #128]	; (8005138 <TIM_TI1_SetConfig+0xe4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <TIM_TI1_SetConfig+0x6a>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <TIM_TI1_SetConfig+0x6c>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0303 	bic.w	r3, r3, #3
 80050ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e003      	b.n	80050de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f023 030a 	bic.w	r3, r3, #10
 80050f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 030a 	and.w	r3, r3, #10
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40010400 	.word	0x40010400
 8005134:	40001800 	.word	0x40001800
 8005138:	40014000 	.word	0x40014000

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 030a 	bic.w	r3, r3, #10
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f023 0210 	bic.w	r2, r3, #16
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	b29b      	uxth	r3, r3
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	621a      	str	r2, [r3, #32]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f023 0210 	bic.w	r2, r3, #16
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800523e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	031b      	lsls	r3, r3, #12
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005250:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	621a      	str	r2, [r3, #32]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0303 	bic.w	r3, r3, #3
 80052a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80052c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	621a      	str	r2, [r3, #32]
}
 80052e0:	bf00      	nop
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005318:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800532a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	031b      	lsls	r3, r3, #12
 8005330:	b29b      	uxth	r3, r3
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800533e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	031b      	lsls	r3, r3, #12
 8005344:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <TIM_ITRx_SetConfig+0x38>)
 800537c:	4013      	ands	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	f043 0307 	orr.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	609a      	str	r2, [r3, #8]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	ffcfff8f 	.word	0xffcfff8f

080053a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	021a      	lsls	r2, r3, #8
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2201      	movs	r2, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	43db      	mvns	r3, r3
 8005406:	401a      	ands	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005444:	2302      	movs	r3, #2
 8005446:	e045      	b.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005482:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400

080054e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e042      	b.n	80055bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f003 fc5f 	bl	8008e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2224      	movs	r2, #36	; 0x24
 8005552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f82e 	bl	80055c8 <UART_SetConfig>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e022      	b.n	80055bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f002 f9a0 	bl	80078c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f002 fa27 	bl	8007a08 <UART_CheckIdleState>
 80055ba:	4603      	mov	r3, r0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	0000      	movs	r0, r0
	...

080055c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80055cc:	b090      	sub	sp, #64	; 0x40
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055fe:	4313      	orrs	r3, r2
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4bc1      	ldr	r3, [pc, #772]	; (8005910 <UART_SetConfig+0x348>)
 800560a:	4013      	ands	r3, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005612:	430b      	orrs	r3, r1
 8005614:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4ab7      	ldr	r2, [pc, #732]	; (8005914 <UART_SetConfig+0x34c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005642:	4313      	orrs	r3, r2
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	4bb2      	ldr	r3, [pc, #712]	; (8005918 <UART_SetConfig+0x350>)
 800564e:	4013      	ands	r3, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005656:	430b      	orrs	r3, r1
 8005658:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	f023 010f 	bic.w	r1, r3, #15
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4aa9      	ldr	r2, [pc, #676]	; (800591c <UART_SetConfig+0x354>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d177      	bne.n	800576a <UART_SetConfig+0x1a2>
 800567a:	4ba9      	ldr	r3, [pc, #676]	; (8005920 <UART_SetConfig+0x358>)
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005682:	2b28      	cmp	r3, #40	; 0x28
 8005684:	d86c      	bhi.n	8005760 <UART_SetConfig+0x198>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0xc4>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	08005731 	.word	0x08005731
 8005690:	08005761 	.word	0x08005761
 8005694:	08005761 	.word	0x08005761
 8005698:	08005761 	.word	0x08005761
 800569c:	08005761 	.word	0x08005761
 80056a0:	08005761 	.word	0x08005761
 80056a4:	08005761 	.word	0x08005761
 80056a8:	08005761 	.word	0x08005761
 80056ac:	08005739 	.word	0x08005739
 80056b0:	08005761 	.word	0x08005761
 80056b4:	08005761 	.word	0x08005761
 80056b8:	08005761 	.word	0x08005761
 80056bc:	08005761 	.word	0x08005761
 80056c0:	08005761 	.word	0x08005761
 80056c4:	08005761 	.word	0x08005761
 80056c8:	08005761 	.word	0x08005761
 80056cc:	08005741 	.word	0x08005741
 80056d0:	08005761 	.word	0x08005761
 80056d4:	08005761 	.word	0x08005761
 80056d8:	08005761 	.word	0x08005761
 80056dc:	08005761 	.word	0x08005761
 80056e0:	08005761 	.word	0x08005761
 80056e4:	08005761 	.word	0x08005761
 80056e8:	08005761 	.word	0x08005761
 80056ec:	08005749 	.word	0x08005749
 80056f0:	08005761 	.word	0x08005761
 80056f4:	08005761 	.word	0x08005761
 80056f8:	08005761 	.word	0x08005761
 80056fc:	08005761 	.word	0x08005761
 8005700:	08005761 	.word	0x08005761
 8005704:	08005761 	.word	0x08005761
 8005708:	08005761 	.word	0x08005761
 800570c:	08005751 	.word	0x08005751
 8005710:	08005761 	.word	0x08005761
 8005714:	08005761 	.word	0x08005761
 8005718:	08005761 	.word	0x08005761
 800571c:	08005761 	.word	0x08005761
 8005720:	08005761 	.word	0x08005761
 8005724:	08005761 	.word	0x08005761
 8005728:	08005761 	.word	0x08005761
 800572c:	08005759 	.word	0x08005759
 8005730:	2301      	movs	r3, #1
 8005732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005736:	e233      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005738:	2304      	movs	r3, #4
 800573a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800573e:	e22f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005740:	2308      	movs	r3, #8
 8005742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005746:	e22b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800574e:	e227      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005750:	2320      	movs	r3, #32
 8005752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005756:	e223      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005758:	2340      	movs	r3, #64	; 0x40
 800575a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800575e:	e21f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005766:	bf00      	nop
 8005768:	e21a      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a6d      	ldr	r2, [pc, #436]	; (8005924 <UART_SetConfig+0x35c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d132      	bne.n	80057da <UART_SetConfig+0x212>
 8005774:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <UART_SetConfig+0x358>)
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	2b05      	cmp	r3, #5
 800577e:	d827      	bhi.n	80057d0 <UART_SetConfig+0x208>
 8005780:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0x1c0>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	080057a1 	.word	0x080057a1
 800578c:	080057a9 	.word	0x080057a9
 8005790:	080057b1 	.word	0x080057b1
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057c1 	.word	0x080057c1
 800579c:	080057c9 	.word	0x080057c9
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057a6:	e1fb      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057ae:	e1f7      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057b6:	e1f3      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057be:	e1ef      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80057c0:	2320      	movs	r3, #32
 80057c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057c6:	e1eb      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057ce:	e1e7      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80057d6:	bf00      	nop
 80057d8:	e1e2      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a52      	ldr	r2, [pc, #328]	; (8005928 <UART_SetConfig+0x360>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d132      	bne.n	800584a <UART_SetConfig+0x282>
 80057e4:	4b4e      	ldr	r3, [pc, #312]	; (8005920 <UART_SetConfig+0x358>)
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d827      	bhi.n	8005840 <UART_SetConfig+0x278>
 80057f0:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x230>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	08005811 	.word	0x08005811
 80057fc:	08005819 	.word	0x08005819
 8005800:	08005821 	.word	0x08005821
 8005804:	08005829 	.word	0x08005829
 8005808:	08005831 	.word	0x08005831
 800580c:	08005839 	.word	0x08005839
 8005810:	2300      	movs	r3, #0
 8005812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005816:	e1c3      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005818:	2304      	movs	r3, #4
 800581a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800581e:	e1bf      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005820:	2308      	movs	r3, #8
 8005822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005826:	e1bb      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005828:	2310      	movs	r3, #16
 800582a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800582e:	e1b7      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005830:	2320      	movs	r3, #32
 8005832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005836:	e1b3      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005838:	2340      	movs	r3, #64	; 0x40
 800583a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800583e:	e1af      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005846:	bf00      	nop
 8005848:	e1aa      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a37      	ldr	r2, [pc, #220]	; (800592c <UART_SetConfig+0x364>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d132      	bne.n	80058ba <UART_SetConfig+0x2f2>
 8005854:	4b32      	ldr	r3, [pc, #200]	; (8005920 <UART_SetConfig+0x358>)
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	2b05      	cmp	r3, #5
 800585e:	d827      	bhi.n	80058b0 <UART_SetConfig+0x2e8>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <UART_SetConfig+0x2a0>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005881 	.word	0x08005881
 800586c:	08005889 	.word	0x08005889
 8005870:	08005891 	.word	0x08005891
 8005874:	08005899 	.word	0x08005899
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058a9 	.word	0x080058a9
 8005880:	2300      	movs	r3, #0
 8005882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005886:	e18b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005888:	2304      	movs	r3, #4
 800588a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800588e:	e187      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005890:	2308      	movs	r3, #8
 8005892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005896:	e183      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005898:	2310      	movs	r3, #16
 800589a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800589e:	e17f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80058a0:	2320      	movs	r3, #32
 80058a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058a6:	e17b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80058a8:	2340      	movs	r3, #64	; 0x40
 80058aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058ae:	e177      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058b6:	bf00      	nop
 80058b8:	e172      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <UART_SetConfig+0x368>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d144      	bne.n	800594e <UART_SetConfig+0x386>
 80058c4:	4b16      	ldr	r3, [pc, #88]	; (8005920 <UART_SetConfig+0x358>)
 80058c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d839      	bhi.n	8005944 <UART_SetConfig+0x37c>
 80058d0:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <UART_SetConfig+0x310>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	080058f1 	.word	0x080058f1
 80058dc:	080058f9 	.word	0x080058f9
 80058e0:	08005901 	.word	0x08005901
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005935 	.word	0x08005935
 80058ec:	0800593d 	.word	0x0800593d
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058f6:	e153      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 80058f8:	2304      	movs	r3, #4
 80058fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80058fe:	e14f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005900:	2308      	movs	r3, #8
 8005902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005906:	e14b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005908:	2310      	movs	r3, #16
 800590a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800590e:	e147      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005910:	cfff69f3 	.word	0xcfff69f3
 8005914:	58000c00 	.word	0x58000c00
 8005918:	11fff4ff 	.word	0x11fff4ff
 800591c:	40011000 	.word	0x40011000
 8005920:	58024400 	.word	0x58024400
 8005924:	40004400 	.word	0x40004400
 8005928:	40004800 	.word	0x40004800
 800592c:	40004c00 	.word	0x40004c00
 8005930:	40005000 	.word	0x40005000
 8005934:	2320      	movs	r3, #32
 8005936:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800593a:	e131      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 800593c:	2340      	movs	r3, #64	; 0x40
 800593e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005942:	e12d      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800594a:	bf00      	nop
 800594c:	e128      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4ac3      	ldr	r2, [pc, #780]	; (8005c60 <UART_SetConfig+0x698>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d178      	bne.n	8005a4a <UART_SetConfig+0x482>
 8005958:	4bc2      	ldr	r3, [pc, #776]	; (8005c64 <UART_SetConfig+0x69c>)
 800595a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005960:	2b28      	cmp	r3, #40	; 0x28
 8005962:	d86d      	bhi.n	8005a40 <UART_SetConfig+0x478>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0x3a4>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	08005a11 	.word	0x08005a11
 8005970:	08005a41 	.word	0x08005a41
 8005974:	08005a41 	.word	0x08005a41
 8005978:	08005a41 	.word	0x08005a41
 800597c:	08005a41 	.word	0x08005a41
 8005980:	08005a41 	.word	0x08005a41
 8005984:	08005a41 	.word	0x08005a41
 8005988:	08005a41 	.word	0x08005a41
 800598c:	08005a19 	.word	0x08005a19
 8005990:	08005a41 	.word	0x08005a41
 8005994:	08005a41 	.word	0x08005a41
 8005998:	08005a41 	.word	0x08005a41
 800599c:	08005a41 	.word	0x08005a41
 80059a0:	08005a41 	.word	0x08005a41
 80059a4:	08005a41 	.word	0x08005a41
 80059a8:	08005a41 	.word	0x08005a41
 80059ac:	08005a21 	.word	0x08005a21
 80059b0:	08005a41 	.word	0x08005a41
 80059b4:	08005a41 	.word	0x08005a41
 80059b8:	08005a41 	.word	0x08005a41
 80059bc:	08005a41 	.word	0x08005a41
 80059c0:	08005a41 	.word	0x08005a41
 80059c4:	08005a41 	.word	0x08005a41
 80059c8:	08005a41 	.word	0x08005a41
 80059cc:	08005a29 	.word	0x08005a29
 80059d0:	08005a41 	.word	0x08005a41
 80059d4:	08005a41 	.word	0x08005a41
 80059d8:	08005a41 	.word	0x08005a41
 80059dc:	08005a41 	.word	0x08005a41
 80059e0:	08005a41 	.word	0x08005a41
 80059e4:	08005a41 	.word	0x08005a41
 80059e8:	08005a41 	.word	0x08005a41
 80059ec:	08005a31 	.word	0x08005a31
 80059f0:	08005a41 	.word	0x08005a41
 80059f4:	08005a41 	.word	0x08005a41
 80059f8:	08005a41 	.word	0x08005a41
 80059fc:	08005a41 	.word	0x08005a41
 8005a00:	08005a41 	.word	0x08005a41
 8005a04:	08005a41 	.word	0x08005a41
 8005a08:	08005a41 	.word	0x08005a41
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a16:	e0c3      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a1e:	e0bf      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a26:	e0bb      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a2e:	e0b7      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a30:	2320      	movs	r3, #32
 8005a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a36:	e0b3      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a3e:	e0af      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a46:	bf00      	nop
 8005a48:	e0aa      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a86      	ldr	r2, [pc, #536]	; (8005c68 <UART_SetConfig+0x6a0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d132      	bne.n	8005aba <UART_SetConfig+0x4f2>
 8005a54:	4b83      	ldr	r3, [pc, #524]	; (8005c64 <UART_SetConfig+0x69c>)
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d827      	bhi.n	8005ab0 <UART_SetConfig+0x4e8>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <UART_SetConfig+0x4a0>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a81 	.word	0x08005a81
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005a91 	.word	0x08005a91
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a86:	e08b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a8e:	e087      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a96:	e083      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005a9e:	e07f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005aa6:	e07b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005aae:	e077      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ab6:	bf00      	nop
 8005ab8:	e072      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a6b      	ldr	r2, [pc, #428]	; (8005c6c <UART_SetConfig+0x6a4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d132      	bne.n	8005b2a <UART_SetConfig+0x562>
 8005ac4:	4b67      	ldr	r3, [pc, #412]	; (8005c64 <UART_SetConfig+0x69c>)
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d827      	bhi.n	8005b20 <UART_SetConfig+0x558>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <UART_SetConfig+0x510>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005af1 	.word	0x08005af1
 8005adc:	08005af9 	.word	0x08005af9
 8005ae0:	08005b01 	.word	0x08005b01
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b11 	.word	0x08005b11
 8005aec:	08005b19 	.word	0x08005b19
 8005af0:	2300      	movs	r3, #0
 8005af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005af6:	e053      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005afe:	e04f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b06:	e04b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b0e:	e047      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b10:	2320      	movs	r3, #32
 8005b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b16:	e043      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b1e:	e03f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b26:	bf00      	nop
 8005b28:	e03a      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a50      	ldr	r2, [pc, #320]	; (8005c70 <UART_SetConfig+0x6a8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d132      	bne.n	8005b9a <UART_SetConfig+0x5d2>
 8005b34:	4b4b      	ldr	r3, [pc, #300]	; (8005c64 <UART_SetConfig+0x69c>)
 8005b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	2b05      	cmp	r3, #5
 8005b3e:	d827      	bhi.n	8005b90 <UART_SetConfig+0x5c8>
 8005b40:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0x580>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b61 	.word	0x08005b61
 8005b4c:	08005b69 	.word	0x08005b69
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b81 	.word	0x08005b81
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	2302      	movs	r3, #2
 8005b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b66:	e01b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b6e:	e017      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b76:	e013      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b7e:	e00f      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b80:	2320      	movs	r3, #32
 8005b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b86:	e00b      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b8e:	e007      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <UART_SetConfig+0x5d8>
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a32      	ldr	r2, [pc, #200]	; (8005c70 <UART_SetConfig+0x6a8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f040 86f7 	bne.w	800699a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	f000 80c0 	beq.w	8005d36 <UART_SetConfig+0x76e>
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	dc04      	bgt.n	8005bc4 <UART_SetConfig+0x5fc>
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d00c      	beq.n	8005bd8 <UART_SetConfig+0x610>
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d065      	beq.n	8005c8e <UART_SetConfig+0x6c6>
 8005bc2:	e27a      	b.n	80060ba <UART_SetConfig+0xaf2>
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f000 81b0 	beq.w	8005f2a <UART_SetConfig+0x962>
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	f000 821e 	beq.w	800600c <UART_SetConfig+0xa44>
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	f000 8104 	beq.w	8005dde <UART_SetConfig+0x816>
 8005bd6:	e270      	b.n	80060ba <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005bd8:	f7fd fc54 	bl	8003484 <HAL_RCCEx_GetD3PCLK1Freq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d04e      	beq.n	8005c84 <UART_SetConfig+0x6bc>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d048      	beq.n	8005c80 <UART_SetConfig+0x6b8>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d042      	beq.n	8005c7c <UART_SetConfig+0x6b4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d03c      	beq.n	8005c78 <UART_SetConfig+0x6b0>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d036      	beq.n	8005c74 <UART_SetConfig+0x6ac>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	d026      	beq.n	8005c5c <UART_SetConfig+0x694>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b06      	cmp	r3, #6
 8005c14:	d020      	beq.n	8005c58 <UART_SetConfig+0x690>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	2b07      	cmp	r3, #7
 8005c1c:	d01a      	beq.n	8005c54 <UART_SetConfig+0x68c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d014      	beq.n	8005c50 <UART_SetConfig+0x688>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d00e      	beq.n	8005c4c <UART_SetConfig+0x684>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b0a      	cmp	r3, #10
 8005c34:	d008      	beq.n	8005c48 <UART_SetConfig+0x680>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b0b      	cmp	r3, #11
 8005c3c:	d102      	bne.n	8005c44 <UART_SetConfig+0x67c>
 8005c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c42:	e020      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e01e      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c48:	2380      	movs	r3, #128	; 0x80
 8005c4a:	e01c      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c4c:	2340      	movs	r3, #64	; 0x40
 8005c4e:	e01a      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c50:	2320      	movs	r3, #32
 8005c52:	e018      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c54:	2310      	movs	r3, #16
 8005c56:	e016      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	e014      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c5c:	230a      	movs	r3, #10
 8005c5e:	e012      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c60:	40011400 	.word	0x40011400
 8005c64:	58024400 	.word	0x58024400
 8005c68:	40007800 	.word	0x40007800
 8005c6c:	40007c00 	.word	0x40007c00
 8005c70:	58000c00 	.word	0x58000c00
 8005c74:	2308      	movs	r3, #8
 8005c76:	e006      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c78:	2306      	movs	r3, #6
 8005c7a:	e004      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	e002      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e000      	b.n	8005c86 <UART_SetConfig+0x6be>
 8005c84:	2301      	movs	r3, #1
 8005c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c8c:	e219      	b.n	80060c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c8e:	f107 0318 	add.w	r3, r7, #24
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd fc0c 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d044      	beq.n	8005d2c <UART_SetConfig+0x764>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d03e      	beq.n	8005d28 <UART_SetConfig+0x760>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d038      	beq.n	8005d24 <UART_SetConfig+0x75c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d032      	beq.n	8005d20 <UART_SetConfig+0x758>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d02c      	beq.n	8005d1c <UART_SetConfig+0x754>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d026      	beq.n	8005d18 <UART_SetConfig+0x750>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b06      	cmp	r3, #6
 8005cd0:	d020      	beq.n	8005d14 <UART_SetConfig+0x74c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b07      	cmp	r3, #7
 8005cd8:	d01a      	beq.n	8005d10 <UART_SetConfig+0x748>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d014      	beq.n	8005d0c <UART_SetConfig+0x744>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b09      	cmp	r3, #9
 8005ce8:	d00e      	beq.n	8005d08 <UART_SetConfig+0x740>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b0a      	cmp	r3, #10
 8005cf0:	d008      	beq.n	8005d04 <UART_SetConfig+0x73c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b0b      	cmp	r3, #11
 8005cf8:	d102      	bne.n	8005d00 <UART_SetConfig+0x738>
 8005cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cfe:	e016      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e014      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d08:	2340      	movs	r3, #64	; 0x40
 8005d0a:	e010      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	e00e      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d10:	2310      	movs	r3, #16
 8005d12:	e00c      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d14:	230c      	movs	r3, #12
 8005d16:	e00a      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d18:	230a      	movs	r3, #10
 8005d1a:	e008      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	e006      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d20:	2306      	movs	r3, #6
 8005d22:	e004      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d24:	2304      	movs	r3, #4
 8005d26:	e002      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e000      	b.n	8005d2e <UART_SetConfig+0x766>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d34:	e1c5      	b.n	80060c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d36:	f107 030c 	add.w	r3, r7, #12
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fd fd04 	bl	8003748 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d044      	beq.n	8005dd4 <UART_SetConfig+0x80c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d03e      	beq.n	8005dd0 <UART_SetConfig+0x808>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d038      	beq.n	8005dcc <UART_SetConfig+0x804>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d032      	beq.n	8005dc8 <UART_SetConfig+0x800>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d02c      	beq.n	8005dc4 <UART_SetConfig+0x7fc>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d026      	beq.n	8005dc0 <UART_SetConfig+0x7f8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b06      	cmp	r3, #6
 8005d78:	d020      	beq.n	8005dbc <UART_SetConfig+0x7f4>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	2b07      	cmp	r3, #7
 8005d80:	d01a      	beq.n	8005db8 <UART_SetConfig+0x7f0>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d014      	beq.n	8005db4 <UART_SetConfig+0x7ec>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d00e      	beq.n	8005db0 <UART_SetConfig+0x7e8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b0a      	cmp	r3, #10
 8005d98:	d008      	beq.n	8005dac <UART_SetConfig+0x7e4>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b0b      	cmp	r3, #11
 8005da0:	d102      	bne.n	8005da8 <UART_SetConfig+0x7e0>
 8005da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005da6:	e016      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e014      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	e012      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005db0:	2340      	movs	r3, #64	; 0x40
 8005db2:	e010      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005db4:	2320      	movs	r3, #32
 8005db6:	e00e      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005db8:	2310      	movs	r3, #16
 8005dba:	e00c      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	e00a      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dc0:	230a      	movs	r3, #10
 8005dc2:	e008      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	e006      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dc8:	2306      	movs	r3, #6
 8005dca:	e004      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	e002      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e000      	b.n	8005dd6 <UART_SetConfig+0x80e>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ddc:	e171      	b.n	80060c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dde:	4b7a      	ldr	r3, [pc, #488]	; (8005fc8 <UART_SetConfig+0xa00>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d054      	beq.n	8005e94 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005dea:	4b77      	ldr	r3, [pc, #476]	; (8005fc8 <UART_SetConfig+0xa00>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	08db      	lsrs	r3, r3, #3
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	4a75      	ldr	r2, [pc, #468]	; (8005fcc <UART_SetConfig+0xa04>)
 8005df6:	40da      	lsrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d044      	beq.n	8005e8a <UART_SetConfig+0x8c2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d03e      	beq.n	8005e86 <UART_SetConfig+0x8be>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d038      	beq.n	8005e82 <UART_SetConfig+0x8ba>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d032      	beq.n	8005e7e <UART_SetConfig+0x8b6>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d02c      	beq.n	8005e7a <UART_SetConfig+0x8b2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d026      	beq.n	8005e76 <UART_SetConfig+0x8ae>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	2b06      	cmp	r3, #6
 8005e2e:	d020      	beq.n	8005e72 <UART_SetConfig+0x8aa>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b07      	cmp	r3, #7
 8005e36:	d01a      	beq.n	8005e6e <UART_SetConfig+0x8a6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d014      	beq.n	8005e6a <UART_SetConfig+0x8a2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d00e      	beq.n	8005e66 <UART_SetConfig+0x89e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	2b0a      	cmp	r3, #10
 8005e4e:	d008      	beq.n	8005e62 <UART_SetConfig+0x89a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2b0b      	cmp	r3, #11
 8005e56:	d102      	bne.n	8005e5e <UART_SetConfig+0x896>
 8005e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e5c:	e016      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e014      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e62:	2380      	movs	r3, #128	; 0x80
 8005e64:	e012      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e66:	2340      	movs	r3, #64	; 0x40
 8005e68:	e010      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	e00e      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e6e:	2310      	movs	r3, #16
 8005e70:	e00c      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e72:	230c      	movs	r3, #12
 8005e74:	e00a      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e76:	230a      	movs	r3, #10
 8005e78:	e008      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	e006      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e7e:	2306      	movs	r3, #6
 8005e80:	e004      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e82:	2304      	movs	r3, #4
 8005e84:	e002      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e000      	b.n	8005e8c <UART_SetConfig+0x8c4>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005e92:	e116      	b.n	80060c2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d043      	beq.n	8005f24 <UART_SetConfig+0x95c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d03d      	beq.n	8005f20 <UART_SetConfig+0x958>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d037      	beq.n	8005f1c <UART_SetConfig+0x954>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d031      	beq.n	8005f18 <UART_SetConfig+0x950>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d02b      	beq.n	8005f14 <UART_SetConfig+0x94c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	2b05      	cmp	r3, #5
 8005ec2:	d025      	beq.n	8005f10 <UART_SetConfig+0x948>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d01f      	beq.n	8005f0c <UART_SetConfig+0x944>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	2b07      	cmp	r3, #7
 8005ed2:	d019      	beq.n	8005f08 <UART_SetConfig+0x940>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d013      	beq.n	8005f04 <UART_SetConfig+0x93c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	2b09      	cmp	r3, #9
 8005ee2:	d00d      	beq.n	8005f00 <UART_SetConfig+0x938>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b0a      	cmp	r3, #10
 8005eea:	d007      	beq.n	8005efc <UART_SetConfig+0x934>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	2b0b      	cmp	r3, #11
 8005ef2:	d101      	bne.n	8005ef8 <UART_SetConfig+0x930>
 8005ef4:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <UART_SetConfig+0xa08>)
 8005ef6:	e016      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005ef8:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <UART_SetConfig+0xa04>)
 8005efa:	e014      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005efc:	4b35      	ldr	r3, [pc, #212]	; (8005fd4 <UART_SetConfig+0xa0c>)
 8005efe:	e012      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f00:	4b35      	ldr	r3, [pc, #212]	; (8005fd8 <UART_SetConfig+0xa10>)
 8005f02:	e010      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f04:	4b35      	ldr	r3, [pc, #212]	; (8005fdc <UART_SetConfig+0xa14>)
 8005f06:	e00e      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f08:	4b35      	ldr	r3, [pc, #212]	; (8005fe0 <UART_SetConfig+0xa18>)
 8005f0a:	e00c      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f0c:	4b35      	ldr	r3, [pc, #212]	; (8005fe4 <UART_SetConfig+0xa1c>)
 8005f0e:	e00a      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f10:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <UART_SetConfig+0xa20>)
 8005f12:	e008      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f14:	4b35      	ldr	r3, [pc, #212]	; (8005fec <UART_SetConfig+0xa24>)
 8005f16:	e006      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f18:	4b35      	ldr	r3, [pc, #212]	; (8005ff0 <UART_SetConfig+0xa28>)
 8005f1a:	e004      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f1c:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <UART_SetConfig+0xa2c>)
 8005f1e:	e002      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f20:	4b35      	ldr	r3, [pc, #212]	; (8005ff8 <UART_SetConfig+0xa30>)
 8005f22:	e000      	b.n	8005f26 <UART_SetConfig+0x95e>
 8005f24:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <UART_SetConfig+0xa04>)
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f28:	e0cb      	b.n	80060c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d046      	beq.n	8005fc0 <UART_SetConfig+0x9f8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d040      	beq.n	8005fbc <UART_SetConfig+0x9f4>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d03a      	beq.n	8005fb8 <UART_SetConfig+0x9f0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d034      	beq.n	8005fb4 <UART_SetConfig+0x9ec>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d02e      	beq.n	8005fb0 <UART_SetConfig+0x9e8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	d028      	beq.n	8005fac <UART_SetConfig+0x9e4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b06      	cmp	r3, #6
 8005f60:	d022      	beq.n	8005fa8 <UART_SetConfig+0x9e0>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b07      	cmp	r3, #7
 8005f68:	d01c      	beq.n	8005fa4 <UART_SetConfig+0x9dc>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d016      	beq.n	8005fa0 <UART_SetConfig+0x9d8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	2b09      	cmp	r3, #9
 8005f78:	d00f      	beq.n	8005f9a <UART_SetConfig+0x9d2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b0a      	cmp	r3, #10
 8005f80:	d008      	beq.n	8005f94 <UART_SetConfig+0x9cc>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	2b0b      	cmp	r3, #11
 8005f88:	d102      	bne.n	8005f90 <UART_SetConfig+0x9c8>
 8005f8a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005f8e:	e018      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005f90:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <UART_SetConfig+0xa18>)
 8005f92:	e016      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005f94:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005f98:	e013      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005f9a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005f9e:	e010      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fa0:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <UART_SetConfig+0xa34>)
 8005fa2:	e00e      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <UART_SetConfig+0xa08>)
 8005fa6:	e00c      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <UART_SetConfig+0xa38>)
 8005faa:	e00a      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fac:	4b15      	ldr	r3, [pc, #84]	; (8006004 <UART_SetConfig+0xa3c>)
 8005fae:	e008      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <UART_SetConfig+0xa0c>)
 8005fb2:	e006      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fb4:	4b14      	ldr	r3, [pc, #80]	; (8006008 <UART_SetConfig+0xa40>)
 8005fb6:	e004      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <UART_SetConfig+0xa10>)
 8005fba:	e002      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <UART_SetConfig+0xa14>)
 8005fbe:	e000      	b.n	8005fc2 <UART_SetConfig+0x9fa>
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <UART_SetConfig+0xa18>)
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fc4:	e07d      	b.n	80060c2 <UART_SetConfig+0xafa>
 8005fc6:	bf00      	nop
 8005fc8:	58024400 	.word	0x58024400
 8005fcc:	03d09000 	.word	0x03d09000
 8005fd0:	0003d090 	.word	0x0003d090
 8005fd4:	0007a120 	.word	0x0007a120
 8005fd8:	000f4240 	.word	0x000f4240
 8005fdc:	001e8480 	.word	0x001e8480
 8005fe0:	003d0900 	.word	0x003d0900
 8005fe4:	00516155 	.word	0x00516155
 8005fe8:	0061a800 	.word	0x0061a800
 8005fec:	007a1200 	.word	0x007a1200
 8005ff0:	00a2c2aa 	.word	0x00a2c2aa
 8005ff4:	00f42400 	.word	0x00f42400
 8005ff8:	01e84800 	.word	0x01e84800
 8005ffc:	0001e848 	.word	0x0001e848
 8006000:	00051615 	.word	0x00051615
 8006004:	00061a80 	.word	0x00061a80
 8006008:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d04e      	beq.n	80060b2 <UART_SetConfig+0xaea>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b01      	cmp	r3, #1
 800601a:	d047      	beq.n	80060ac <UART_SetConfig+0xae4>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	2b02      	cmp	r3, #2
 8006022:	d040      	beq.n	80060a6 <UART_SetConfig+0xade>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b03      	cmp	r3, #3
 800602a:	d039      	beq.n	80060a0 <UART_SetConfig+0xad8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	2b04      	cmp	r3, #4
 8006032:	d032      	beq.n	800609a <UART_SetConfig+0xad2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	2b05      	cmp	r3, #5
 800603a:	d02b      	beq.n	8006094 <UART_SetConfig+0xacc>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	2b06      	cmp	r3, #6
 8006042:	d024      	beq.n	800608e <UART_SetConfig+0xac6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	2b07      	cmp	r3, #7
 800604a:	d01d      	beq.n	8006088 <UART_SetConfig+0xac0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b08      	cmp	r3, #8
 8006052:	d016      	beq.n	8006082 <UART_SetConfig+0xaba>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2b09      	cmp	r3, #9
 800605a:	d00f      	beq.n	800607c <UART_SetConfig+0xab4>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	2b0a      	cmp	r3, #10
 8006062:	d008      	beq.n	8006076 <UART_SetConfig+0xaae>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b0b      	cmp	r3, #11
 800606a:	d101      	bne.n	8006070 <UART_SetConfig+0xaa8>
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	e022      	b.n	80060b6 <UART_SetConfig+0xaee>
 8006070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006074:	e01f      	b.n	80060b6 <UART_SetConfig+0xaee>
 8006076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800607a:	e01c      	b.n	80060b6 <UART_SetConfig+0xaee>
 800607c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006080:	e019      	b.n	80060b6 <UART_SetConfig+0xaee>
 8006082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006086:	e016      	b.n	80060b6 <UART_SetConfig+0xaee>
 8006088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800608c:	e013      	b.n	80060b6 <UART_SetConfig+0xaee>
 800608e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006092:	e010      	b.n	80060b6 <UART_SetConfig+0xaee>
 8006094:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006098:	e00d      	b.n	80060b6 <UART_SetConfig+0xaee>
 800609a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609e:	e00a      	b.n	80060b6 <UART_SetConfig+0xaee>
 80060a0:	f241 5355 	movw	r3, #5461	; 0x1555
 80060a4:	e007      	b.n	80060b6 <UART_SetConfig+0xaee>
 80060a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060aa:	e004      	b.n	80060b6 <UART_SetConfig+0xaee>
 80060ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060b0:	e001      	b.n	80060b6 <UART_SetConfig+0xaee>
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060b8:	e003      	b.n	80060c2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80060c0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f001 83e8 	beq.w	800789a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d305      	bcc.n	80060e6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d904      	bls.n	80060f0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ec:	f001 bbd5 	b.w	800789a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80060f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	f000 8154 	beq.w	80063a2 <UART_SetConfig+0xdda>
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	dc06      	bgt.n	800610c <UART_SetConfig+0xb44>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d00f      	beq.n	8006122 <UART_SetConfig+0xb5a>
 8006102:	2b04      	cmp	r3, #4
 8006104:	f000 80ac 	beq.w	8006260 <UART_SetConfig+0xc98>
 8006108:	f000 bc30 	b.w	800696c <UART_SetConfig+0x13a4>
 800610c:	2b20      	cmp	r3, #32
 800610e:	f000 832d 	beq.w	800676c <UART_SetConfig+0x11a4>
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	f000 83a5 	beq.w	8006862 <UART_SetConfig+0x129a>
 8006118:	2b10      	cmp	r3, #16
 800611a:	f000 81e3 	beq.w	80064e4 <UART_SetConfig+0xf1c>
 800611e:	f000 bc25 	b.w	800696c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006122:	f7fd f9af 	bl	8003484 <HAL_RCCEx_GetD3PCLK1Freq>
 8006126:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	4618      	mov	r0, r3
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	2b00      	cmp	r3, #0
 8006136:	d067      	beq.n	8006208 <UART_SetConfig+0xc40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	2b01      	cmp	r3, #1
 800613e:	d05e      	beq.n	80061fe <UART_SetConfig+0xc36>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b02      	cmp	r3, #2
 8006146:	d055      	beq.n	80061f4 <UART_SetConfig+0xc2c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	2b03      	cmp	r3, #3
 800614e:	d04c      	beq.n	80061ea <UART_SetConfig+0xc22>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	2b04      	cmp	r3, #4
 8006156:	d043      	beq.n	80061e0 <UART_SetConfig+0xc18>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	2b05      	cmp	r3, #5
 800615e:	d03a      	beq.n	80061d6 <UART_SetConfig+0xc0e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b06      	cmp	r3, #6
 8006166:	d031      	beq.n	80061cc <UART_SetConfig+0xc04>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	2b07      	cmp	r3, #7
 800616e:	d028      	beq.n	80061c2 <UART_SetConfig+0xbfa>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	2b08      	cmp	r3, #8
 8006176:	d01f      	beq.n	80061b8 <UART_SetConfig+0xbf0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2b09      	cmp	r3, #9
 800617e:	d016      	beq.n	80061ae <UART_SetConfig+0xbe6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	2b0a      	cmp	r3, #10
 8006186:	d00d      	beq.n	80061a4 <UART_SetConfig+0xbdc>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	2b0b      	cmp	r3, #11
 800618e:	d104      	bne.n	800619a <UART_SetConfig+0xbd2>
 8006190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006194:	f04f 0400 	mov.w	r4, #0
 8006198:	e03a      	b.n	8006210 <UART_SetConfig+0xc48>
 800619a:	f04f 0301 	mov.w	r3, #1
 800619e:	f04f 0400 	mov.w	r4, #0
 80061a2:	e035      	b.n	8006210 <UART_SetConfig+0xc48>
 80061a4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80061a8:	f04f 0400 	mov.w	r4, #0
 80061ac:	e030      	b.n	8006210 <UART_SetConfig+0xc48>
 80061ae:	f04f 0340 	mov.w	r3, #64	; 0x40
 80061b2:	f04f 0400 	mov.w	r4, #0
 80061b6:	e02b      	b.n	8006210 <UART_SetConfig+0xc48>
 80061b8:	f04f 0320 	mov.w	r3, #32
 80061bc:	f04f 0400 	mov.w	r4, #0
 80061c0:	e026      	b.n	8006210 <UART_SetConfig+0xc48>
 80061c2:	f04f 0310 	mov.w	r3, #16
 80061c6:	f04f 0400 	mov.w	r4, #0
 80061ca:	e021      	b.n	8006210 <UART_SetConfig+0xc48>
 80061cc:	f04f 030c 	mov.w	r3, #12
 80061d0:	f04f 0400 	mov.w	r4, #0
 80061d4:	e01c      	b.n	8006210 <UART_SetConfig+0xc48>
 80061d6:	f04f 030a 	mov.w	r3, #10
 80061da:	f04f 0400 	mov.w	r4, #0
 80061de:	e017      	b.n	8006210 <UART_SetConfig+0xc48>
 80061e0:	f04f 0308 	mov.w	r3, #8
 80061e4:	f04f 0400 	mov.w	r4, #0
 80061e8:	e012      	b.n	8006210 <UART_SetConfig+0xc48>
 80061ea:	f04f 0306 	mov.w	r3, #6
 80061ee:	f04f 0400 	mov.w	r4, #0
 80061f2:	e00d      	b.n	8006210 <UART_SetConfig+0xc48>
 80061f4:	f04f 0304 	mov.w	r3, #4
 80061f8:	f04f 0400 	mov.w	r4, #0
 80061fc:	e008      	b.n	8006210 <UART_SetConfig+0xc48>
 80061fe:	f04f 0302 	mov.w	r3, #2
 8006202:	f04f 0400 	mov.w	r4, #0
 8006206:	e003      	b.n	8006210 <UART_SetConfig+0xc48>
 8006208:	f04f 0301 	mov.w	r3, #1
 800620c:	f04f 0400 	mov.w	r4, #0
 8006210:	461a      	mov	r2, r3
 8006212:	4623      	mov	r3, r4
 8006214:	f7fa f860 	bl	80002d8 <__aeabi_uldivmod>
 8006218:	4603      	mov	r3, r0
 800621a:	460c      	mov	r4, r1
 800621c:	4619      	mov	r1, r3
 800621e:	4622      	mov	r2, r4
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	f04f 0400 	mov.w	r4, #0
 8006228:	0214      	lsls	r4, r2, #8
 800622a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800622e:	020b      	lsls	r3, r1, #8
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6852      	ldr	r2, [r2, #4]
 8006234:	0852      	lsrs	r2, r2, #1
 8006236:	4611      	mov	r1, r2
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	eb13 0b01 	adds.w	fp, r3, r1
 8006240:	eb44 0c02 	adc.w	ip, r4, r2
 8006244:	4658      	mov	r0, fp
 8006246:	4661      	mov	r1, ip
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f04f 0400 	mov.w	r4, #0
 8006250:	461a      	mov	r2, r3
 8006252:	4623      	mov	r3, r4
 8006254:	f7fa f840 	bl	80002d8 <__aeabi_uldivmod>
 8006258:	4603      	mov	r3, r0
 800625a:	460c      	mov	r4, r1
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800625e:	e389      	b.n	8006974 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006260:	f107 0318 	add.w	r3, r7, #24
 8006264:	4618      	mov	r0, r3
 8006266:	f7fd f923 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4618      	mov	r0, r3
 800626e:	f04f 0100 	mov.w	r1, #0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d067      	beq.n	800634a <UART_SetConfig+0xd82>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b01      	cmp	r3, #1
 8006280:	d05e      	beq.n	8006340 <UART_SetConfig+0xd78>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b02      	cmp	r3, #2
 8006288:	d055      	beq.n	8006336 <UART_SetConfig+0xd6e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b03      	cmp	r3, #3
 8006290:	d04c      	beq.n	800632c <UART_SetConfig+0xd64>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b04      	cmp	r3, #4
 8006298:	d043      	beq.n	8006322 <UART_SetConfig+0xd5a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b05      	cmp	r3, #5
 80062a0:	d03a      	beq.n	8006318 <UART_SetConfig+0xd50>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b06      	cmp	r3, #6
 80062a8:	d031      	beq.n	800630e <UART_SetConfig+0xd46>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b07      	cmp	r3, #7
 80062b0:	d028      	beq.n	8006304 <UART_SetConfig+0xd3c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d01f      	beq.n	80062fa <UART_SetConfig+0xd32>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b09      	cmp	r3, #9
 80062c0:	d016      	beq.n	80062f0 <UART_SetConfig+0xd28>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	2b0a      	cmp	r3, #10
 80062c8:	d00d      	beq.n	80062e6 <UART_SetConfig+0xd1e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	2b0b      	cmp	r3, #11
 80062d0:	d104      	bne.n	80062dc <UART_SetConfig+0xd14>
 80062d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d6:	f04f 0400 	mov.w	r4, #0
 80062da:	e03a      	b.n	8006352 <UART_SetConfig+0xd8a>
 80062dc:	f04f 0301 	mov.w	r3, #1
 80062e0:	f04f 0400 	mov.w	r4, #0
 80062e4:	e035      	b.n	8006352 <UART_SetConfig+0xd8a>
 80062e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80062ea:	f04f 0400 	mov.w	r4, #0
 80062ee:	e030      	b.n	8006352 <UART_SetConfig+0xd8a>
 80062f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80062f4:	f04f 0400 	mov.w	r4, #0
 80062f8:	e02b      	b.n	8006352 <UART_SetConfig+0xd8a>
 80062fa:	f04f 0320 	mov.w	r3, #32
 80062fe:	f04f 0400 	mov.w	r4, #0
 8006302:	e026      	b.n	8006352 <UART_SetConfig+0xd8a>
 8006304:	f04f 0310 	mov.w	r3, #16
 8006308:	f04f 0400 	mov.w	r4, #0
 800630c:	e021      	b.n	8006352 <UART_SetConfig+0xd8a>
 800630e:	f04f 030c 	mov.w	r3, #12
 8006312:	f04f 0400 	mov.w	r4, #0
 8006316:	e01c      	b.n	8006352 <UART_SetConfig+0xd8a>
 8006318:	f04f 030a 	mov.w	r3, #10
 800631c:	f04f 0400 	mov.w	r4, #0
 8006320:	e017      	b.n	8006352 <UART_SetConfig+0xd8a>
 8006322:	f04f 0308 	mov.w	r3, #8
 8006326:	f04f 0400 	mov.w	r4, #0
 800632a:	e012      	b.n	8006352 <UART_SetConfig+0xd8a>
 800632c:	f04f 0306 	mov.w	r3, #6
 8006330:	f04f 0400 	mov.w	r4, #0
 8006334:	e00d      	b.n	8006352 <UART_SetConfig+0xd8a>
 8006336:	f04f 0304 	mov.w	r3, #4
 800633a:	f04f 0400 	mov.w	r4, #0
 800633e:	e008      	b.n	8006352 <UART_SetConfig+0xd8a>
 8006340:	f04f 0302 	mov.w	r3, #2
 8006344:	f04f 0400 	mov.w	r4, #0
 8006348:	e003      	b.n	8006352 <UART_SetConfig+0xd8a>
 800634a:	f04f 0301 	mov.w	r3, #1
 800634e:	f04f 0400 	mov.w	r4, #0
 8006352:	461a      	mov	r2, r3
 8006354:	4623      	mov	r3, r4
 8006356:	f7f9 ffbf 	bl	80002d8 <__aeabi_uldivmod>
 800635a:	4603      	mov	r3, r0
 800635c:	460c      	mov	r4, r1
 800635e:	4619      	mov	r1, r3
 8006360:	4622      	mov	r2, r4
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	f04f 0400 	mov.w	r4, #0
 800636a:	0214      	lsls	r4, r2, #8
 800636c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006370:	020b      	lsls	r3, r1, #8
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6852      	ldr	r2, [r2, #4]
 8006376:	0852      	lsrs	r2, r2, #1
 8006378:	4611      	mov	r1, r2
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	eb13 0b01 	adds.w	fp, r3, r1
 8006382:	eb44 0c02 	adc.w	ip, r4, r2
 8006386:	4658      	mov	r0, fp
 8006388:	4661      	mov	r1, ip
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f04f 0400 	mov.w	r4, #0
 8006392:	461a      	mov	r2, r3
 8006394:	4623      	mov	r3, r4
 8006396:	f7f9 ff9f 	bl	80002d8 <__aeabi_uldivmod>
 800639a:	4603      	mov	r3, r0
 800639c:	460c      	mov	r4, r1
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063a0:	e2e8      	b.n	8006974 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a2:	f107 030c 	add.w	r3, r7, #12
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fd f9ce 	bl	8003748 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d067      	beq.n	800648c <UART_SetConfig+0xec4>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d05e      	beq.n	8006482 <UART_SetConfig+0xeba>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d055      	beq.n	8006478 <UART_SetConfig+0xeb0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d04c      	beq.n	800646e <UART_SetConfig+0xea6>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d043      	beq.n	8006464 <UART_SetConfig+0xe9c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	2b05      	cmp	r3, #5
 80063e2:	d03a      	beq.n	800645a <UART_SetConfig+0xe92>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	2b06      	cmp	r3, #6
 80063ea:	d031      	beq.n	8006450 <UART_SetConfig+0xe88>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2b07      	cmp	r3, #7
 80063f2:	d028      	beq.n	8006446 <UART_SetConfig+0xe7e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d01f      	beq.n	800643c <UART_SetConfig+0xe74>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	2b09      	cmp	r3, #9
 8006402:	d016      	beq.n	8006432 <UART_SetConfig+0xe6a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	2b0a      	cmp	r3, #10
 800640a:	d00d      	beq.n	8006428 <UART_SetConfig+0xe60>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	2b0b      	cmp	r3, #11
 8006412:	d104      	bne.n	800641e <UART_SetConfig+0xe56>
 8006414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006418:	f04f 0400 	mov.w	r4, #0
 800641c:	e03a      	b.n	8006494 <UART_SetConfig+0xecc>
 800641e:	f04f 0301 	mov.w	r3, #1
 8006422:	f04f 0400 	mov.w	r4, #0
 8006426:	e035      	b.n	8006494 <UART_SetConfig+0xecc>
 8006428:	f04f 0380 	mov.w	r3, #128	; 0x80
 800642c:	f04f 0400 	mov.w	r4, #0
 8006430:	e030      	b.n	8006494 <UART_SetConfig+0xecc>
 8006432:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006436:	f04f 0400 	mov.w	r4, #0
 800643a:	e02b      	b.n	8006494 <UART_SetConfig+0xecc>
 800643c:	f04f 0320 	mov.w	r3, #32
 8006440:	f04f 0400 	mov.w	r4, #0
 8006444:	e026      	b.n	8006494 <UART_SetConfig+0xecc>
 8006446:	f04f 0310 	mov.w	r3, #16
 800644a:	f04f 0400 	mov.w	r4, #0
 800644e:	e021      	b.n	8006494 <UART_SetConfig+0xecc>
 8006450:	f04f 030c 	mov.w	r3, #12
 8006454:	f04f 0400 	mov.w	r4, #0
 8006458:	e01c      	b.n	8006494 <UART_SetConfig+0xecc>
 800645a:	f04f 030a 	mov.w	r3, #10
 800645e:	f04f 0400 	mov.w	r4, #0
 8006462:	e017      	b.n	8006494 <UART_SetConfig+0xecc>
 8006464:	f04f 0308 	mov.w	r3, #8
 8006468:	f04f 0400 	mov.w	r4, #0
 800646c:	e012      	b.n	8006494 <UART_SetConfig+0xecc>
 800646e:	f04f 0306 	mov.w	r3, #6
 8006472:	f04f 0400 	mov.w	r4, #0
 8006476:	e00d      	b.n	8006494 <UART_SetConfig+0xecc>
 8006478:	f04f 0304 	mov.w	r3, #4
 800647c:	f04f 0400 	mov.w	r4, #0
 8006480:	e008      	b.n	8006494 <UART_SetConfig+0xecc>
 8006482:	f04f 0302 	mov.w	r3, #2
 8006486:	f04f 0400 	mov.w	r4, #0
 800648a:	e003      	b.n	8006494 <UART_SetConfig+0xecc>
 800648c:	f04f 0301 	mov.w	r3, #1
 8006490:	f04f 0400 	mov.w	r4, #0
 8006494:	461a      	mov	r2, r3
 8006496:	4623      	mov	r3, r4
 8006498:	f7f9 ff1e 	bl	80002d8 <__aeabi_uldivmod>
 800649c:	4603      	mov	r3, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	4619      	mov	r1, r3
 80064a2:	4622      	mov	r2, r4
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	f04f 0400 	mov.w	r4, #0
 80064ac:	0214      	lsls	r4, r2, #8
 80064ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80064b2:	020b      	lsls	r3, r1, #8
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6852      	ldr	r2, [r2, #4]
 80064b8:	0852      	lsrs	r2, r2, #1
 80064ba:	4611      	mov	r1, r2
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	eb13 0b01 	adds.w	fp, r3, r1
 80064c4:	eb44 0c02 	adc.w	ip, r4, r2
 80064c8:	4658      	mov	r0, fp
 80064ca:	4661      	mov	r1, ip
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f04f 0400 	mov.w	r4, #0
 80064d4:	461a      	mov	r2, r3
 80064d6:	4623      	mov	r3, r4
 80064d8:	f7f9 fefe 	bl	80002d8 <__aeabi_uldivmod>
 80064dc:	4603      	mov	r3, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80064e2:	e247      	b.n	8006974 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e4:	4b96      	ldr	r3, [pc, #600]	; (8006740 <UART_SetConfig+0x1178>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80a3 	beq.w	8006638 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f2:	4b93      	ldr	r3, [pc, #588]	; (8006740 <UART_SetConfig+0x1178>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	08db      	lsrs	r3, r3, #3
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	4a91      	ldr	r2, [pc, #580]	; (8006744 <UART_SetConfig+0x117c>)
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	4618      	mov	r0, r3
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d067      	beq.n	80065e0 <UART_SetConfig+0x1018>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b01      	cmp	r3, #1
 8006516:	d05e      	beq.n	80065d6 <UART_SetConfig+0x100e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b02      	cmp	r3, #2
 800651e:	d055      	beq.n	80065cc <UART_SetConfig+0x1004>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	2b03      	cmp	r3, #3
 8006526:	d04c      	beq.n	80065c2 <UART_SetConfig+0xffa>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	2b04      	cmp	r3, #4
 800652e:	d043      	beq.n	80065b8 <UART_SetConfig+0xff0>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2b05      	cmp	r3, #5
 8006536:	d03a      	beq.n	80065ae <UART_SetConfig+0xfe6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b06      	cmp	r3, #6
 800653e:	d031      	beq.n	80065a4 <UART_SetConfig+0xfdc>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b07      	cmp	r3, #7
 8006546:	d028      	beq.n	800659a <UART_SetConfig+0xfd2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b08      	cmp	r3, #8
 800654e:	d01f      	beq.n	8006590 <UART_SetConfig+0xfc8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	2b09      	cmp	r3, #9
 8006556:	d016      	beq.n	8006586 <UART_SetConfig+0xfbe>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655c:	2b0a      	cmp	r3, #10
 800655e:	d00d      	beq.n	800657c <UART_SetConfig+0xfb4>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	2b0b      	cmp	r3, #11
 8006566:	d104      	bne.n	8006572 <UART_SetConfig+0xfaa>
 8006568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800656c:	f04f 0400 	mov.w	r4, #0
 8006570:	e03a      	b.n	80065e8 <UART_SetConfig+0x1020>
 8006572:	f04f 0301 	mov.w	r3, #1
 8006576:	f04f 0400 	mov.w	r4, #0
 800657a:	e035      	b.n	80065e8 <UART_SetConfig+0x1020>
 800657c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006580:	f04f 0400 	mov.w	r4, #0
 8006584:	e030      	b.n	80065e8 <UART_SetConfig+0x1020>
 8006586:	f04f 0340 	mov.w	r3, #64	; 0x40
 800658a:	f04f 0400 	mov.w	r4, #0
 800658e:	e02b      	b.n	80065e8 <UART_SetConfig+0x1020>
 8006590:	f04f 0320 	mov.w	r3, #32
 8006594:	f04f 0400 	mov.w	r4, #0
 8006598:	e026      	b.n	80065e8 <UART_SetConfig+0x1020>
 800659a:	f04f 0310 	mov.w	r3, #16
 800659e:	f04f 0400 	mov.w	r4, #0
 80065a2:	e021      	b.n	80065e8 <UART_SetConfig+0x1020>
 80065a4:	f04f 030c 	mov.w	r3, #12
 80065a8:	f04f 0400 	mov.w	r4, #0
 80065ac:	e01c      	b.n	80065e8 <UART_SetConfig+0x1020>
 80065ae:	f04f 030a 	mov.w	r3, #10
 80065b2:	f04f 0400 	mov.w	r4, #0
 80065b6:	e017      	b.n	80065e8 <UART_SetConfig+0x1020>
 80065b8:	f04f 0308 	mov.w	r3, #8
 80065bc:	f04f 0400 	mov.w	r4, #0
 80065c0:	e012      	b.n	80065e8 <UART_SetConfig+0x1020>
 80065c2:	f04f 0306 	mov.w	r3, #6
 80065c6:	f04f 0400 	mov.w	r4, #0
 80065ca:	e00d      	b.n	80065e8 <UART_SetConfig+0x1020>
 80065cc:	f04f 0304 	mov.w	r3, #4
 80065d0:	f04f 0400 	mov.w	r4, #0
 80065d4:	e008      	b.n	80065e8 <UART_SetConfig+0x1020>
 80065d6:	f04f 0302 	mov.w	r3, #2
 80065da:	f04f 0400 	mov.w	r4, #0
 80065de:	e003      	b.n	80065e8 <UART_SetConfig+0x1020>
 80065e0:	f04f 0301 	mov.w	r3, #1
 80065e4:	f04f 0400 	mov.w	r4, #0
 80065e8:	461a      	mov	r2, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	f7f9 fe74 	bl	80002d8 <__aeabi_uldivmod>
 80065f0:	4603      	mov	r3, r0
 80065f2:	460c      	mov	r4, r1
 80065f4:	4619      	mov	r1, r3
 80065f6:	4622      	mov	r2, r4
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	f04f 0400 	mov.w	r4, #0
 8006600:	0214      	lsls	r4, r2, #8
 8006602:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006606:	020b      	lsls	r3, r1, #8
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6852      	ldr	r2, [r2, #4]
 800660c:	0852      	lsrs	r2, r2, #1
 800660e:	4611      	mov	r1, r2
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	eb13 0b01 	adds.w	fp, r3, r1
 8006618:	eb44 0c02 	adc.w	ip, r4, r2
 800661c:	4658      	mov	r0, fp
 800661e:	4661      	mov	r1, ip
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f04f 0400 	mov.w	r4, #0
 8006628:	461a      	mov	r2, r3
 800662a:	4623      	mov	r3, r4
 800662c:	f7f9 fe54 	bl	80002d8 <__aeabi_uldivmod>
 8006630:	4603      	mov	r3, r0
 8006632:	460c      	mov	r4, r1
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8006636:	e19d      	b.n	8006974 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d05b      	beq.n	80066f8 <UART_SetConfig+0x1130>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	2b01      	cmp	r3, #1
 8006646:	d053      	beq.n	80066f0 <UART_SetConfig+0x1128>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2b02      	cmp	r3, #2
 800664e:	d04b      	beq.n	80066e8 <UART_SetConfig+0x1120>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2b03      	cmp	r3, #3
 8006656:	d043      	beq.n	80066e0 <UART_SetConfig+0x1118>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b04      	cmp	r3, #4
 800665e:	d03b      	beq.n	80066d8 <UART_SetConfig+0x1110>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b05      	cmp	r3, #5
 8006666:	d033      	beq.n	80066d0 <UART_SetConfig+0x1108>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b06      	cmp	r3, #6
 800666e:	d02b      	beq.n	80066c8 <UART_SetConfig+0x1100>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	2b07      	cmp	r3, #7
 8006676:	d023      	beq.n	80066c0 <UART_SetConfig+0x10f8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b08      	cmp	r3, #8
 800667e:	d01b      	beq.n	80066b8 <UART_SetConfig+0x10f0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	2b09      	cmp	r3, #9
 8006686:	d013      	beq.n	80066b0 <UART_SetConfig+0x10e8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	2b0a      	cmp	r3, #10
 800668e:	d00b      	beq.n	80066a8 <UART_SetConfig+0x10e0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	2b0b      	cmp	r3, #11
 8006696:	d103      	bne.n	80066a0 <UART_SetConfig+0x10d8>
 8006698:	4b2a      	ldr	r3, [pc, #168]	; (8006744 <UART_SetConfig+0x117c>)
 800669a:	f04f 0400 	mov.w	r4, #0
 800669e:	e02e      	b.n	80066fe <UART_SetConfig+0x1136>
 80066a0:	4b29      	ldr	r3, [pc, #164]	; (8006748 <UART_SetConfig+0x1180>)
 80066a2:	f04f 0403 	mov.w	r4, #3
 80066a6:	e02a      	b.n	80066fe <UART_SetConfig+0x1136>
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <UART_SetConfig+0x1184>)
 80066aa:	f04f 0400 	mov.w	r4, #0
 80066ae:	e026      	b.n	80066fe <UART_SetConfig+0x1136>
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <UART_SetConfig+0x1188>)
 80066b2:	f04f 0400 	mov.w	r4, #0
 80066b6:	e022      	b.n	80066fe <UART_SetConfig+0x1136>
 80066b8:	4b26      	ldr	r3, [pc, #152]	; (8006754 <UART_SetConfig+0x118c>)
 80066ba:	f04f 0400 	mov.w	r4, #0
 80066be:	e01e      	b.n	80066fe <UART_SetConfig+0x1136>
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <UART_SetConfig+0x1190>)
 80066c2:	f04f 0400 	mov.w	r4, #0
 80066c6:	e01a      	b.n	80066fe <UART_SetConfig+0x1136>
 80066c8:	a419      	add	r4, pc, #100	; (adr r4, 8006730 <UART_SetConfig+0x1168>)
 80066ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 80066ce:	e016      	b.n	80066fe <UART_SetConfig+0x1136>
 80066d0:	4b22      	ldr	r3, [pc, #136]	; (800675c <UART_SetConfig+0x1194>)
 80066d2:	f04f 0400 	mov.w	r4, #0
 80066d6:	e012      	b.n	80066fe <UART_SetConfig+0x1136>
 80066d8:	4b21      	ldr	r3, [pc, #132]	; (8006760 <UART_SetConfig+0x1198>)
 80066da:	f04f 0400 	mov.w	r4, #0
 80066de:	e00e      	b.n	80066fe <UART_SetConfig+0x1136>
 80066e0:	a415      	add	r4, pc, #84	; (adr r4, 8006738 <UART_SetConfig+0x1170>)
 80066e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80066e6:	e00a      	b.n	80066fe <UART_SetConfig+0x1136>
 80066e8:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <UART_SetConfig+0x119c>)
 80066ea:	f04f 0400 	mov.w	r4, #0
 80066ee:	e006      	b.n	80066fe <UART_SetConfig+0x1136>
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <UART_SetConfig+0x11a0>)
 80066f2:	f04f 0401 	mov.w	r4, #1
 80066f6:	e002      	b.n	80066fe <UART_SetConfig+0x1136>
 80066f8:	4b13      	ldr	r3, [pc, #76]	; (8006748 <UART_SetConfig+0x1180>)
 80066fa:	f04f 0403 	mov.w	r4, #3
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6852      	ldr	r2, [r2, #4]
 8006702:	0852      	lsrs	r2, r2, #1
 8006704:	4611      	mov	r1, r2
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	eb13 0b01 	adds.w	fp, r3, r1
 800670e:	eb44 0c02 	adc.w	ip, r4, r2
 8006712:	4658      	mov	r0, fp
 8006714:	4661      	mov	r1, ip
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f04f 0400 	mov.w	r4, #0
 800671e:	461a      	mov	r2, r3
 8006720:	4623      	mov	r3, r4
 8006722:	f7f9 fdd9 	bl	80002d8 <__aeabi_uldivmod>
 8006726:	4603      	mov	r3, r0
 8006728:	460c      	mov	r4, r1
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800672c:	e122      	b.n	8006974 <UART_SetConfig+0x13ac>
 800672e:	bf00      	nop
 8006730:	51615500 	.word	0x51615500
 8006734:	00000000 	.word	0x00000000
 8006738:	a2c2aa00 	.word	0xa2c2aa00
 800673c:	00000000 	.word	0x00000000
 8006740:	58024400 	.word	0x58024400
 8006744:	03d09000 	.word	0x03d09000
 8006748:	d0900000 	.word	0xd0900000
 800674c:	07a12000 	.word	0x07a12000
 8006750:	0f424000 	.word	0x0f424000
 8006754:	1e848000 	.word	0x1e848000
 8006758:	3d090000 	.word	0x3d090000
 800675c:	61a80000 	.word	0x61a80000
 8006760:	7a120000 	.word	0x7a120000
 8006764:	f4240000 	.word	0xf4240000
 8006768:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	d05b      	beq.n	800682c <UART_SetConfig+0x1264>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b01      	cmp	r3, #1
 800677a:	d053      	beq.n	8006824 <UART_SetConfig+0x125c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	2b02      	cmp	r3, #2
 8006782:	d04b      	beq.n	800681c <UART_SetConfig+0x1254>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	2b03      	cmp	r3, #3
 800678a:	d043      	beq.n	8006814 <UART_SetConfig+0x124c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	2b04      	cmp	r3, #4
 8006792:	d03b      	beq.n	800680c <UART_SetConfig+0x1244>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	2b05      	cmp	r3, #5
 800679a:	d033      	beq.n	8006804 <UART_SetConfig+0x123c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	2b06      	cmp	r3, #6
 80067a2:	d02b      	beq.n	80067fc <UART_SetConfig+0x1234>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	2b07      	cmp	r3, #7
 80067aa:	d023      	beq.n	80067f4 <UART_SetConfig+0x122c>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d01b      	beq.n	80067ec <UART_SetConfig+0x1224>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b09      	cmp	r3, #9
 80067ba:	d013      	beq.n	80067e4 <UART_SetConfig+0x121c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b0a      	cmp	r3, #10
 80067c2:	d00b      	beq.n	80067dc <UART_SetConfig+0x1214>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	2b0b      	cmp	r3, #11
 80067ca:	d103      	bne.n	80067d4 <UART_SetConfig+0x120c>
 80067cc:	4bc0      	ldr	r3, [pc, #768]	; (8006ad0 <UART_SetConfig+0x1508>)
 80067ce:	f04f 0400 	mov.w	r4, #0
 80067d2:	e02e      	b.n	8006832 <UART_SetConfig+0x126a>
 80067d4:	4bbf      	ldr	r3, [pc, #764]	; (8006ad4 <UART_SetConfig+0x150c>)
 80067d6:	f04f 0400 	mov.w	r4, #0
 80067da:	e02a      	b.n	8006832 <UART_SetConfig+0x126a>
 80067dc:	4bbe      	ldr	r3, [pc, #760]	; (8006ad8 <UART_SetConfig+0x1510>)
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	e026      	b.n	8006832 <UART_SetConfig+0x126a>
 80067e4:	4bbd      	ldr	r3, [pc, #756]	; (8006adc <UART_SetConfig+0x1514>)
 80067e6:	f04f 0400 	mov.w	r4, #0
 80067ea:	e022      	b.n	8006832 <UART_SetConfig+0x126a>
 80067ec:	4bbc      	ldr	r3, [pc, #752]	; (8006ae0 <UART_SetConfig+0x1518>)
 80067ee:	f04f 0400 	mov.w	r4, #0
 80067f2:	e01e      	b.n	8006832 <UART_SetConfig+0x126a>
 80067f4:	4bbb      	ldr	r3, [pc, #748]	; (8006ae4 <UART_SetConfig+0x151c>)
 80067f6:	f04f 0400 	mov.w	r4, #0
 80067fa:	e01a      	b.n	8006832 <UART_SetConfig+0x126a>
 80067fc:	a4b0      	add	r4, pc, #704	; (adr r4, 8006ac0 <UART_SetConfig+0x14f8>)
 80067fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006802:	e016      	b.n	8006832 <UART_SetConfig+0x126a>
 8006804:	4bb8      	ldr	r3, [pc, #736]	; (8006ae8 <UART_SetConfig+0x1520>)
 8006806:	f04f 0400 	mov.w	r4, #0
 800680a:	e012      	b.n	8006832 <UART_SetConfig+0x126a>
 800680c:	4bb7      	ldr	r3, [pc, #732]	; (8006aec <UART_SetConfig+0x1524>)
 800680e:	f04f 0400 	mov.w	r4, #0
 8006812:	e00e      	b.n	8006832 <UART_SetConfig+0x126a>
 8006814:	a4ac      	add	r4, pc, #688	; (adr r4, 8006ac8 <UART_SetConfig+0x1500>)
 8006816:	e9d4 3400 	ldrd	r3, r4, [r4]
 800681a:	e00a      	b.n	8006832 <UART_SetConfig+0x126a>
 800681c:	4bb4      	ldr	r3, [pc, #720]	; (8006af0 <UART_SetConfig+0x1528>)
 800681e:	f04f 0400 	mov.w	r4, #0
 8006822:	e006      	b.n	8006832 <UART_SetConfig+0x126a>
 8006824:	4bb3      	ldr	r3, [pc, #716]	; (8006af4 <UART_SetConfig+0x152c>)
 8006826:	f04f 0400 	mov.w	r4, #0
 800682a:	e002      	b.n	8006832 <UART_SetConfig+0x126a>
 800682c:	4ba9      	ldr	r3, [pc, #676]	; (8006ad4 <UART_SetConfig+0x150c>)
 800682e:	f04f 0400 	mov.w	r4, #0
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6852      	ldr	r2, [r2, #4]
 8006836:	0852      	lsrs	r2, r2, #1
 8006838:	4611      	mov	r1, r2
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	eb13 0b01 	adds.w	fp, r3, r1
 8006842:	eb44 0c02 	adc.w	ip, r4, r2
 8006846:	4658      	mov	r0, fp
 8006848:	4661      	mov	r1, ip
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f04f 0400 	mov.w	r4, #0
 8006852:	461a      	mov	r2, r3
 8006854:	4623      	mov	r3, r4
 8006856:	f7f9 fd3f 	bl	80002d8 <__aeabi_uldivmod>
 800685a:	4603      	mov	r3, r0
 800685c:	460c      	mov	r4, r1
 800685e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006860:	e088      	b.n	8006974 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d064      	beq.n	8006934 <UART_SetConfig+0x136c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2b01      	cmp	r3, #1
 8006870:	d05b      	beq.n	800692a <UART_SetConfig+0x1362>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	2b02      	cmp	r3, #2
 8006878:	d052      	beq.n	8006920 <UART_SetConfig+0x1358>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b03      	cmp	r3, #3
 8006880:	d04a      	beq.n	8006918 <UART_SetConfig+0x1350>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	2b04      	cmp	r3, #4
 8006888:	d041      	beq.n	800690e <UART_SetConfig+0x1346>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2b05      	cmp	r3, #5
 8006890:	d039      	beq.n	8006906 <UART_SetConfig+0x133e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	2b06      	cmp	r3, #6
 8006898:	d031      	beq.n	80068fe <UART_SetConfig+0x1336>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2b07      	cmp	r3, #7
 80068a0:	d028      	beq.n	80068f4 <UART_SetConfig+0x132c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d01f      	beq.n	80068ea <UART_SetConfig+0x1322>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d016      	beq.n	80068e0 <UART_SetConfig+0x1318>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2b0a      	cmp	r3, #10
 80068b8:	d00d      	beq.n	80068d6 <UART_SetConfig+0x130e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b0b      	cmp	r3, #11
 80068c0:	d104      	bne.n	80068cc <UART_SetConfig+0x1304>
 80068c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c6:	f04f 0400 	mov.w	r4, #0
 80068ca:	e037      	b.n	800693c <UART_SetConfig+0x1374>
 80068cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80068d0:	f04f 0400 	mov.w	r4, #0
 80068d4:	e032      	b.n	800693c <UART_SetConfig+0x1374>
 80068d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068da:	f04f 0400 	mov.w	r4, #0
 80068de:	e02d      	b.n	800693c <UART_SetConfig+0x1374>
 80068e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068e4:	f04f 0400 	mov.w	r4, #0
 80068e8:	e028      	b.n	800693c <UART_SetConfig+0x1374>
 80068ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068ee:	f04f 0400 	mov.w	r4, #0
 80068f2:	e023      	b.n	800693c <UART_SetConfig+0x1374>
 80068f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068f8:	f04f 0400 	mov.w	r4, #0
 80068fc:	e01e      	b.n	800693c <UART_SetConfig+0x1374>
 80068fe:	4b7e      	ldr	r3, [pc, #504]	; (8006af8 <UART_SetConfig+0x1530>)
 8006900:	f04f 0400 	mov.w	r4, #0
 8006904:	e01a      	b.n	800693c <UART_SetConfig+0x1374>
 8006906:	4b7d      	ldr	r3, [pc, #500]	; (8006afc <UART_SetConfig+0x1534>)
 8006908:	f04f 0400 	mov.w	r4, #0
 800690c:	e016      	b.n	800693c <UART_SetConfig+0x1374>
 800690e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006912:	f04f 0400 	mov.w	r4, #0
 8006916:	e011      	b.n	800693c <UART_SetConfig+0x1374>
 8006918:	4b79      	ldr	r3, [pc, #484]	; (8006b00 <UART_SetConfig+0x1538>)
 800691a:	f04f 0400 	mov.w	r4, #0
 800691e:	e00d      	b.n	800693c <UART_SetConfig+0x1374>
 8006920:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006924:	f04f 0400 	mov.w	r4, #0
 8006928:	e008      	b.n	800693c <UART_SetConfig+0x1374>
 800692a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800692e:	f04f 0400 	mov.w	r4, #0
 8006932:	e003      	b.n	800693c <UART_SetConfig+0x1374>
 8006934:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006938:	f04f 0400 	mov.w	r4, #0
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6852      	ldr	r2, [r2, #4]
 8006940:	0852      	lsrs	r2, r2, #1
 8006942:	4611      	mov	r1, r2
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	eb13 0b01 	adds.w	fp, r3, r1
 800694c:	eb44 0c02 	adc.w	ip, r4, r2
 8006950:	4658      	mov	r0, fp
 8006952:	4661      	mov	r1, ip
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f04f 0400 	mov.w	r4, #0
 800695c:	461a      	mov	r2, r3
 800695e:	4623      	mov	r3, r4
 8006960:	f7f9 fcba 	bl	80002d8 <__aeabi_uldivmod>
 8006964:	4603      	mov	r3, r0
 8006966:	460c      	mov	r4, r1
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800696a:	e003      	b.n	8006974 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8006972:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800697a:	d309      	bcc.n	8006990 <UART_SetConfig+0x13c8>
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006982:	d205      	bcs.n	8006990 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	f000 bf85 	b.w	800789a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006996:	f000 bf80 	b.w	800789a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	f040 83da 	bne.w	800715a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80069a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	f200 83b3 	bhi.w	8007116 <UART_SetConfig+0x1b4e>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x13f0>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	08006b05 	.word	0x08006b05
 80069bc:	08006bbd 	.word	0x08006bbd
 80069c0:	08007117 	.word	0x08007117
 80069c4:	08007117 	.word	0x08007117
 80069c8:	08006c75 	.word	0x08006c75
 80069cc:	08007117 	.word	0x08007117
 80069d0:	08007117 	.word	0x08007117
 80069d4:	08007117 	.word	0x08007117
 80069d8:	08006d31 	.word	0x08006d31
 80069dc:	08007117 	.word	0x08007117
 80069e0:	08007117 	.word	0x08007117
 80069e4:	08007117 	.word	0x08007117
 80069e8:	08007117 	.word	0x08007117
 80069ec:	08007117 	.word	0x08007117
 80069f0:	08007117 	.word	0x08007117
 80069f4:	08007117 	.word	0x08007117
 80069f8:	08006ded 	.word	0x08006ded
 80069fc:	08007117 	.word	0x08007117
 8006a00:	08007117 	.word	0x08007117
 8006a04:	08007117 	.word	0x08007117
 8006a08:	08007117 	.word	0x08007117
 8006a0c:	08007117 	.word	0x08007117
 8006a10:	08007117 	.word	0x08007117
 8006a14:	08007117 	.word	0x08007117
 8006a18:	08007117 	.word	0x08007117
 8006a1c:	08007117 	.word	0x08007117
 8006a20:	08007117 	.word	0x08007117
 8006a24:	08007117 	.word	0x08007117
 8006a28:	08007117 	.word	0x08007117
 8006a2c:	08007117 	.word	0x08007117
 8006a30:	08007117 	.word	0x08007117
 8006a34:	08007117 	.word	0x08007117
 8006a38:	08006f5f 	.word	0x08006f5f
 8006a3c:	08007117 	.word	0x08007117
 8006a40:	08007117 	.word	0x08007117
 8006a44:	08007117 	.word	0x08007117
 8006a48:	08007117 	.word	0x08007117
 8006a4c:	08007117 	.word	0x08007117
 8006a50:	08007117 	.word	0x08007117
 8006a54:	08007117 	.word	0x08007117
 8006a58:	08007117 	.word	0x08007117
 8006a5c:	08007117 	.word	0x08007117
 8006a60:	08007117 	.word	0x08007117
 8006a64:	08007117 	.word	0x08007117
 8006a68:	08007117 	.word	0x08007117
 8006a6c:	08007117 	.word	0x08007117
 8006a70:	08007117 	.word	0x08007117
 8006a74:	08007117 	.word	0x08007117
 8006a78:	08007117 	.word	0x08007117
 8006a7c:	08007117 	.word	0x08007117
 8006a80:	08007117 	.word	0x08007117
 8006a84:	08007117 	.word	0x08007117
 8006a88:	08007117 	.word	0x08007117
 8006a8c:	08007117 	.word	0x08007117
 8006a90:	08007117 	.word	0x08007117
 8006a94:	08007117 	.word	0x08007117
 8006a98:	08007117 	.word	0x08007117
 8006a9c:	08007117 	.word	0x08007117
 8006aa0:	08007117 	.word	0x08007117
 8006aa4:	08007117 	.word	0x08007117
 8006aa8:	08007117 	.word	0x08007117
 8006aac:	08007117 	.word	0x08007117
 8006ab0:	08007117 	.word	0x08007117
 8006ab4:	08007117 	.word	0x08007117
 8006ab8:	08007055 	.word	0x08007055
 8006abc:	f3af 8000 	nop.w
 8006ac0:	05161500 	.word	0x05161500
 8006ac4:	00000000 	.word	0x00000000
 8006ac8:	0a2c2a00 	.word	0x0a2c2a00
 8006acc:	00000000 	.word	0x00000000
 8006ad0:	003d0900 	.word	0x003d0900
 8006ad4:	3d090000 	.word	0x3d090000
 8006ad8:	007a1200 	.word	0x007a1200
 8006adc:	00f42400 	.word	0x00f42400
 8006ae0:	01e84800 	.word	0x01e84800
 8006ae4:	03d09000 	.word	0x03d09000
 8006ae8:	061a8000 	.word	0x061a8000
 8006aec:	07a12000 	.word	0x07a12000
 8006af0:	0f424000 	.word	0x0f424000
 8006af4:	1e848000 	.word	0x1e848000
 8006af8:	000aaa00 	.word	0x000aaa00
 8006afc:	000ccc00 	.word	0x000ccc00
 8006b00:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fb fda2 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8006b08:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d044      	beq.n	8006b9c <UART_SetConfig+0x15d4>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d03e      	beq.n	8006b98 <UART_SetConfig+0x15d0>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d038      	beq.n	8006b94 <UART_SetConfig+0x15cc>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d032      	beq.n	8006b90 <UART_SetConfig+0x15c8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d02c      	beq.n	8006b8c <UART_SetConfig+0x15c4>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	2b05      	cmp	r3, #5
 8006b38:	d026      	beq.n	8006b88 <UART_SetConfig+0x15c0>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b06      	cmp	r3, #6
 8006b40:	d020      	beq.n	8006b84 <UART_SetConfig+0x15bc>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b07      	cmp	r3, #7
 8006b48:	d01a      	beq.n	8006b80 <UART_SetConfig+0x15b8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d014      	beq.n	8006b7c <UART_SetConfig+0x15b4>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	2b09      	cmp	r3, #9
 8006b58:	d00e      	beq.n	8006b78 <UART_SetConfig+0x15b0>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	2b0a      	cmp	r3, #10
 8006b60:	d008      	beq.n	8006b74 <UART_SetConfig+0x15ac>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	2b0b      	cmp	r3, #11
 8006b68:	d102      	bne.n	8006b70 <UART_SetConfig+0x15a8>
 8006b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b6e:	e016      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e014      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	e012      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	e010      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b7c:	2320      	movs	r3, #32
 8006b7e:	e00e      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b80:	2310      	movs	r3, #16
 8006b82:	e00c      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b84:	230c      	movs	r3, #12
 8006b86:	e00a      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b88:	230a      	movs	r3, #10
 8006b8a:	e008      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	e006      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b90:	2306      	movs	r3, #6
 8006b92:	e004      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b94:	2304      	movs	r3, #4
 8006b96:	e002      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e000      	b.n	8006b9e <UART_SetConfig+0x15d6>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba4:	005a      	lsls	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	441a      	add	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bba:	e2b0      	b.n	800711e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bbc:	f7fb fd5c 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8006bc0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d044      	beq.n	8006c54 <UART_SetConfig+0x168c>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d03e      	beq.n	8006c50 <UART_SetConfig+0x1688>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d038      	beq.n	8006c4c <UART_SetConfig+0x1684>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d032      	beq.n	8006c48 <UART_SetConfig+0x1680>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d02c      	beq.n	8006c44 <UART_SetConfig+0x167c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d026      	beq.n	8006c40 <UART_SetConfig+0x1678>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b06      	cmp	r3, #6
 8006bf8:	d020      	beq.n	8006c3c <UART_SetConfig+0x1674>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	2b07      	cmp	r3, #7
 8006c00:	d01a      	beq.n	8006c38 <UART_SetConfig+0x1670>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d014      	beq.n	8006c34 <UART_SetConfig+0x166c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d00e      	beq.n	8006c30 <UART_SetConfig+0x1668>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b0a      	cmp	r3, #10
 8006c18:	d008      	beq.n	8006c2c <UART_SetConfig+0x1664>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	2b0b      	cmp	r3, #11
 8006c20:	d102      	bne.n	8006c28 <UART_SetConfig+0x1660>
 8006c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c26:	e016      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e014      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c2c:	2380      	movs	r3, #128	; 0x80
 8006c2e:	e012      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c30:	2340      	movs	r3, #64	; 0x40
 8006c32:	e010      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c34:	2320      	movs	r3, #32
 8006c36:	e00e      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	e00c      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c3c:	230c      	movs	r3, #12
 8006c3e:	e00a      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c40:	230a      	movs	r3, #10
 8006c42:	e008      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c44:	2308      	movs	r3, #8
 8006c46:	e006      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c48:	2306      	movs	r3, #6
 8006c4a:	e004      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	e002      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e000      	b.n	8006c56 <UART_SetConfig+0x168e>
 8006c54:	2301      	movs	r3, #1
 8006c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	005a      	lsls	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	085b      	lsrs	r3, r3, #1
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c72:	e254      	b.n	800711e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c74:	f107 0318 	add.w	r3, r7, #24
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fc fc19 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d044      	beq.n	8006d12 <UART_SetConfig+0x174a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d03e      	beq.n	8006d0e <UART_SetConfig+0x1746>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d038      	beq.n	8006d0a <UART_SetConfig+0x1742>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d032      	beq.n	8006d06 <UART_SetConfig+0x173e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d02c      	beq.n	8006d02 <UART_SetConfig+0x173a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	2b05      	cmp	r3, #5
 8006cae:	d026      	beq.n	8006cfe <UART_SetConfig+0x1736>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	2b06      	cmp	r3, #6
 8006cb6:	d020      	beq.n	8006cfa <UART_SetConfig+0x1732>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	2b07      	cmp	r3, #7
 8006cbe:	d01a      	beq.n	8006cf6 <UART_SetConfig+0x172e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d014      	beq.n	8006cf2 <UART_SetConfig+0x172a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2b09      	cmp	r3, #9
 8006cce:	d00e      	beq.n	8006cee <UART_SetConfig+0x1726>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b0a      	cmp	r3, #10
 8006cd6:	d008      	beq.n	8006cea <UART_SetConfig+0x1722>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	2b0b      	cmp	r3, #11
 8006cde:	d102      	bne.n	8006ce6 <UART_SetConfig+0x171e>
 8006ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ce4:	e016      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e014      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006cea:	2380      	movs	r3, #128	; 0x80
 8006cec:	e012      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006cee:	2340      	movs	r3, #64	; 0x40
 8006cf0:	e010      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	e00e      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006cf6:	2310      	movs	r3, #16
 8006cf8:	e00c      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	e00a      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006cfe:	230a      	movs	r3, #10
 8006d00:	e008      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006d02:	2308      	movs	r3, #8
 8006d04:	e006      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006d06:	2306      	movs	r3, #6
 8006d08:	e004      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	e002      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e000      	b.n	8006d14 <UART_SetConfig+0x174c>
 8006d12:	2301      	movs	r3, #1
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	005a      	lsls	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	441a      	add	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d2e:	e1f6      	b.n	800711e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fc fd07 	bl	8003748 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d044      	beq.n	8006dce <UART_SetConfig+0x1806>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d03e      	beq.n	8006dca <UART_SetConfig+0x1802>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d038      	beq.n	8006dc6 <UART_SetConfig+0x17fe>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d032      	beq.n	8006dc2 <UART_SetConfig+0x17fa>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d02c      	beq.n	8006dbe <UART_SetConfig+0x17f6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	d026      	beq.n	8006dba <UART_SetConfig+0x17f2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	2b06      	cmp	r3, #6
 8006d72:	d020      	beq.n	8006db6 <UART_SetConfig+0x17ee>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	2b07      	cmp	r3, #7
 8006d7a:	d01a      	beq.n	8006db2 <UART_SetConfig+0x17ea>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d014      	beq.n	8006dae <UART_SetConfig+0x17e6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	2b09      	cmp	r3, #9
 8006d8a:	d00e      	beq.n	8006daa <UART_SetConfig+0x17e2>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	2b0a      	cmp	r3, #10
 8006d92:	d008      	beq.n	8006da6 <UART_SetConfig+0x17de>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	2b0b      	cmp	r3, #11
 8006d9a:	d102      	bne.n	8006da2 <UART_SetConfig+0x17da>
 8006d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006da0:	e016      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e014      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	e012      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	e010      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006dae:	2320      	movs	r3, #32
 8006db0:	e00e      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006db2:	2310      	movs	r3, #16
 8006db4:	e00c      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006db6:	230c      	movs	r3, #12
 8006db8:	e00a      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006dba:	230a      	movs	r3, #10
 8006dbc:	e008      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	e006      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006dc2:	2306      	movs	r3, #6
 8006dc4:	e004      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	e002      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e000      	b.n	8006dd0 <UART_SetConfig+0x1808>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	005a      	lsls	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dea:	e198      	b.n	800711e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dec:	4b87      	ldr	r3, [pc, #540]	; (800700c <UART_SetConfig+0x1a44>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d05e      	beq.n	8006eb6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df8:	4b84      	ldr	r3, [pc, #528]	; (800700c <UART_SetConfig+0x1a44>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	4a83      	ldr	r2, [pc, #524]	; (8007010 <UART_SetConfig+0x1a48>)
 8006e04:	40da      	lsrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d044      	beq.n	8006e98 <UART_SetConfig+0x18d0>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d03e      	beq.n	8006e94 <UART_SetConfig+0x18cc>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d038      	beq.n	8006e90 <UART_SetConfig+0x18c8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d032      	beq.n	8006e8c <UART_SetConfig+0x18c4>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d02c      	beq.n	8006e88 <UART_SetConfig+0x18c0>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d026      	beq.n	8006e84 <UART_SetConfig+0x18bc>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	2b06      	cmp	r3, #6
 8006e3c:	d020      	beq.n	8006e80 <UART_SetConfig+0x18b8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	2b07      	cmp	r3, #7
 8006e44:	d01a      	beq.n	8006e7c <UART_SetConfig+0x18b4>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d014      	beq.n	8006e78 <UART_SetConfig+0x18b0>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	d00e      	beq.n	8006e74 <UART_SetConfig+0x18ac>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b0a      	cmp	r3, #10
 8006e5c:	d008      	beq.n	8006e70 <UART_SetConfig+0x18a8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	2b0b      	cmp	r3, #11
 8006e64:	d102      	bne.n	8006e6c <UART_SetConfig+0x18a4>
 8006e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e6a:	e016      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e014      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e70:	2380      	movs	r3, #128	; 0x80
 8006e72:	e012      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	e010      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e78:	2320      	movs	r3, #32
 8006e7a:	e00e      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	e00c      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e80:	230c      	movs	r3, #12
 8006e82:	e00a      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e84:	230a      	movs	r3, #10
 8006e86:	e008      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	e006      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e8c:	2306      	movs	r3, #6
 8006e8e:	e004      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e90:	2304      	movs	r3, #4
 8006e92:	e002      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e000      	b.n	8006e9a <UART_SetConfig+0x18d2>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9e:	005a      	lsls	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	441a      	add	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006eb4:	e133      	b.n	800711e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d043      	beq.n	8006f46 <UART_SetConfig+0x197e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d03d      	beq.n	8006f42 <UART_SetConfig+0x197a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d037      	beq.n	8006f3e <UART_SetConfig+0x1976>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d031      	beq.n	8006f3a <UART_SetConfig+0x1972>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d02b      	beq.n	8006f36 <UART_SetConfig+0x196e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	2b05      	cmp	r3, #5
 8006ee4:	d025      	beq.n	8006f32 <UART_SetConfig+0x196a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d01f      	beq.n	8006f2e <UART_SetConfig+0x1966>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	2b07      	cmp	r3, #7
 8006ef4:	d019      	beq.n	8006f2a <UART_SetConfig+0x1962>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d013      	beq.n	8006f26 <UART_SetConfig+0x195e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	2b09      	cmp	r3, #9
 8006f04:	d00d      	beq.n	8006f22 <UART_SetConfig+0x195a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	2b0a      	cmp	r3, #10
 8006f0c:	d007      	beq.n	8006f1e <UART_SetConfig+0x1956>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	2b0b      	cmp	r3, #11
 8006f14:	d101      	bne.n	8006f1a <UART_SetConfig+0x1952>
 8006f16:	4b3f      	ldr	r3, [pc, #252]	; (8007014 <UART_SetConfig+0x1a4c>)
 8006f18:	e016      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <UART_SetConfig+0x1a50>)
 8006f1c:	e014      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f1e:	4b3f      	ldr	r3, [pc, #252]	; (800701c <UART_SetConfig+0x1a54>)
 8006f20:	e012      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f22:	4b3f      	ldr	r3, [pc, #252]	; (8007020 <UART_SetConfig+0x1a58>)
 8006f24:	e010      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f26:	4b3f      	ldr	r3, [pc, #252]	; (8007024 <UART_SetConfig+0x1a5c>)
 8006f28:	e00e      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f2a:	4b3f      	ldr	r3, [pc, #252]	; (8007028 <UART_SetConfig+0x1a60>)
 8006f2c:	e00c      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f2e:	4b3f      	ldr	r3, [pc, #252]	; (800702c <UART_SetConfig+0x1a64>)
 8006f30:	e00a      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f32:	4b3f      	ldr	r3, [pc, #252]	; (8007030 <UART_SetConfig+0x1a68>)
 8006f34:	e008      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f36:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <UART_SetConfig+0x1a6c>)
 8006f38:	e006      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f3a:	4b3f      	ldr	r3, [pc, #252]	; (8007038 <UART_SetConfig+0x1a70>)
 8006f3c:	e004      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f3e:	4b3f      	ldr	r3, [pc, #252]	; (800703c <UART_SetConfig+0x1a74>)
 8006f40:	e002      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f42:	4b33      	ldr	r3, [pc, #204]	; (8007010 <UART_SetConfig+0x1a48>)
 8006f44:	e000      	b.n	8006f48 <UART_SetConfig+0x1980>
 8006f46:	4b34      	ldr	r3, [pc, #208]	; (8007018 <UART_SetConfig+0x1a50>)
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6852      	ldr	r2, [r2, #4]
 8006f4c:	0852      	lsrs	r2, r2, #1
 8006f4e:	441a      	add	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f5c:	e0df      	b.n	800711e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d045      	beq.n	8006ff2 <UART_SetConfig+0x1a2a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d03f      	beq.n	8006fee <UART_SetConfig+0x1a26>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d039      	beq.n	8006fea <UART_SetConfig+0x1a22>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d033      	beq.n	8006fe6 <UART_SetConfig+0x1a1e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d02d      	beq.n	8006fe2 <UART_SetConfig+0x1a1a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	d027      	beq.n	8006fde <UART_SetConfig+0x1a16>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d021      	beq.n	8006fda <UART_SetConfig+0x1a12>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	2b07      	cmp	r3, #7
 8006f9c:	d01b      	beq.n	8006fd6 <UART_SetConfig+0x1a0e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d015      	beq.n	8006fd2 <UART_SetConfig+0x1a0a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	2b09      	cmp	r3, #9
 8006fac:	d00f      	beq.n	8006fce <UART_SetConfig+0x1a06>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	2b0a      	cmp	r3, #10
 8006fb4:	d008      	beq.n	8006fc8 <UART_SetConfig+0x1a00>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	2b0b      	cmp	r3, #11
 8006fbc:	d102      	bne.n	8006fc4 <UART_SetConfig+0x19fc>
 8006fbe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006fc2:	e017      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fc4:	4b18      	ldr	r3, [pc, #96]	; (8007028 <UART_SetConfig+0x1a60>)
 8006fc6:	e015      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fc8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006fcc:	e012      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fce:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <UART_SetConfig+0x1a78>)
 8006fd0:	e010      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <UART_SetConfig+0x1a7c>)
 8006fd4:	e00e      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <UART_SetConfig+0x1a4c>)
 8006fd8:	e00c      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fda:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <UART_SetConfig+0x1a80>)
 8006fdc:	e00a      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fde:	4b1b      	ldr	r3, [pc, #108]	; (800704c <UART_SetConfig+0x1a84>)
 8006fe0:	e008      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fe2:	4b0e      	ldr	r3, [pc, #56]	; (800701c <UART_SetConfig+0x1a54>)
 8006fe4:	e006      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <UART_SetConfig+0x1a88>)
 8006fe8:	e004      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fea:	4b0d      	ldr	r3, [pc, #52]	; (8007020 <UART_SetConfig+0x1a58>)
 8006fec:	e002      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <UART_SetConfig+0x1a5c>)
 8006ff0:	e000      	b.n	8006ff4 <UART_SetConfig+0x1a2c>
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <UART_SetConfig+0x1a60>)
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6852      	ldr	r2, [r2, #4]
 8006ff8:	0852      	lsrs	r2, r2, #1
 8006ffa:	441a      	add	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	b29b      	uxth	r3, r3
 8007006:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007008:	e089      	b.n	800711e <UART_SetConfig+0x1b56>
 800700a:	bf00      	nop
 800700c:	58024400 	.word	0x58024400
 8007010:	03d09000 	.word	0x03d09000
 8007014:	0007a120 	.word	0x0007a120
 8007018:	07a12000 	.word	0x07a12000
 800701c:	000f4240 	.word	0x000f4240
 8007020:	001e8480 	.word	0x001e8480
 8007024:	003d0900 	.word	0x003d0900
 8007028:	007a1200 	.word	0x007a1200
 800702c:	00a2c2aa 	.word	0x00a2c2aa
 8007030:	00c35000 	.word	0x00c35000
 8007034:	00f42400 	.word	0x00f42400
 8007038:	01458554 	.word	0x01458554
 800703c:	01e84800 	.word	0x01e84800
 8007040:	0001e848 	.word	0x0001e848
 8007044:	0003d090 	.word	0x0003d090
 8007048:	000a2c2a 	.word	0x000a2c2a
 800704c:	000c3500 	.word	0x000c3500
 8007050:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d04f      	beq.n	80070fc <UART_SetConfig+0x1b34>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b01      	cmp	r3, #1
 8007062:	d048      	beq.n	80070f6 <UART_SetConfig+0x1b2e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b02      	cmp	r3, #2
 800706a:	d041      	beq.n	80070f0 <UART_SetConfig+0x1b28>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	2b03      	cmp	r3, #3
 8007072:	d03a      	beq.n	80070ea <UART_SetConfig+0x1b22>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b04      	cmp	r3, #4
 800707a:	d033      	beq.n	80070e4 <UART_SetConfig+0x1b1c>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	2b05      	cmp	r3, #5
 8007082:	d02c      	beq.n	80070de <UART_SetConfig+0x1b16>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	2b06      	cmp	r3, #6
 800708a:	d025      	beq.n	80070d8 <UART_SetConfig+0x1b10>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	2b07      	cmp	r3, #7
 8007092:	d01e      	beq.n	80070d2 <UART_SetConfig+0x1b0a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	2b08      	cmp	r3, #8
 800709a:	d017      	beq.n	80070cc <UART_SetConfig+0x1b04>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	2b09      	cmp	r3, #9
 80070a2:	d010      	beq.n	80070c6 <UART_SetConfig+0x1afe>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	2b0a      	cmp	r3, #10
 80070aa:	d009      	beq.n	80070c0 <UART_SetConfig+0x1af8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	2b0b      	cmp	r3, #11
 80070b2:	d102      	bne.n	80070ba <UART_SetConfig+0x1af2>
 80070b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070b8:	e022      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070be:	e01f      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c4:	e01c      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ca:	e019      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070d0:	e016      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070d6:	e013      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070d8:	f241 5354 	movw	r3, #5460	; 0x1554
 80070dc:	e010      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070de:	f641 1398 	movw	r3, #6552	; 0x1998
 80070e2:	e00d      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070e8:	e00a      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070ea:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80070ee:	e007      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070f4:	e004      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fa:	e001      	b.n	8007100 <UART_SetConfig+0x1b38>
 80070fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6852      	ldr	r2, [r2, #4]
 8007104:	0852      	lsrs	r2, r2, #1
 8007106:	441a      	add	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007110:	b29b      	uxth	r3, r3
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007114:	e003      	b.n	800711e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800711c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007120:	2b0f      	cmp	r3, #15
 8007122:	d916      	bls.n	8007152 <UART_SetConfig+0x1b8a>
 8007124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712a:	d212      	bcs.n	8007152 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	b29b      	uxth	r3, r3
 8007130:	f023 030f 	bic.w	r3, r3, #15
 8007134:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	b29a      	uxth	r2, r3
 8007142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007144:	4313      	orrs	r3, r2
 8007146:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800714e:	60da      	str	r2, [r3, #12]
 8007150:	e3a3      	b.n	800789a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007158:	e39f      	b.n	800789a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800715a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	f200 8388 	bhi.w	8007874 <UART_SetConfig+0x22ac>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <UART_SetConfig+0x1ba4>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	08007271 	.word	0x08007271
 8007170:	08007327 	.word	0x08007327
 8007174:	08007875 	.word	0x08007875
 8007178:	08007875 	.word	0x08007875
 800717c:	080073dd 	.word	0x080073dd
 8007180:	08007875 	.word	0x08007875
 8007184:	08007875 	.word	0x08007875
 8007188:	08007875 	.word	0x08007875
 800718c:	08007497 	.word	0x08007497
 8007190:	08007875 	.word	0x08007875
 8007194:	08007875 	.word	0x08007875
 8007198:	08007875 	.word	0x08007875
 800719c:	08007875 	.word	0x08007875
 80071a0:	08007875 	.word	0x08007875
 80071a4:	08007875 	.word	0x08007875
 80071a8:	08007875 	.word	0x08007875
 80071ac:	08007551 	.word	0x08007551
 80071b0:	08007875 	.word	0x08007875
 80071b4:	08007875 	.word	0x08007875
 80071b8:	08007875 	.word	0x08007875
 80071bc:	08007875 	.word	0x08007875
 80071c0:	08007875 	.word	0x08007875
 80071c4:	08007875 	.word	0x08007875
 80071c8:	08007875 	.word	0x08007875
 80071cc:	08007875 	.word	0x08007875
 80071d0:	08007875 	.word	0x08007875
 80071d4:	08007875 	.word	0x08007875
 80071d8:	08007875 	.word	0x08007875
 80071dc:	08007875 	.word	0x08007875
 80071e0:	08007875 	.word	0x08007875
 80071e4:	08007875 	.word	0x08007875
 80071e8:	08007875 	.word	0x08007875
 80071ec:	080076c1 	.word	0x080076c1
 80071f0:	08007875 	.word	0x08007875
 80071f4:	08007875 	.word	0x08007875
 80071f8:	08007875 	.word	0x08007875
 80071fc:	08007875 	.word	0x08007875
 8007200:	08007875 	.word	0x08007875
 8007204:	08007875 	.word	0x08007875
 8007208:	08007875 	.word	0x08007875
 800720c:	08007875 	.word	0x08007875
 8007210:	08007875 	.word	0x08007875
 8007214:	08007875 	.word	0x08007875
 8007218:	08007875 	.word	0x08007875
 800721c:	08007875 	.word	0x08007875
 8007220:	08007875 	.word	0x08007875
 8007224:	08007875 	.word	0x08007875
 8007228:	08007875 	.word	0x08007875
 800722c:	08007875 	.word	0x08007875
 8007230:	08007875 	.word	0x08007875
 8007234:	08007875 	.word	0x08007875
 8007238:	08007875 	.word	0x08007875
 800723c:	08007875 	.word	0x08007875
 8007240:	08007875 	.word	0x08007875
 8007244:	08007875 	.word	0x08007875
 8007248:	08007875 	.word	0x08007875
 800724c:	08007875 	.word	0x08007875
 8007250:	08007875 	.word	0x08007875
 8007254:	08007875 	.word	0x08007875
 8007258:	08007875 	.word	0x08007875
 800725c:	08007875 	.word	0x08007875
 8007260:	08007875 	.word	0x08007875
 8007264:	08007875 	.word	0x08007875
 8007268:	08007875 	.word	0x08007875
 800726c:	080077b5 	.word	0x080077b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007270:	f7fb f9ec 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8007274:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d044      	beq.n	8007308 <UART_SetConfig+0x1d40>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	2b01      	cmp	r3, #1
 8007284:	d03e      	beq.n	8007304 <UART_SetConfig+0x1d3c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	2b02      	cmp	r3, #2
 800728c:	d038      	beq.n	8007300 <UART_SetConfig+0x1d38>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	2b03      	cmp	r3, #3
 8007294:	d032      	beq.n	80072fc <UART_SetConfig+0x1d34>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b04      	cmp	r3, #4
 800729c:	d02c      	beq.n	80072f8 <UART_SetConfig+0x1d30>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d026      	beq.n	80072f4 <UART_SetConfig+0x1d2c>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b06      	cmp	r3, #6
 80072ac:	d020      	beq.n	80072f0 <UART_SetConfig+0x1d28>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	d01a      	beq.n	80072ec <UART_SetConfig+0x1d24>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d014      	beq.n	80072e8 <UART_SetConfig+0x1d20>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b09      	cmp	r3, #9
 80072c4:	d00e      	beq.n	80072e4 <UART_SetConfig+0x1d1c>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b0a      	cmp	r3, #10
 80072cc:	d008      	beq.n	80072e0 <UART_SetConfig+0x1d18>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b0b      	cmp	r3, #11
 80072d4:	d102      	bne.n	80072dc <UART_SetConfig+0x1d14>
 80072d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072da:	e016      	b.n	800730a <UART_SetConfig+0x1d42>
 80072dc:	2301      	movs	r3, #1
 80072de:	e014      	b.n	800730a <UART_SetConfig+0x1d42>
 80072e0:	2380      	movs	r3, #128	; 0x80
 80072e2:	e012      	b.n	800730a <UART_SetConfig+0x1d42>
 80072e4:	2340      	movs	r3, #64	; 0x40
 80072e6:	e010      	b.n	800730a <UART_SetConfig+0x1d42>
 80072e8:	2320      	movs	r3, #32
 80072ea:	e00e      	b.n	800730a <UART_SetConfig+0x1d42>
 80072ec:	2310      	movs	r3, #16
 80072ee:	e00c      	b.n	800730a <UART_SetConfig+0x1d42>
 80072f0:	230c      	movs	r3, #12
 80072f2:	e00a      	b.n	800730a <UART_SetConfig+0x1d42>
 80072f4:	230a      	movs	r3, #10
 80072f6:	e008      	b.n	800730a <UART_SetConfig+0x1d42>
 80072f8:	2308      	movs	r3, #8
 80072fa:	e006      	b.n	800730a <UART_SetConfig+0x1d42>
 80072fc:	2306      	movs	r3, #6
 80072fe:	e004      	b.n	800730a <UART_SetConfig+0x1d42>
 8007300:	2304      	movs	r3, #4
 8007302:	e002      	b.n	800730a <UART_SetConfig+0x1d42>
 8007304:	2302      	movs	r3, #2
 8007306:	e000      	b.n	800730a <UART_SetConfig+0x1d42>
 8007308:	2301      	movs	r3, #1
 800730a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800730c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	085b      	lsrs	r3, r3, #1
 8007316:	441a      	add	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007320:	b29b      	uxth	r3, r3
 8007322:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007324:	e2aa      	b.n	800787c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007326:	f7fb f9a7 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 800732a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d044      	beq.n	80073be <UART_SetConfig+0x1df6>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	2b01      	cmp	r3, #1
 800733a:	d03e      	beq.n	80073ba <UART_SetConfig+0x1df2>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	2b02      	cmp	r3, #2
 8007342:	d038      	beq.n	80073b6 <UART_SetConfig+0x1dee>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b03      	cmp	r3, #3
 800734a:	d032      	beq.n	80073b2 <UART_SetConfig+0x1dea>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b04      	cmp	r3, #4
 8007352:	d02c      	beq.n	80073ae <UART_SetConfig+0x1de6>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b05      	cmp	r3, #5
 800735a:	d026      	beq.n	80073aa <UART_SetConfig+0x1de2>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b06      	cmp	r3, #6
 8007362:	d020      	beq.n	80073a6 <UART_SetConfig+0x1dde>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b07      	cmp	r3, #7
 800736a:	d01a      	beq.n	80073a2 <UART_SetConfig+0x1dda>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b08      	cmp	r3, #8
 8007372:	d014      	beq.n	800739e <UART_SetConfig+0x1dd6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b09      	cmp	r3, #9
 800737a:	d00e      	beq.n	800739a <UART_SetConfig+0x1dd2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b0a      	cmp	r3, #10
 8007382:	d008      	beq.n	8007396 <UART_SetConfig+0x1dce>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b0b      	cmp	r3, #11
 800738a:	d102      	bne.n	8007392 <UART_SetConfig+0x1dca>
 800738c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007390:	e016      	b.n	80073c0 <UART_SetConfig+0x1df8>
 8007392:	2301      	movs	r3, #1
 8007394:	e014      	b.n	80073c0 <UART_SetConfig+0x1df8>
 8007396:	2380      	movs	r3, #128	; 0x80
 8007398:	e012      	b.n	80073c0 <UART_SetConfig+0x1df8>
 800739a:	2340      	movs	r3, #64	; 0x40
 800739c:	e010      	b.n	80073c0 <UART_SetConfig+0x1df8>
 800739e:	2320      	movs	r3, #32
 80073a0:	e00e      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073a2:	2310      	movs	r3, #16
 80073a4:	e00c      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073a6:	230c      	movs	r3, #12
 80073a8:	e00a      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073aa:	230a      	movs	r3, #10
 80073ac:	e008      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073ae:	2308      	movs	r3, #8
 80073b0:	e006      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073b2:	2306      	movs	r3, #6
 80073b4:	e004      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073b6:	2304      	movs	r3, #4
 80073b8:	e002      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e000      	b.n	80073c0 <UART_SetConfig+0x1df8>
 80073be:	2301      	movs	r3, #1
 80073c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	441a      	add	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073da:	e24f      	b.n	800787c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073dc:	f107 0318 	add.w	r3, r7, #24
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fc f865 	bl	80034b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d044      	beq.n	800747a <UART_SetConfig+0x1eb2>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d03e      	beq.n	8007476 <UART_SetConfig+0x1eae>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d038      	beq.n	8007472 <UART_SetConfig+0x1eaa>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b03      	cmp	r3, #3
 8007406:	d032      	beq.n	800746e <UART_SetConfig+0x1ea6>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	2b04      	cmp	r3, #4
 800740e:	d02c      	beq.n	800746a <UART_SetConfig+0x1ea2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	2b05      	cmp	r3, #5
 8007416:	d026      	beq.n	8007466 <UART_SetConfig+0x1e9e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	2b06      	cmp	r3, #6
 800741e:	d020      	beq.n	8007462 <UART_SetConfig+0x1e9a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	2b07      	cmp	r3, #7
 8007426:	d01a      	beq.n	800745e <UART_SetConfig+0x1e96>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	2b08      	cmp	r3, #8
 800742e:	d014      	beq.n	800745a <UART_SetConfig+0x1e92>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	2b09      	cmp	r3, #9
 8007436:	d00e      	beq.n	8007456 <UART_SetConfig+0x1e8e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2b0a      	cmp	r3, #10
 800743e:	d008      	beq.n	8007452 <UART_SetConfig+0x1e8a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	2b0b      	cmp	r3, #11
 8007446:	d102      	bne.n	800744e <UART_SetConfig+0x1e86>
 8007448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800744c:	e016      	b.n	800747c <UART_SetConfig+0x1eb4>
 800744e:	2301      	movs	r3, #1
 8007450:	e014      	b.n	800747c <UART_SetConfig+0x1eb4>
 8007452:	2380      	movs	r3, #128	; 0x80
 8007454:	e012      	b.n	800747c <UART_SetConfig+0x1eb4>
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	e010      	b.n	800747c <UART_SetConfig+0x1eb4>
 800745a:	2320      	movs	r3, #32
 800745c:	e00e      	b.n	800747c <UART_SetConfig+0x1eb4>
 800745e:	2310      	movs	r3, #16
 8007460:	e00c      	b.n	800747c <UART_SetConfig+0x1eb4>
 8007462:	230c      	movs	r3, #12
 8007464:	e00a      	b.n	800747c <UART_SetConfig+0x1eb4>
 8007466:	230a      	movs	r3, #10
 8007468:	e008      	b.n	800747c <UART_SetConfig+0x1eb4>
 800746a:	2308      	movs	r3, #8
 800746c:	e006      	b.n	800747c <UART_SetConfig+0x1eb4>
 800746e:	2306      	movs	r3, #6
 8007470:	e004      	b.n	800747c <UART_SetConfig+0x1eb4>
 8007472:	2304      	movs	r3, #4
 8007474:	e002      	b.n	800747c <UART_SetConfig+0x1eb4>
 8007476:	2302      	movs	r3, #2
 8007478:	e000      	b.n	800747c <UART_SetConfig+0x1eb4>
 800747a:	2301      	movs	r3, #1
 800747c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	085b      	lsrs	r3, r3, #1
 8007486:	441a      	add	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	b29b      	uxth	r3, r3
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007494:	e1f2      	b.n	800787c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007496:	f107 030c 	add.w	r3, r7, #12
 800749a:	4618      	mov	r0, r3
 800749c:	f7fc f954 	bl	8003748 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d044      	beq.n	8007534 <UART_SetConfig+0x1f6c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d03e      	beq.n	8007530 <UART_SetConfig+0x1f68>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d038      	beq.n	800752c <UART_SetConfig+0x1f64>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d032      	beq.n	8007528 <UART_SetConfig+0x1f60>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d02c      	beq.n	8007524 <UART_SetConfig+0x1f5c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d026      	beq.n	8007520 <UART_SetConfig+0x1f58>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	2b06      	cmp	r3, #6
 80074d8:	d020      	beq.n	800751c <UART_SetConfig+0x1f54>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b07      	cmp	r3, #7
 80074e0:	d01a      	beq.n	8007518 <UART_SetConfig+0x1f50>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b08      	cmp	r3, #8
 80074e8:	d014      	beq.n	8007514 <UART_SetConfig+0x1f4c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	2b09      	cmp	r3, #9
 80074f0:	d00e      	beq.n	8007510 <UART_SetConfig+0x1f48>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	2b0a      	cmp	r3, #10
 80074f8:	d008      	beq.n	800750c <UART_SetConfig+0x1f44>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	2b0b      	cmp	r3, #11
 8007500:	d102      	bne.n	8007508 <UART_SetConfig+0x1f40>
 8007502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007506:	e016      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007508:	2301      	movs	r3, #1
 800750a:	e014      	b.n	8007536 <UART_SetConfig+0x1f6e>
 800750c:	2380      	movs	r3, #128	; 0x80
 800750e:	e012      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007510:	2340      	movs	r3, #64	; 0x40
 8007512:	e010      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007514:	2320      	movs	r3, #32
 8007516:	e00e      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007518:	2310      	movs	r3, #16
 800751a:	e00c      	b.n	8007536 <UART_SetConfig+0x1f6e>
 800751c:	230c      	movs	r3, #12
 800751e:	e00a      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007520:	230a      	movs	r3, #10
 8007522:	e008      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007524:	2308      	movs	r3, #8
 8007526:	e006      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007528:	2306      	movs	r3, #6
 800752a:	e004      	b.n	8007536 <UART_SetConfig+0x1f6e>
 800752c:	2304      	movs	r3, #4
 800752e:	e002      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007530:	2302      	movs	r3, #2
 8007532:	e000      	b.n	8007536 <UART_SetConfig+0x1f6e>
 8007534:	2301      	movs	r3, #1
 8007536:	fbb2 f2f3 	udiv	r2, r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	441a      	add	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	fbb2 f3f3 	udiv	r3, r2, r3
 800754a:	b29b      	uxth	r3, r3
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800754e:	e195      	b.n	800787c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007550:	4b87      	ldr	r3, [pc, #540]	; (8007770 <UART_SetConfig+0x21a8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d05d      	beq.n	8007618 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800755c:	4b84      	ldr	r3, [pc, #528]	; (8007770 <UART_SetConfig+0x21a8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	08db      	lsrs	r3, r3, #3
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	4a83      	ldr	r2, [pc, #524]	; (8007774 <UART_SetConfig+0x21ac>)
 8007568:	40da      	lsrs	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	d044      	beq.n	80075fc <UART_SetConfig+0x2034>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b01      	cmp	r3, #1
 8007578:	d03e      	beq.n	80075f8 <UART_SetConfig+0x2030>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b02      	cmp	r3, #2
 8007580:	d038      	beq.n	80075f4 <UART_SetConfig+0x202c>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b03      	cmp	r3, #3
 8007588:	d032      	beq.n	80075f0 <UART_SetConfig+0x2028>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b04      	cmp	r3, #4
 8007590:	d02c      	beq.n	80075ec <UART_SetConfig+0x2024>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	2b05      	cmp	r3, #5
 8007598:	d026      	beq.n	80075e8 <UART_SetConfig+0x2020>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d020      	beq.n	80075e4 <UART_SetConfig+0x201c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b07      	cmp	r3, #7
 80075a8:	d01a      	beq.n	80075e0 <UART_SetConfig+0x2018>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d014      	beq.n	80075dc <UART_SetConfig+0x2014>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b09      	cmp	r3, #9
 80075b8:	d00e      	beq.n	80075d8 <UART_SetConfig+0x2010>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b0a      	cmp	r3, #10
 80075c0:	d008      	beq.n	80075d4 <UART_SetConfig+0x200c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	2b0b      	cmp	r3, #11
 80075c8:	d102      	bne.n	80075d0 <UART_SetConfig+0x2008>
 80075ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ce:	e016      	b.n	80075fe <UART_SetConfig+0x2036>
 80075d0:	2301      	movs	r3, #1
 80075d2:	e014      	b.n	80075fe <UART_SetConfig+0x2036>
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	e012      	b.n	80075fe <UART_SetConfig+0x2036>
 80075d8:	2340      	movs	r3, #64	; 0x40
 80075da:	e010      	b.n	80075fe <UART_SetConfig+0x2036>
 80075dc:	2320      	movs	r3, #32
 80075de:	e00e      	b.n	80075fe <UART_SetConfig+0x2036>
 80075e0:	2310      	movs	r3, #16
 80075e2:	e00c      	b.n	80075fe <UART_SetConfig+0x2036>
 80075e4:	230c      	movs	r3, #12
 80075e6:	e00a      	b.n	80075fe <UART_SetConfig+0x2036>
 80075e8:	230a      	movs	r3, #10
 80075ea:	e008      	b.n	80075fe <UART_SetConfig+0x2036>
 80075ec:	2308      	movs	r3, #8
 80075ee:	e006      	b.n	80075fe <UART_SetConfig+0x2036>
 80075f0:	2306      	movs	r3, #6
 80075f2:	e004      	b.n	80075fe <UART_SetConfig+0x2036>
 80075f4:	2304      	movs	r3, #4
 80075f6:	e002      	b.n	80075fe <UART_SetConfig+0x2036>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e000      	b.n	80075fe <UART_SetConfig+0x2036>
 80075fc:	2301      	movs	r3, #1
 80075fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	441a      	add	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007612:	b29b      	uxth	r3, r3
 8007614:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007616:	e131      	b.n	800787c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b00      	cmp	r3, #0
 800761e:	d043      	beq.n	80076a8 <UART_SetConfig+0x20e0>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b01      	cmp	r3, #1
 8007626:	d03d      	beq.n	80076a4 <UART_SetConfig+0x20dc>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b02      	cmp	r3, #2
 800762e:	d037      	beq.n	80076a0 <UART_SetConfig+0x20d8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b03      	cmp	r3, #3
 8007636:	d031      	beq.n	800769c <UART_SetConfig+0x20d4>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b04      	cmp	r3, #4
 800763e:	d02b      	beq.n	8007698 <UART_SetConfig+0x20d0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b05      	cmp	r3, #5
 8007646:	d025      	beq.n	8007694 <UART_SetConfig+0x20cc>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b06      	cmp	r3, #6
 800764e:	d01f      	beq.n	8007690 <UART_SetConfig+0x20c8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b07      	cmp	r3, #7
 8007656:	d019      	beq.n	800768c <UART_SetConfig+0x20c4>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b08      	cmp	r3, #8
 800765e:	d013      	beq.n	8007688 <UART_SetConfig+0x20c0>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b09      	cmp	r3, #9
 8007666:	d00d      	beq.n	8007684 <UART_SetConfig+0x20bc>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b0a      	cmp	r3, #10
 800766e:	d007      	beq.n	8007680 <UART_SetConfig+0x20b8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b0b      	cmp	r3, #11
 8007676:	d101      	bne.n	800767c <UART_SetConfig+0x20b4>
 8007678:	4b3f      	ldr	r3, [pc, #252]	; (8007778 <UART_SetConfig+0x21b0>)
 800767a:	e016      	b.n	80076aa <UART_SetConfig+0x20e2>
 800767c:	4b3d      	ldr	r3, [pc, #244]	; (8007774 <UART_SetConfig+0x21ac>)
 800767e:	e014      	b.n	80076aa <UART_SetConfig+0x20e2>
 8007680:	4b3e      	ldr	r3, [pc, #248]	; (800777c <UART_SetConfig+0x21b4>)
 8007682:	e012      	b.n	80076aa <UART_SetConfig+0x20e2>
 8007684:	4b3e      	ldr	r3, [pc, #248]	; (8007780 <UART_SetConfig+0x21b8>)
 8007686:	e010      	b.n	80076aa <UART_SetConfig+0x20e2>
 8007688:	4b3e      	ldr	r3, [pc, #248]	; (8007784 <UART_SetConfig+0x21bc>)
 800768a:	e00e      	b.n	80076aa <UART_SetConfig+0x20e2>
 800768c:	4b3e      	ldr	r3, [pc, #248]	; (8007788 <UART_SetConfig+0x21c0>)
 800768e:	e00c      	b.n	80076aa <UART_SetConfig+0x20e2>
 8007690:	4b3e      	ldr	r3, [pc, #248]	; (800778c <UART_SetConfig+0x21c4>)
 8007692:	e00a      	b.n	80076aa <UART_SetConfig+0x20e2>
 8007694:	4b3e      	ldr	r3, [pc, #248]	; (8007790 <UART_SetConfig+0x21c8>)
 8007696:	e008      	b.n	80076aa <UART_SetConfig+0x20e2>
 8007698:	4b3e      	ldr	r3, [pc, #248]	; (8007794 <UART_SetConfig+0x21cc>)
 800769a:	e006      	b.n	80076aa <UART_SetConfig+0x20e2>
 800769c:	4b3e      	ldr	r3, [pc, #248]	; (8007798 <UART_SetConfig+0x21d0>)
 800769e:	e004      	b.n	80076aa <UART_SetConfig+0x20e2>
 80076a0:	4b3e      	ldr	r3, [pc, #248]	; (800779c <UART_SetConfig+0x21d4>)
 80076a2:	e002      	b.n	80076aa <UART_SetConfig+0x20e2>
 80076a4:	4b3e      	ldr	r3, [pc, #248]	; (80077a0 <UART_SetConfig+0x21d8>)
 80076a6:	e000      	b.n	80076aa <UART_SetConfig+0x20e2>
 80076a8:	4b32      	ldr	r3, [pc, #200]	; (8007774 <UART_SetConfig+0x21ac>)
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6852      	ldr	r2, [r2, #4]
 80076ae:	0852      	lsrs	r2, r2, #1
 80076b0:	441a      	add	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076be:	e0dd      	b.n	800787c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d046      	beq.n	8007756 <UART_SetConfig+0x218e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d040      	beq.n	8007752 <UART_SetConfig+0x218a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d03a      	beq.n	800774e <UART_SetConfig+0x2186>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d034      	beq.n	800774a <UART_SetConfig+0x2182>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d02e      	beq.n	8007746 <UART_SetConfig+0x217e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	d028      	beq.n	8007742 <UART_SetConfig+0x217a>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	2b06      	cmp	r3, #6
 80076f6:	d022      	beq.n	800773e <UART_SetConfig+0x2176>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	2b07      	cmp	r3, #7
 80076fe:	d01c      	beq.n	800773a <UART_SetConfig+0x2172>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	2b08      	cmp	r3, #8
 8007706:	d016      	beq.n	8007736 <UART_SetConfig+0x216e>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2b09      	cmp	r3, #9
 800770e:	d00f      	beq.n	8007730 <UART_SetConfig+0x2168>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	2b0a      	cmp	r3, #10
 8007716:	d008      	beq.n	800772a <UART_SetConfig+0x2162>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	2b0b      	cmp	r3, #11
 800771e:	d102      	bne.n	8007726 <UART_SetConfig+0x215e>
 8007720:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007724:	e018      	b.n	8007758 <UART_SetConfig+0x2190>
 8007726:	4b18      	ldr	r3, [pc, #96]	; (8007788 <UART_SetConfig+0x21c0>)
 8007728:	e016      	b.n	8007758 <UART_SetConfig+0x2190>
 800772a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800772e:	e013      	b.n	8007758 <UART_SetConfig+0x2190>
 8007730:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007734:	e010      	b.n	8007758 <UART_SetConfig+0x2190>
 8007736:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <UART_SetConfig+0x21dc>)
 8007738:	e00e      	b.n	8007758 <UART_SetConfig+0x2190>
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <UART_SetConfig+0x21b0>)
 800773c:	e00c      	b.n	8007758 <UART_SetConfig+0x2190>
 800773e:	4b1a      	ldr	r3, [pc, #104]	; (80077a8 <UART_SetConfig+0x21e0>)
 8007740:	e00a      	b.n	8007758 <UART_SetConfig+0x2190>
 8007742:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <UART_SetConfig+0x21e4>)
 8007744:	e008      	b.n	8007758 <UART_SetConfig+0x2190>
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <UART_SetConfig+0x21b4>)
 8007748:	e006      	b.n	8007758 <UART_SetConfig+0x2190>
 800774a:	4b19      	ldr	r3, [pc, #100]	; (80077b0 <UART_SetConfig+0x21e8>)
 800774c:	e004      	b.n	8007758 <UART_SetConfig+0x2190>
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <UART_SetConfig+0x21b8>)
 8007750:	e002      	b.n	8007758 <UART_SetConfig+0x2190>
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <UART_SetConfig+0x21bc>)
 8007754:	e000      	b.n	8007758 <UART_SetConfig+0x2190>
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <UART_SetConfig+0x21c0>)
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6852      	ldr	r2, [r2, #4]
 800775c:	0852      	lsrs	r2, r2, #1
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	b29b      	uxth	r3, r3
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800776c:	e086      	b.n	800787c <UART_SetConfig+0x22b4>
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
 8007774:	03d09000 	.word	0x03d09000
 8007778:	0003d090 	.word	0x0003d090
 800777c:	0007a120 	.word	0x0007a120
 8007780:	000f4240 	.word	0x000f4240
 8007784:	001e8480 	.word	0x001e8480
 8007788:	003d0900 	.word	0x003d0900
 800778c:	00516155 	.word	0x00516155
 8007790:	0061a800 	.word	0x0061a800
 8007794:	007a1200 	.word	0x007a1200
 8007798:	00a2c2aa 	.word	0x00a2c2aa
 800779c:	00f42400 	.word	0x00f42400
 80077a0:	01e84800 	.word	0x01e84800
 80077a4:	0001e848 	.word	0x0001e848
 80077a8:	00051615 	.word	0x00051615
 80077ac:	00061a80 	.word	0x00061a80
 80077b0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d04e      	beq.n	800785a <UART_SetConfig+0x2292>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d047      	beq.n	8007854 <UART_SetConfig+0x228c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d040      	beq.n	800784e <UART_SetConfig+0x2286>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d039      	beq.n	8007848 <UART_SetConfig+0x2280>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d032      	beq.n	8007842 <UART_SetConfig+0x227a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	2b05      	cmp	r3, #5
 80077e2:	d02b      	beq.n	800783c <UART_SetConfig+0x2274>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	2b06      	cmp	r3, #6
 80077ea:	d024      	beq.n	8007836 <UART_SetConfig+0x226e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	2b07      	cmp	r3, #7
 80077f2:	d01d      	beq.n	8007830 <UART_SetConfig+0x2268>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d016      	beq.n	800782a <UART_SetConfig+0x2262>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	2b09      	cmp	r3, #9
 8007802:	d00f      	beq.n	8007824 <UART_SetConfig+0x225c>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b0a      	cmp	r3, #10
 800780a:	d008      	beq.n	800781e <UART_SetConfig+0x2256>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	2b0b      	cmp	r3, #11
 8007812:	d101      	bne.n	8007818 <UART_SetConfig+0x2250>
 8007814:	2380      	movs	r3, #128	; 0x80
 8007816:	e022      	b.n	800785e <UART_SetConfig+0x2296>
 8007818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781c:	e01f      	b.n	800785e <UART_SetConfig+0x2296>
 800781e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007822:	e01c      	b.n	800785e <UART_SetConfig+0x2296>
 8007824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007828:	e019      	b.n	800785e <UART_SetConfig+0x2296>
 800782a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800782e:	e016      	b.n	800785e <UART_SetConfig+0x2296>
 8007830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007834:	e013      	b.n	800785e <UART_SetConfig+0x2296>
 8007836:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800783a:	e010      	b.n	800785e <UART_SetConfig+0x2296>
 800783c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007840:	e00d      	b.n	800785e <UART_SetConfig+0x2296>
 8007842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007846:	e00a      	b.n	800785e <UART_SetConfig+0x2296>
 8007848:	f241 5355 	movw	r3, #5461	; 0x1555
 800784c:	e007      	b.n	800785e <UART_SetConfig+0x2296>
 800784e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007852:	e004      	b.n	800785e <UART_SetConfig+0x2296>
 8007854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007858:	e001      	b.n	800785e <UART_SetConfig+0x2296>
 800785a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	6852      	ldr	r2, [r2, #4]
 8007862:	0852      	lsrs	r2, r2, #1
 8007864:	441a      	add	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	fbb2 f3f3 	udiv	r3, r2, r3
 800786e:	b29b      	uxth	r3, r3
 8007870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007872:	e003      	b.n	800787c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800787a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787e:	2b0f      	cmp	r3, #15
 8007880:	d908      	bls.n	8007894 <UART_SetConfig+0x22cc>
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007888:	d204      	bcs.n	8007894 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007890:	60da      	str	r2, [r3, #12]
 8007892:	e002      	b.n	800789a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80078b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3740      	adds	r7, #64	; 0x40
 80078be:	46bd      	mov	sp, r7
 80078c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080078c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c2:	d10a      	bne.n	80079da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  }
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a18:	f7f8 fe60 	bl	80006dc <HAL_GetTick>
 8007a1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d10e      	bne.n	8007a4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f82c 	bl	8007a98 <UART_WaitOnFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e022      	b.n	8007a90 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d10e      	bne.n	8007a76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f816 	bl	8007a98 <UART_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e00c      	b.n	8007a90 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa8:	e062      	b.n	8007b70 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d05e      	beq.n	8007b70 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab2:	f7f8 fe13 	bl	80006dc <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d302      	bcc.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11d      	bne.n	8007b04 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ad6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0201 	bic.w	r2, r2, #1
 8007ae6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e045      	b.n	8007b90 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d02e      	beq.n	8007b70 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b20:	d126      	bne.n	8007b70 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b2a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e00f      	b.n	8007b90 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69da      	ldr	r2, [r3, #28]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d08d      	beq.n	8007aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_UARTEx_DisableFifoMode+0x16>
 8007baa:	2302      	movs	r3, #2
 8007bac:	e027      	b.n	8007bfe <HAL_UARTEx_DisableFifoMode+0x66>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2224      	movs	r2, #36	; 0x24
 8007bba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d101      	bne.n	8007c22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e02d      	b.n	8007c7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2224      	movs	r2, #36	; 0x24
 8007c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f022 0201 	bic.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f850 	bl	8007d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e02d      	b.n	8007cfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2224      	movs	r2, #36	; 0x24
 8007caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f812 	bl	8007d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b089      	sub	sp, #36	; 0x24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007d0c:	4a2f      	ldr	r2, [pc, #188]	; (8007dcc <UARTEx_SetNbDataToProcess+0xc8>)
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d16:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007d1a:	4a2d      	ldr	r2, [pc, #180]	; (8007dd0 <UARTEx_SetNbDataToProcess+0xcc>)
 8007d1c:	f107 030c 	add.w	r3, r7, #12
 8007d20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d24:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d108      	bne.n	8007d42 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d40:	e03d      	b.n	8007dbe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d42:	2308      	movs	r3, #8
 8007d44:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d46:	2308      	movs	r3, #8
 8007d48:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	0e5b      	lsrs	r3, r3, #25
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	0f5b      	lsrs	r3, r3, #29
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007d6a:	7fbb      	ldrb	r3, [r7, #30]
 8007d6c:	7f3a      	ldrb	r2, [r7, #28]
 8007d6e:	f107 0120 	add.w	r1, r7, #32
 8007d72:	440a      	add	r2, r1
 8007d74:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007d78:	fb02 f303 	mul.w	r3, r2, r3
 8007d7c:	7f3a      	ldrb	r2, [r7, #28]
 8007d7e:	f107 0120 	add.w	r1, r7, #32
 8007d82:	440a      	add	r2, r1
 8007d84:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007d88:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007d94:	7ffb      	ldrb	r3, [r7, #31]
 8007d96:	7f7a      	ldrb	r2, [r7, #29]
 8007d98:	f107 0120 	add.w	r1, r7, #32
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	7f7a      	ldrb	r2, [r7, #29]
 8007da8:	f107 0120 	add.w	r1, r7, #32
 8007dac:	440a      	add	r2, r1
 8007dae:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007db2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007dbe:	bf00      	nop
 8007dc0:	3724      	adds	r7, #36	; 0x24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	08009148 	.word	0x08009148
 8007dd0:	08009150 	.word	0x08009150

08007dd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	f107 001c 	add.w	r0, r7, #28
 8007de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d120      	bne.n	8007e2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	4b25      	ldr	r3, [pc, #148]	; (8007e94 <USB_CoreInit+0xc0>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d105      	bne.n	8007e22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa5a 	bl	80082dc <USB_CoreReset>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	e01a      	b.n	8007e64 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa4e 	bl	80082dc <USB_CoreReset>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
 8007e56:	e005      	b.n	8007e64 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10b      	bne.n	8007e82 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f043 0208 	orr.w	r2, r3, #8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e8e:	b004      	add	sp, #16
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	ffbdffbf 	.word	0xffbdffbf

08007e98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 0201 	bic.w	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d106      	bne.n	8007ee6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60da      	str	r2, [r3, #12]
 8007ee4:	e00b      	b.n	8007efe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60da      	str	r2, [r3, #12]
 8007ef8:	e001      	b.n	8007efe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e003      	b.n	8007f06 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007efe:	2032      	movs	r0, #50	; 0x32
 8007f00:	f7f8 fbf8 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f10:	b084      	sub	sp, #16
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b086      	sub	sp, #24
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	e009      	b.n	8007f44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	3340      	adds	r3, #64	; 0x40
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	3301      	adds	r3, #1
 8007f42:	613b      	str	r3, [r7, #16]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b0e      	cmp	r3, #14
 8007f48:	d9f2      	bls.n	8007f30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d112      	bne.n	8007f76 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e005      	b.n	8007f82 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f88:	461a      	mov	r2, r3
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f94:	4619      	mov	r1, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	680b      	ldr	r3, [r1, #0]
 8007fa0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d10c      	bne.n	8007fc2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d104      	bne.n	8007fb8 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007fae:	2100      	movs	r1, #0
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f961 	bl	8008278 <USB_SetDevSpeed>
 8007fb6:	e008      	b.n	8007fca <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007fb8:	2101      	movs	r1, #1
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f95c 	bl	8008278 <USB_SetDevSpeed>
 8007fc0:	e003      	b.n	8007fca <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007fc2:	2103      	movs	r1, #3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f957 	bl	8008278 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fca:	2110      	movs	r1, #16
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f90b 	bl	80081e8 <USB_FlushTxFifo>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f929 	bl	8008234 <USB_FlushRxFifo>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffe:	461a      	mov	r2, r3
 8008000:	2300      	movs	r3, #0
 8008002:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	461a      	mov	r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	e043      	b.n	800809e <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800802c:	d118      	bne.n	8008060 <USB_DevInit+0x150>
    {
      if (i == 0U)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	015a      	lsls	r2, r3, #5
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008040:	461a      	mov	r2, r3
 8008042:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	e013      	b.n	8008072 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008056:	461a      	mov	r2, r3
 8008058:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	e008      	b.n	8008072 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806c:	461a      	mov	r2, r3
 800806e:	2300      	movs	r3, #0
 8008070:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	461a      	mov	r2, r3
 8008080:	2300      	movs	r3, #0
 8008082:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	461a      	mov	r2, r3
 8008092:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008096:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	3301      	adds	r3, #1
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d3b7      	bcc.n	8008016 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a6:	2300      	movs	r3, #0
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	e043      	b.n	8008134 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080c2:	d118      	bne.n	80080f6 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	461a      	mov	r2, r3
 80080d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080dc:	6013      	str	r3, [r2, #0]
 80080de:	e013      	b.n	8008108 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ec:	461a      	mov	r2, r3
 80080ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e008      	b.n	8008108 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008102:	461a      	mov	r2, r3
 8008104:	2300      	movs	r3, #0
 8008106:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	461a      	mov	r2, r3
 8008116:	2300      	movs	r3, #0
 8008118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008126:	461a      	mov	r2, r3
 8008128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800812c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	3301      	adds	r3, #1
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3b7      	bcc.n	80080ac <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800814a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800814e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	2b01      	cmp	r3, #1
 8008154:	d110      	bne.n	8008178 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800815c:	461a      	mov	r2, r3
 800815e:	4b1e      	ldr	r3, [pc, #120]	; (80081d8 <USB_DevInit+0x2c8>)
 8008160:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008170:	4619      	mov	r1, r3
 8008172:	4b1a      	ldr	r3, [pc, #104]	; (80081dc <USB_DevInit+0x2cc>)
 8008174:	4313      	orrs	r3, r2
 8008176:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008184:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	f043 0210 	orr.w	r2, r3, #16
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <USB_DevInit+0x2d0>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f043 0208 	orr.w	r2, r3, #8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d105      	bne.n	80081c8 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <USB_DevInit+0x2d4>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081d4:	b004      	add	sp, #16
 80081d6:	4770      	bx	lr
 80081d8:	00800100 	.word	0x00800100
 80081dc:	00010003 	.word	0x00010003
 80081e0:	803c3800 	.word	0x803c3800
 80081e4:	40000004 	.word	0x40000004

080081e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	019b      	lsls	r3, r3, #6
 80081fa:	f043 0220 	orr.w	r2, r3, #32
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4a09      	ldr	r2, [pc, #36]	; (8008230 <USB_FlushTxFifo+0x48>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d901      	bls.n	8008214 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e006      	b.n	8008222 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b20      	cmp	r3, #32
 800821e:	d0f0      	beq.n	8008202 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	00030d40 	.word	0x00030d40

08008234 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2210      	movs	r2, #16
 8008244:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3301      	adds	r3, #1
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4a09      	ldr	r2, [pc, #36]	; (8008274 <USB_FlushRxFifo+0x40>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d901      	bls.n	8008258 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e006      	b.n	8008266 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b10      	cmp	r3, #16
 8008262:	d0f0      	beq.n	8008246 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	00030d40 	.word	0x00030d40

08008278 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008298:	4313      	orrs	r3, r2
 800829a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082c4:	f043 0302 	orr.w	r3, r3, #2
 80082c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80082ca:	2003      	movs	r0, #3
 80082cc:	f7f8 fa12 	bl	80006f4 <HAL_Delay>

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <USB_CoreReset+0x64>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d901      	bls.n	80082fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e01b      	b.n	8008332 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	daf2      	bge.n	80082e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f043 0201 	orr.w	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4a09      	ldr	r2, [pc, #36]	; (8008340 <USB_CoreReset+0x64>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d901      	bls.n	8008324 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e006      	b.n	8008332 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b01      	cmp	r3, #1
 800832e:	d0f0      	beq.n	8008312 <USB_CoreReset+0x36>

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	00030d40 	.word	0x00030d40

08008344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800834a:	f7f8 f945 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */
float temp1,temp2;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800834e:	f000 f831 	bl	80083b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008352:	f000 faad 	bl	80088b0 <MX_GPIO_Init>
  MX_ETH_Init();
 8008356:	f000 f8e7 	bl	8008528 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800835a:	f000 fa2b 	bl	80087b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800835e:	f000 fa75 	bl	800884c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM12_Init();
 8008362:	f000 f9c5 	bl	80086f0 <MX_TIM12_Init>
  MX_TIM3_Init();
 8008366:	f000 f927 	bl	80085b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);
 800836a:	2104      	movs	r1, #4
 800836c:	480d      	ldr	r0, [pc, #52]	; (80083a4 <main+0x60>)
 800836e:	f7fb fd17 	bl	8003da0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   //TIM3输入出发使能
 8008372:	2100      	movs	r1, #0
 8008374:	480c      	ldr	r0, [pc, #48]	; (80083a8 <main+0x64>)
 8008376:	f7fb fda1 	bl	8003ebc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800837a:	2104      	movs	r1, #4
 800837c:	480a      	ldr	r0, [pc, #40]	; (80083a8 <main+0x64>)
 800837e:	f7fb fd9d 	bl	8003ebc <HAL_TIM_IC_Start_IT>
/*	  TIM_SetTIM12Changefrequency2(49,99);//10kHz
	  HAL_Delay(5000);
	  TIM_SetTIM12Changefrequency2(499,999);//10kHz
	  HAL_Delay(5000);*/

	  temp1=duty;
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <main+0x68>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838e:	edc7 7a01 	vstr	s15, [r7, #4]
	  temp2=freq;
 8008392:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <main+0x6c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	ee07 3a90 	vmov	s15, r3
 800839a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800839e:	edc7 7a00 	vstr	s15, [r7]
	  temp1=duty;
 80083a2:	e7ee      	b.n	8008382 <main+0x3e>
 80083a4:	240005d4 	.word	0x240005d4
 80083a8:	24000594 	.word	0x24000594
 80083ac:	240000ec 	.word	0x240000ec
 80083b0:	240000f0 	.word	0x240000f0

080083b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b0cc      	sub	sp, #304	; 0x130
 80083b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80083ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80083be:	224c      	movs	r2, #76	; 0x4c
 80083c0:	2100      	movs	r1, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 feac 	bl	8009120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80083c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80083cc:	2220      	movs	r2, #32
 80083ce:	2100      	movs	r1, #0
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fea5 	bl	8009120 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	4618      	mov	r0, r3
 80083dc:	23bc      	movs	r3, #188	; 0xbc
 80083de:	461a      	mov	r2, r3
 80083e0:	2100      	movs	r1, #0
 80083e2:	f000 fe9d 	bl	8009120 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80083e6:	2002      	movs	r0, #2
 80083e8:	f7f9 f9fe 	bl	80017e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80083ec:	1d3b      	adds	r3, r7, #4
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	4b4a      	ldr	r3, [pc, #296]	; (800851c <SystemClock_Config+0x168>)
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	4a49      	ldr	r2, [pc, #292]	; (800851c <SystemClock_Config+0x168>)
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083fe:	4b47      	ldr	r3, [pc, #284]	; (800851c <SystemClock_Config+0x168>)
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	f003 0201 	and.w	r2, r3, #1
 8008406:	1d3b      	adds	r3, r7, #4
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	4b45      	ldr	r3, [pc, #276]	; (8008520 <SystemClock_Config+0x16c>)
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008412:	4a43      	ldr	r2, [pc, #268]	; (8008520 <SystemClock_Config+0x16c>)
 8008414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008418:	6193      	str	r3, [r2, #24]
 800841a:	4b41      	ldr	r3, [pc, #260]	; (8008520 <SystemClock_Config+0x16c>)
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8008422:	1d3b      	adds	r3, r7, #4
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	1d3b      	adds	r3, r7, #4
 8008428:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800842a:	bf00      	nop
 800842c:	4b3c      	ldr	r3, [pc, #240]	; (8008520 <SystemClock_Config+0x16c>)
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008438:	d1f8      	bne.n	800842c <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800843a:	2301      	movs	r3, #1
 800843c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008440:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8008444:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008448:	2302      	movs	r3, #2
 800844a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800844e:	2302      	movs	r3, #2
 8008450:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008454:	2301      	movs	r3, #1
 8008456:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800845a:	2318      	movs	r3, #24
 800845c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8008460:	2302      	movs	r3, #2
 8008462:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008466:	2304      	movs	r3, #4
 8008468:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800846c:	2302      	movs	r3, #2
 800846e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008472:	230c      	movs	r3, #12
 8008474:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008478:	2300      	movs	r3, #0
 800847a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008484:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008488:	4618      	mov	r0, r3
 800848a:	f7f9 f9f5 	bl	8001878 <HAL_RCC_OscConfig>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8008494:	f000 fb26 	bl	8008ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008498:	233f      	movs	r3, #63	; 0x3f
 800849a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800849e:	2303      	movs	r3, #3
 80084a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80084a4:	2300      	movs	r3, #0
 80084a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80084aa:	2300      	movs	r3, #0
 80084ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80084b6:	2300      	movs	r3, #0
 80084b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80084bc:	2300      	movs	r3, #0
 80084be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80084c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80084cc:	2101      	movs	r1, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7f9 fd8a 	bl	8001fe8 <HAL_RCC_ClockConfig>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80084da:	f000 fb03 	bl	8008ae4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	4a10      	ldr	r2, [pc, #64]	; (8008524 <SystemClock_Config+0x170>)
 80084e4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	2200      	movs	r2, #0
 80084ec:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80084ee:	f107 0308 	add.w	r3, r7, #8
 80084f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084fa:	f107 0308 	add.w	r3, r7, #8
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fa f8d0 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800850a:	f000 faeb 	bl	8008ae4 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800850e:	f7f9 f9a3 	bl	8001858 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8008512:	bf00      	nop
 8008514:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	58000400 	.word	0x58000400
 8008520:	58024800 	.word	0x58024800
 8008524:	00040002 	.word	0x00040002

08008528 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800852e:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <MX_ETH_Init+0x7c>)
 8008530:	4a1d      	ldr	r2, [pc, #116]	; (80085a8 <MX_ETH_Init+0x80>)
 8008532:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008534:	2300      	movs	r3, #0
 8008536:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8008538:	2380      	movs	r3, #128	; 0x80
 800853a:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 800853c:	23e1      	movs	r3, #225	; 0xe1
 800853e:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8008540:	2300      	movs	r3, #0
 8008542:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8008544:	2300      	movs	r3, #0
 8008546:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8008548:	2300      	movs	r3, #0
 800854a:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800854c:	4a15      	ldr	r2, [pc, #84]	; (80085a4 <MX_ETH_Init+0x7c>)
 800854e:	463b      	mov	r3, r7
 8008550:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008552:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <MX_ETH_Init+0x7c>)
 8008554:	2201      	movs	r2, #1
 8008556:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008558:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <MX_ETH_Init+0x7c>)
 800855a:	4a14      	ldr	r2, [pc, #80]	; (80085ac <MX_ETH_Init+0x84>)
 800855c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800855e:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <MX_ETH_Init+0x7c>)
 8008560:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <MX_ETH_Init+0x88>)
 8008562:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8008564:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <MX_ETH_Init+0x7c>)
 8008566:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800856a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800856c:	480d      	ldr	r0, [pc, #52]	; (80085a4 <MX_ETH_Init+0x7c>)
 800856e:	f7f8 fa13 	bl	8000998 <HAL_ETH_Init>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <MX_ETH_Init+0x54>
  {
    Error_Handler();
 8008578:	f000 fab4 	bl	8008ae4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800857c:	2234      	movs	r2, #52	; 0x34
 800857e:	2100      	movs	r1, #0
 8008580:	480c      	ldr	r0, [pc, #48]	; (80085b4 <MX_ETH_Init+0x8c>)
 8008582:	f000 fdcd 	bl	8009120 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008586:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <MX_ETH_Init+0x8c>)
 8008588:	2221      	movs	r2, #33	; 0x21
 800858a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <MX_ETH_Init+0x8c>)
 800858e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008592:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008594:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <MX_ETH_Init+0x8c>)
 8008596:	2200      	movs	r2, #0
 8008598:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	24000614 	.word	0x24000614
 80085a8:	40028000 	.word	0x40028000
 80085ac:	24000070 	.word	0x24000070
 80085b0:	24000010 	.word	0x24000010
 80085b4:	24000684 	.word	0x24000684

080085b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b090      	sub	sp, #64	; 0x40
 80085bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	605a      	str	r2, [r3, #4]
 80085c8:	609a      	str	r2, [r3, #8]
 80085ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80085cc:	f107 031c 	add.w	r3, r7, #28
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	609a      	str	r2, [r3, #8]
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085dc:	f107 0310 	add.w	r3, r7, #16
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80085e8:	463b      	mov	r3, r7
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	605a      	str	r2, [r3, #4]
 80085f0:	609a      	str	r2, [r3, #8]
 80085f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80085f4:	4b3c      	ldr	r3, [pc, #240]	; (80086e8 <MX_TIM3_Init+0x130>)
 80085f6:	4a3d      	ldr	r2, [pc, #244]	; (80086ec <MX_TIM3_Init+0x134>)
 80085f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96;
 80085fa:	4b3b      	ldr	r3, [pc, #236]	; (80086e8 <MX_TIM3_Init+0x130>)
 80085fc:	2260      	movs	r2, #96	; 0x60
 80085fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008600:	4b39      	ldr	r3, [pc, #228]	; (80086e8 <MX_TIM3_Init+0x130>)
 8008602:	2200      	movs	r2, #0
 8008604:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8008606:	4b38      	ldr	r3, [pc, #224]	; (80086e8 <MX_TIM3_Init+0x130>)
 8008608:	f242 7210 	movw	r2, #10000	; 0x2710
 800860c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800860e:	4b36      	ldr	r3, [pc, #216]	; (80086e8 <MX_TIM3_Init+0x130>)
 8008610:	2200      	movs	r2, #0
 8008612:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008614:	4b34      	ldr	r3, [pc, #208]	; (80086e8 <MX_TIM3_Init+0x130>)
 8008616:	2200      	movs	r2, #0
 8008618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800861a:	4833      	ldr	r0, [pc, #204]	; (80086e8 <MX_TIM3_Init+0x130>)
 800861c:	f7fb fb60 	bl	8003ce0 <HAL_TIM_Base_Init>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8008626:	f000 fa5d 	bl	8008ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800862a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800862e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008630:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008634:	4619      	mov	r1, r3
 8008636:	482c      	ldr	r0, [pc, #176]	; (80086e8 <MX_TIM3_Init+0x130>)
 8008638:	f7fb ff82 	bl	8004540 <HAL_TIM_ConfigClockSource>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8008642:	f000 fa4f 	bl	8008ae4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8008646:	4828      	ldr	r0, [pc, #160]	; (80086e8 <MX_TIM3_Init+0x130>)
 8008648:	f7fb fc02 	bl	8003e50 <HAL_TIM_IC_Init>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008652:	f000 fa47 	bl	8008ae4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8008656:	2304      	movs	r3, #4
 8008658:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800865a:	2350      	movs	r3, #80	; 0x50
 800865c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800865e:	2300      	movs	r3, #0
 8008660:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8008666:	f107 031c 	add.w	r3, r7, #28
 800866a:	4619      	mov	r1, r3
 800866c:	481e      	ldr	r0, [pc, #120]	; (80086e8 <MX_TIM3_Init+0x130>)
 800866e:	f7fc f837 	bl	80046e0 <HAL_TIM_SlaveConfigSynchro>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8008678:	f000 fa34 	bl	8008ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800867c:	2300      	movs	r3, #0
 800867e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008680:	2300      	movs	r3, #0
 8008682:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008684:	f107 0310 	add.w	r3, r7, #16
 8008688:	4619      	mov	r1, r3
 800868a:	4817      	ldr	r0, [pc, #92]	; (80086e8 <MX_TIM3_Init+0x130>)
 800868c:	f7fc fed0 	bl	8005430 <HAL_TIMEx_MasterConfigSynchronization>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8008696:	f000 fa25 	bl	8008ae4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800869a:	2300      	movs	r3, #0
 800869c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800869e:	2301      	movs	r3, #1
 80086a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80086aa:	463b      	mov	r3, r7
 80086ac:	2200      	movs	r2, #0
 80086ae:	4619      	mov	r1, r3
 80086b0:	480d      	ldr	r0, [pc, #52]	; (80086e8 <MX_TIM3_Init+0x130>)
 80086b2:	f7fb fd90 	bl	80041d6 <HAL_TIM_IC_ConfigChannel>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80086bc:	f000 fa12 	bl	8008ae4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80086c0:	2302      	movs	r3, #2
 80086c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80086c4:	2302      	movs	r3, #2
 80086c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80086c8:	463b      	mov	r3, r7
 80086ca:	2204      	movs	r2, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4806      	ldr	r0, [pc, #24]	; (80086e8 <MX_TIM3_Init+0x130>)
 80086d0:	f7fb fd81 	bl	80041d6 <HAL_TIM_IC_ConfigChannel>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 80086da:	f000 fa03 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80086de:	bf00      	nop
 80086e0:	3740      	adds	r7, #64	; 0x40
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	24000594 	.word	0x24000594
 80086ec:	40000400 	.word	0x40000400

080086f0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08c      	sub	sp, #48	; 0x30
 80086f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086f6:	f107 0320 	add.w	r3, r7, #32
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	605a      	str	r2, [r3, #4]
 8008700:	609a      	str	r2, [r3, #8]
 8008702:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008704:	1d3b      	adds	r3, r7, #4
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	605a      	str	r2, [r3, #4]
 800870c:	609a      	str	r2, [r3, #8]
 800870e:	60da      	str	r2, [r3, #12]
 8008710:	611a      	str	r2, [r3, #16]
 8008712:	615a      	str	r2, [r3, #20]
 8008714:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8008716:	4b25      	ldr	r3, [pc, #148]	; (80087ac <MX_TIM12_Init+0xbc>)
 8008718:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <MX_TIM12_Init+0xc0>)
 800871a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 96;
 800871c:	4b23      	ldr	r3, [pc, #140]	; (80087ac <MX_TIM12_Init+0xbc>)
 800871e:	2260      	movs	r2, #96	; 0x60
 8008720:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008722:	4b22      	ldr	r3, [pc, #136]	; (80087ac <MX_TIM12_Init+0xbc>)
 8008724:	2200      	movs	r2, #0
 8008726:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 8008728:	4b20      	ldr	r3, [pc, #128]	; (80087ac <MX_TIM12_Init+0xbc>)
 800872a:	2263      	movs	r2, #99	; 0x63
 800872c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <MX_TIM12_Init+0xbc>)
 8008730:	2200      	movs	r2, #0
 8008732:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008734:	4b1d      	ldr	r3, [pc, #116]	; (80087ac <MX_TIM12_Init+0xbc>)
 8008736:	2200      	movs	r2, #0
 8008738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800873a:	481c      	ldr	r0, [pc, #112]	; (80087ac <MX_TIM12_Init+0xbc>)
 800873c:	f7fb fad0 	bl	8003ce0 <HAL_TIM_Base_Init>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8008746:	f000 f9cd 	bl	8008ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800874a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800874e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8008750:	f107 0320 	add.w	r3, r7, #32
 8008754:	4619      	mov	r1, r3
 8008756:	4815      	ldr	r0, [pc, #84]	; (80087ac <MX_TIM12_Init+0xbc>)
 8008758:	f7fb fef2 	bl	8004540 <HAL_TIM_ConfigClockSource>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8008762:	f000 f9bf 	bl	8008ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8008766:	4811      	ldr	r0, [pc, #68]	; (80087ac <MX_TIM12_Init+0xbc>)
 8008768:	f7fb fae5 	bl	8003d36 <HAL_TIM_PWM_Init>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8008772:	f000 f9b7 	bl	8008ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008776:	2360      	movs	r3, #96	; 0x60
 8008778:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 49;
 800877a:	2331      	movs	r3, #49	; 0x31
 800877c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008786:	1d3b      	adds	r3, r7, #4
 8008788:	2204      	movs	r2, #4
 800878a:	4619      	mov	r1, r3
 800878c:	4807      	ldr	r0, [pc, #28]	; (80087ac <MX_TIM12_Init+0xbc>)
 800878e:	f7fb fdbf 	bl	8004310 <HAL_TIM_PWM_ConfigChannel>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8008798:	f000 f9a4 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800879c:	4803      	ldr	r0, [pc, #12]	; (80087ac <MX_TIM12_Init+0xbc>)
 800879e:	f000 faf9 	bl	8008d94 <HAL_TIM_MspPostInit>

}
 80087a2:	bf00      	nop
 80087a4:	3730      	adds	r7, #48	; 0x30
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	240005d4 	.word	0x240005d4
 80087b0:	40001800 	.word	0x40001800

080087b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80087b8:	4b22      	ldr	r3, [pc, #136]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087ba:	4a23      	ldr	r2, [pc, #140]	; (8008848 <MX_USART3_UART_Init+0x94>)
 80087bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80087be:	4b21      	ldr	r3, [pc, #132]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80087c6:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80087cc:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80087d8:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087da:	220c      	movs	r2, #12
 80087dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087de:	4b19      	ldr	r3, [pc, #100]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087f6:	4b13      	ldr	r3, [pc, #76]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80087fc:	4811      	ldr	r0, [pc, #68]	; (8008844 <MX_USART3_UART_Init+0x90>)
 80087fe:	f7fc fe91 	bl	8005524 <HAL_UART_Init>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8008808:	f000 f96c 	bl	8008ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800880c:	2100      	movs	r1, #0
 800880e:	480d      	ldr	r0, [pc, #52]	; (8008844 <MX_USART3_UART_Init+0x90>)
 8008810:	f7ff f9fb 	bl	8007c0a <HAL_UARTEx_SetTxFifoThreshold>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800881a:	f000 f963 	bl	8008ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800881e:	2100      	movs	r1, #0
 8008820:	4808      	ldr	r0, [pc, #32]	; (8008844 <MX_USART3_UART_Init+0x90>)
 8008822:	f7ff fa30 	bl	8007c86 <HAL_UARTEx_SetRxFifoThreshold>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800882c:	f000 f95a 	bl	8008ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008830:	4804      	ldr	r0, [pc, #16]	; (8008844 <MX_USART3_UART_Init+0x90>)
 8008832:	f7ff f9b1 	bl	8007b98 <HAL_UARTEx_DisableFifoMode>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800883c:	f000 f952 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008840:	bf00      	nop
 8008842:	bd80      	pop	{r7, pc}
 8008844:	24000100 	.word	0x24000100
 8008848:	40004800 	.word	0x40004800

0800884c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008850:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008852:	4a16      	ldr	r2, [pc, #88]	; (80088ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8008854:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008858:	2209      	movs	r2, #9
 800885a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800885c:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800885e:	2202      	movs	r2, #2
 8008860:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008862:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008864:	2200      	movs	r2, #0
 8008866:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008868:	4b0f      	ldr	r3, [pc, #60]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800886a:	2202      	movs	r2, #2
 800886c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800886e:	4b0e      	ldr	r3, [pc, #56]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008870:	2201      	movs	r2, #1
 8008872:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008874:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008876:	2200      	movs	r2, #0
 8008878:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800887a:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800887c:	2200      	movs	r2, #0
 800887e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008880:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008882:	2201      	movs	r2, #1
 8008884:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008888:	2201      	movs	r2, #1
 800888a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008892:	4805      	ldr	r0, [pc, #20]	; (80088a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8008894:	f7f8 fe5f 	bl	8001556 <HAL_PCD_Init>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800889e:	f000 f921 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80088a2:	bf00      	nop
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	2400018c 	.word	0x2400018c
 80088ac:	40080000 	.word	0x40080000

080088b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08c      	sub	sp, #48	; 0x30
 80088b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b6:	f107 031c 	add.w	r3, r7, #28
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	605a      	str	r2, [r3, #4]
 80088c0:	609a      	str	r2, [r3, #8]
 80088c2:	60da      	str	r2, [r3, #12]
 80088c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80088c6:	4b61      	ldr	r3, [pc, #388]	; (8008a4c <MX_GPIO_Init+0x19c>)
 80088c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088cc:	4a5f      	ldr	r2, [pc, #380]	; (8008a4c <MX_GPIO_Init+0x19c>)
 80088ce:	f043 0304 	orr.w	r3, r3, #4
 80088d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088d6:	4b5d      	ldr	r3, [pc, #372]	; (8008a4c <MX_GPIO_Init+0x19c>)
 80088d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80088e4:	4b59      	ldr	r3, [pc, #356]	; (8008a4c <MX_GPIO_Init+0x19c>)
 80088e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088ea:	4a58      	ldr	r2, [pc, #352]	; (8008a4c <MX_GPIO_Init+0x19c>)
 80088ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088f4:	4b55      	ldr	r3, [pc, #340]	; (8008a4c <MX_GPIO_Init+0x19c>)
 80088f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008902:	4b52      	ldr	r3, [pc, #328]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008908:	4a50      	ldr	r2, [pc, #320]	; (8008a4c <MX_GPIO_Init+0x19c>)
 800890a:	f043 0301 	orr.w	r3, r3, #1
 800890e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008912:	4b4e      	ldr	r3, [pc, #312]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	613b      	str	r3, [r7, #16]
 800891e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008920:	4b4a      	ldr	r3, [pc, #296]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008926:	4a49      	ldr	r2, [pc, #292]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008928:	f043 0302 	orr.w	r3, r3, #2
 800892c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008930:	4b46      	ldr	r3, [pc, #280]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800893e:	4b43      	ldr	r3, [pc, #268]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008944:	4a41      	ldr	r2, [pc, #260]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008946:	f043 0308 	orr.w	r3, r3, #8
 800894a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008954:	f003 0308 	and.w	r3, r3, #8
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800895c:	4b3b      	ldr	r3, [pc, #236]	; (8008a4c <MX_GPIO_Init+0x19c>)
 800895e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008962:	4a3a      	ldr	r2, [pc, #232]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800896c:	4b37      	ldr	r3, [pc, #220]	; (8008a4c <MX_GPIO_Init+0x19c>)
 800896e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008976:	607b      	str	r3, [r7, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800897a:	4b34      	ldr	r3, [pc, #208]	; (8008a4c <MX_GPIO_Init+0x19c>)
 800897c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008980:	4a32      	ldr	r2, [pc, #200]	; (8008a4c <MX_GPIO_Init+0x19c>)
 8008982:	f043 0310 	orr.w	r3, r3, #16
 8008986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800898a:	4b30      	ldr	r3, [pc, #192]	; (8008a4c <MX_GPIO_Init+0x19c>)
 800898c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008990:	f003 0310 	and.w	r3, r3, #16
 8008994:	603b      	str	r3, [r7, #0]
 8008996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8008998:	2200      	movs	r2, #0
 800899a:	f244 0101 	movw	r1, #16385	; 0x4001
 800899e:	482c      	ldr	r0, [pc, #176]	; (8008a50 <MX_GPIO_Init+0x1a0>)
 80089a0:	f7f8 fdc0 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80089a4:	2200      	movs	r2, #0
 80089a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089aa:	482a      	ldr	r0, [pc, #168]	; (8008a54 <MX_GPIO_Init+0x1a4>)
 80089ac:	f7f8 fdba 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80089b0:	2200      	movs	r2, #0
 80089b2:	2102      	movs	r1, #2
 80089b4:	4828      	ldr	r0, [pc, #160]	; (8008a58 <MX_GPIO_Init+0x1a8>)
 80089b6:	f7f8 fdb5 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80089ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089c0:	2300      	movs	r3, #0
 80089c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c4:	2300      	movs	r3, #0
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80089c8:	f107 031c 	add.w	r3, r7, #28
 80089cc:	4619      	mov	r1, r3
 80089ce:	4823      	ldr	r0, [pc, #140]	; (8008a5c <MX_GPIO_Init+0x1ac>)
 80089d0:	f7f8 fbf8 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LED3_Pin;
 80089d4:	f244 0301 	movw	r3, #16385	; 0x4001
 80089d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089da:	2301      	movs	r3, #1
 80089dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089e2:	2300      	movs	r3, #0
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089e6:	f107 031c 	add.w	r3, r7, #28
 80089ea:	4619      	mov	r1, r3
 80089ec:	4818      	ldr	r0, [pc, #96]	; (8008a50 <MX_GPIO_Init+0x1a0>)
 80089ee:	f7f8 fbe9 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80089f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089f8:	2301      	movs	r3, #1
 80089fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a00:	2300      	movs	r3, #0
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8008a04:	f107 031c 	add.w	r3, r7, #28
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4812      	ldr	r0, [pc, #72]	; (8008a54 <MX_GPIO_Init+0x1a4>)
 8008a0c:	f7f8 fbda 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8008a10:	2380      	movs	r3, #128	; 0x80
 8008a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008a14:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <MX_GPIO_Init+0x1b0>)
 8008a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8008a1c:	f107 031c 	add.w	r3, r7, #28
 8008a20:	4619      	mov	r1, r3
 8008a22:	4810      	ldr	r0, [pc, #64]	; (8008a64 <MX_GPIO_Init+0x1b4>)
 8008a24:	f7f8 fbce 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008a28:	2302      	movs	r3, #2
 8008a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a34:	2300      	movs	r3, #0
 8008a36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008a38:	f107 031c 	add.w	r3, r7, #28
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4806      	ldr	r0, [pc, #24]	; (8008a58 <MX_GPIO_Init+0x1a8>)
 8008a40:	f7f8 fbc0 	bl	80011c4 <HAL_GPIO_Init>

}
 8008a44:	bf00      	nop
 8008a46:	3730      	adds	r7, #48	; 0x30
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	58020400 	.word	0x58020400
 8008a54:	58020c00 	.word	0x58020c00
 8008a58:	58021000 	.word	0x58021000
 8008a5c:	58020800 	.word	0x58020800
 8008a60:	11110000 	.word	0x11110000
 8008a64:	58021800 	.word	0x58021800

08008a68 <HAL_TIM_IC_CaptureCallback>:
	freq = 90000000.0f / tmp1;

}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
	//volatile static uint32_t _tmp1 = 0, _tmp2 = 0;
	tmp1;
 8008a70:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8008a72:	681b      	ldr	r3, [r3, #0]
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7f1b      	ldrb	r3, [r3, #28]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d11a      	bne.n	8008ab2 <HAL_TIM_IC_CaptureCallback+0x4a>
	    {
	        tmp1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);//周期
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4815      	ldr	r0, [pc, #84]	; (8008ad4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8008a80:	f7fb fe70 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 8008a84:	4602      	mov	r2, r0
 8008a86:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8008a88:	601a      	str	r2, [r3, #0]
	        if(tmp1!=0)
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01a      	beq.n	8008ac8 <HAL_TIM_IC_CaptureCallback+0x60>
	        {
	        	freq=tmp1;
 8008a92:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a10      	ldr	r2, [pc, #64]	; (8008ad8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8008a98:	6013      	str	r3, [r2, #0]
	        	duty=tmp2*100/tmp1;
 8008a9a:	4b10      	ldr	r3, [pc, #64]	; (8008adc <HAL_TIM_IC_CaptureCallback+0x74>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2264      	movs	r2, #100	; 0x64
 8008aa0:	fb02 f203 	mul.w	r2, r2, r3
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aac:	4a0c      	ldr	r2, [pc, #48]	; (8008ae0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8008aae:	6013      	str	r3, [r2, #0]
	    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
	    {
	        tmp2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);//占空�??????

	    }
}
 8008ab0:	e00a      	b.n	8008ac8 <HAL_TIM_IC_CaptureCallback+0x60>
	    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7f1b      	ldrb	r3, [r3, #28]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d106      	bne.n	8008ac8 <HAL_TIM_IC_CaptureCallback+0x60>
	        tmp2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);//占空�??????
 8008aba:	2104      	movs	r1, #4
 8008abc:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8008abe:	f7fb fe51 	bl	8004764 <HAL_TIM_ReadCapturedValue>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <HAL_TIM_IC_CaptureCallback+0x74>)
 8008ac6:	601a      	str	r2, [r3, #0]
}
 8008ac8:	bf00      	nop
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	240000f4 	.word	0x240000f4
 8008ad4:	24000594 	.word	0x24000594
 8008ad8:	240000f0 	.word	0x240000f0
 8008adc:	240000f8 	.word	0x240000f8
 8008ae0:	240000ec 	.word	0x240000ec

08008ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ae8:	bf00      	nop
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
	...

08008af4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008afa:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <HAL_MspInit+0x30>)
 8008afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b00:	4a08      	ldr	r2, [pc, #32]	; (8008b24 <HAL_MspInit+0x30>)
 8008b02:	f043 0302 	orr.w	r3, r3, #2
 8008b06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b0a:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <HAL_MspInit+0x30>)
 8008b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	58024400 	.word	0x58024400

08008b28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08e      	sub	sp, #56	; 0x38
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	609a      	str	r2, [r3, #8]
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a59      	ldr	r2, [pc, #356]	; (8008cac <HAL_ETH_MspInit+0x184>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	f040 80ab 	bne.w	8008ca2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008b4c:	4b58      	ldr	r3, [pc, #352]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b52:	4a57      	ldr	r2, [pc, #348]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008b5c:	4b54      	ldr	r3, [pc, #336]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b66:	623b      	str	r3, [r7, #32]
 8008b68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008b6a:	4b51      	ldr	r3, [pc, #324]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b70:	4a4f      	ldr	r2, [pc, #316]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008b7a:	4b4d      	ldr	r3, [pc, #308]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008b88:	4b49      	ldr	r3, [pc, #292]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b8e:	4a48      	ldr	r2, [pc, #288]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008b98:	4b45      	ldr	r3, [pc, #276]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ba6:	4b42      	ldr	r3, [pc, #264]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bac:	4a40      	ldr	r2, [pc, #256]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008bae:	f043 0304 	orr.w	r3, r3, #4
 8008bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008bb6:	4b3e      	ldr	r3, [pc, #248]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc4:	4b3a      	ldr	r3, [pc, #232]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bca:	4a39      	ldr	r2, [pc, #228]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008bcc:	f043 0301 	orr.w	r3, r3, #1
 8008bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008bd4:	4b36      	ldr	r3, [pc, #216]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	613b      	str	r3, [r7, #16]
 8008be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008be2:	4b33      	ldr	r3, [pc, #204]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008be8:	4a31      	ldr	r2, [pc, #196]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008bea:	f043 0302 	orr.w	r3, r3, #2
 8008bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008bf2:	4b2f      	ldr	r3, [pc, #188]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c00:	4b2b      	ldr	r3, [pc, #172]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c06:	4a2a      	ldr	r2, [pc, #168]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c10:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <HAL_ETH_MspInit+0x188>)
 8008c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008c1e:	2332      	movs	r3, #50	; 0x32
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c22:	2302      	movs	r3, #2
 8008c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c2e:	230b      	movs	r3, #11
 8008c30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c36:	4619      	mov	r1, r3
 8008c38:	481e      	ldr	r0, [pc, #120]	; (8008cb4 <HAL_ETH_MspInit+0x18c>)
 8008c3a:	f7f8 fac3 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008c3e:	2386      	movs	r3, #134	; 0x86
 8008c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c42:	2302      	movs	r3, #2
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c4e:	230b      	movs	r3, #11
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c56:	4619      	mov	r1, r3
 8008c58:	4817      	ldr	r0, [pc, #92]	; (8008cb8 <HAL_ETH_MspInit+0x190>)
 8008c5a:	f7f8 fab3 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c64:	2302      	movs	r3, #2
 8008c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c70:	230b      	movs	r3, #11
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4810      	ldr	r0, [pc, #64]	; (8008cbc <HAL_ETH_MspInit+0x194>)
 8008c7c:	f7f8 faa2 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008c80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c86:	2302      	movs	r3, #2
 8008c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c92:	230b      	movs	r3, #11
 8008c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4808      	ldr	r0, [pc, #32]	; (8008cc0 <HAL_ETH_MspInit+0x198>)
 8008c9e:	f7f8 fa91 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8008ca2:	bf00      	nop
 8008ca4:	3738      	adds	r7, #56	; 0x38
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	40028000 	.word	0x40028000
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	58020800 	.word	0x58020800
 8008cb8:	58020000 	.word	0x58020000
 8008cbc:	58020400 	.word	0x58020400
 8008cc0:	58021800 	.word	0x58021800

08008cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	; 0x28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ccc:	f107 0314 	add.w	r3, r7, #20
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	60da      	str	r2, [r3, #12]
 8008cda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a28      	ldr	r2, [pc, #160]	; (8008d84 <HAL_TIM_Base_MspInit+0xc0>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d136      	bne.n	8008d54 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008ce6:	4b28      	ldr	r3, [pc, #160]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cec:	4a26      	ldr	r2, [pc, #152]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008cee:	f043 0302 	orr.w	r3, r3, #2
 8008cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008cf6:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d04:	4b20      	ldr	r3, [pc, #128]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d0a:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008d14:	4b1c      	ldr	r3, [pc, #112]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008d22:	2340      	movs	r3, #64	; 0x40
 8008d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d26:	2302      	movs	r3, #2
 8008d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008d32:	2302      	movs	r3, #2
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d36:	f107 0314 	add.w	r3, r7, #20
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4813      	ldr	r0, [pc, #76]	; (8008d8c <HAL_TIM_Base_MspInit+0xc8>)
 8008d3e:	f7f8 fa41 	bl	80011c4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008d42:	2200      	movs	r2, #0
 8008d44:	2100      	movs	r1, #0
 8008d46:	201d      	movs	r0, #29
 8008d48:	f7f7 fdf1 	bl	800092e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008d4c:	201d      	movs	r0, #29
 8008d4e:	f7f7 fe08 	bl	8000962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8008d52:	e013      	b.n	8008d7c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM12)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a0d      	ldr	r2, [pc, #52]	; (8008d90 <HAL_TIM_Base_MspInit+0xcc>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d10e      	bne.n	8008d7c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8008d5e:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d64:	4a08      	ldr	r2, [pc, #32]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008d6e:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <HAL_TIM_Base_MspInit+0xc4>)
 8008d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
}
 8008d7c:	bf00      	nop
 8008d7e:	3728      	adds	r7, #40	; 0x28
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40000400 	.word	0x40000400
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	58020000 	.word	0x58020000
 8008d90:	40001800 	.word	0x40001800

08008d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d9c:	f107 030c 	add.w	r3, r7, #12
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	609a      	str	r2, [r3, #8]
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <HAL_TIM_MspPostInit+0x6c>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d11f      	bne.n	8008df6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008db6:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <HAL_TIM_MspPostInit+0x70>)
 8008db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008dbc:	4a11      	ldr	r2, [pc, #68]	; (8008e04 <HAL_TIM_MspPostInit+0x70>)
 8008dbe:	f043 0302 	orr.w	r3, r3, #2
 8008dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <HAL_TIM_MspPostInit+0x70>)
 8008dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration    
    PB15     ------> TIM12_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dda:	2302      	movs	r3, #2
 8008ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8008de6:	2302      	movs	r3, #2
 8008de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008dea:	f107 030c 	add.w	r3, r7, #12
 8008dee:	4619      	mov	r1, r3
 8008df0:	4805      	ldr	r0, [pc, #20]	; (8008e08 <HAL_TIM_MspPostInit+0x74>)
 8008df2:	f7f8 f9e7 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8008df6:	bf00      	nop
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	40001800 	.word	0x40001800
 8008e04:	58024400 	.word	0x58024400
 8008e08:	58020400 	.word	0x58020400

08008e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08a      	sub	sp, #40	; 0x28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e14:	f107 0314 	add.w	r3, r7, #20
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	609a      	str	r2, [r3, #8]
 8008e20:	60da      	str	r2, [r3, #12]
 8008e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a1a      	ldr	r2, [pc, #104]	; (8008e94 <HAL_UART_MspInit+0x88>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d12e      	bne.n	8008e8c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <HAL_UART_MspInit+0x8c>)
 8008e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e34:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <HAL_UART_MspInit+0x8c>)
 8008e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008e3e:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <HAL_UART_MspInit+0x8c>)
 8008e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e48:	613b      	str	r3, [r7, #16]
 8008e4a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e4c:	4b12      	ldr	r3, [pc, #72]	; (8008e98 <HAL_UART_MspInit+0x8c>)
 8008e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e52:	4a11      	ldr	r2, [pc, #68]	; (8008e98 <HAL_UART_MspInit+0x8c>)
 8008e54:	f043 0308 	orr.w	r3, r3, #8
 8008e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <HAL_UART_MspInit+0x8c>)
 8008e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e62:	f003 0308 	and.w	r3, r3, #8
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8008e6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e70:	2302      	movs	r3, #2
 8008e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008e7c:	2307      	movs	r3, #7
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008e80:	f107 0314 	add.w	r3, r7, #20
 8008e84:	4619      	mov	r1, r3
 8008e86:	4805      	ldr	r0, [pc, #20]	; (8008e9c <HAL_UART_MspInit+0x90>)
 8008e88:	f7f8 f99c 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008e8c:	bf00      	nop
 8008e8e:	3728      	adds	r7, #40	; 0x28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	40004800 	.word	0x40004800
 8008e98:	58024400 	.word	0x58024400
 8008e9c:	58020c00 	.word	0x58020c00

08008ea0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	; 0x28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ea8:	f107 0314 	add.w	r3, r7, #20
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	605a      	str	r2, [r3, #4]
 8008eb2:	609a      	str	r2, [r3, #8]
 8008eb4:	60da      	str	r2, [r3, #12]
 8008eb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a21      	ldr	r2, [pc, #132]	; (8008f44 <HAL_PCD_MspInit+0xa4>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d13b      	bne.n	8008f3a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ec2:	4b21      	ldr	r3, [pc, #132]	; (8008f48 <HAL_PCD_MspInit+0xa8>)
 8008ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ec8:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <HAL_PCD_MspInit+0xa8>)
 8008eca:	f043 0301 	orr.w	r3, r3, #1
 8008ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <HAL_PCD_MspInit+0xa8>)
 8008ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	613b      	str	r3, [r7, #16]
 8008ede:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008ee0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008ef2:	230a      	movs	r3, #10
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef6:	f107 0314 	add.w	r3, r7, #20
 8008efa:	4619      	mov	r1, r3
 8008efc:	4813      	ldr	r0, [pc, #76]	; (8008f4c <HAL_PCD_MspInit+0xac>)
 8008efe:	f7f8 f961 	bl	80011c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f10:	f107 0314 	add.w	r3, r7, #20
 8008f14:	4619      	mov	r1, r3
 8008f16:	480d      	ldr	r0, [pc, #52]	; (8008f4c <HAL_PCD_MspInit+0xac>)
 8008f18:	f7f8 f954 	bl	80011c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <HAL_PCD_MspInit+0xa8>)
 8008f1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f22:	4a09      	ldr	r2, [pc, #36]	; (8008f48 <HAL_PCD_MspInit+0xa8>)
 8008f24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f28:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <HAL_PCD_MspInit+0xa8>)
 8008f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f36:	60fb      	str	r3, [r7, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008f3a:	bf00      	nop
 8008f3c:	3728      	adds	r7, #40	; 0x28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	40080000 	.word	0x40080000
 8008f48:	58024400 	.word	0x58024400
 8008f4c:	58020000 	.word	0x58020000

08008f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008f54:	bf00      	nop
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f62:	e7fe      	b.n	8008f62 <HardFault_Handler+0x4>

08008f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f68:	e7fe      	b.n	8008f68 <MemManage_Handler+0x4>

08008f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f6e:	e7fe      	b.n	8008f6e <BusFault_Handler+0x4>

08008f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f74:	e7fe      	b.n	8008f74 <UsageFault_Handler+0x4>

08008f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f76:	b480      	push	{r7}
 8008f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f7a:	bf00      	nop
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f88:	bf00      	nop
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f92:	b480      	push	{r7}
 8008f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f96:	bf00      	nop
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008fa4:	f7f7 fb86 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008fa8:	bf00      	nop
 8008faa:	bd80      	pop	{r7, pc}

08008fac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008fb0:	4802      	ldr	r0, [pc, #8]	; (8008fbc <TIM3_IRQHandler+0x10>)
 8008fb2:	f7fa fff1 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008fb6:	bf00      	nop
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	24000594 	.word	0x24000594

08008fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008fc4:	4b29      	ldr	r3, [pc, #164]	; (800906c <SystemInit+0xac>)
 8008fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fca:	4a28      	ldr	r2, [pc, #160]	; (800906c <SystemInit+0xac>)
 8008fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008fd4:	4b26      	ldr	r3, [pc, #152]	; (8009070 <SystemInit+0xb0>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a25      	ldr	r2, [pc, #148]	; (8009070 <SystemInit+0xb0>)
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008fe0:	4b23      	ldr	r3, [pc, #140]	; (8009070 <SystemInit+0xb0>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008fe6:	4b22      	ldr	r3, [pc, #136]	; (8009070 <SystemInit+0xb0>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4921      	ldr	r1, [pc, #132]	; (8009070 <SystemInit+0xb0>)
 8008fec:	4b21      	ldr	r3, [pc, #132]	; (8009074 <SystemInit+0xb4>)
 8008fee:	4013      	ands	r3, r2
 8008ff0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008ff2:	4b1f      	ldr	r3, [pc, #124]	; (8009070 <SystemInit+0xb0>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008ff8:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <SystemInit+0xb0>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008ffe:	4b1c      	ldr	r3, [pc, #112]	; (8009070 <SystemInit+0xb0>)
 8009000:	2200      	movs	r2, #0
 8009002:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8009004:	4b1a      	ldr	r3, [pc, #104]	; (8009070 <SystemInit+0xb0>)
 8009006:	2200      	movs	r2, #0
 8009008:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800900a:	4b19      	ldr	r3, [pc, #100]	; (8009070 <SystemInit+0xb0>)
 800900c:	2200      	movs	r2, #0
 800900e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8009010:	4b17      	ldr	r3, [pc, #92]	; (8009070 <SystemInit+0xb0>)
 8009012:	2200      	movs	r2, #0
 8009014:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009016:	4b16      	ldr	r3, [pc, #88]	; (8009070 <SystemInit+0xb0>)
 8009018:	2200      	movs	r2, #0
 800901a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800901c:	4b14      	ldr	r3, [pc, #80]	; (8009070 <SystemInit+0xb0>)
 800901e:	2200      	movs	r2, #0
 8009020:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009022:	4b13      	ldr	r3, [pc, #76]	; (8009070 <SystemInit+0xb0>)
 8009024:	2200      	movs	r2, #0
 8009026:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8009028:	4b11      	ldr	r3, [pc, #68]	; (8009070 <SystemInit+0xb0>)
 800902a:	2200      	movs	r2, #0
 800902c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800902e:	4b10      	ldr	r3, [pc, #64]	; (8009070 <SystemInit+0xb0>)
 8009030:	2200      	movs	r2, #0
 8009032:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009034:	4b0e      	ldr	r3, [pc, #56]	; (8009070 <SystemInit+0xb0>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a0d      	ldr	r2, [pc, #52]	; (8009070 <SystemInit+0xb0>)
 800903a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800903e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009040:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <SystemInit+0xb0>)
 8009042:	2200      	movs	r2, #0
 8009044:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009046:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <SystemInit+0xb8>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	4b0c      	ldr	r3, [pc, #48]	; (800907c <SystemInit+0xbc>)
 800904c:	4013      	ands	r3, r2
 800904e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009052:	d202      	bcs.n	800905a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009054:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <SystemInit+0xc0>)
 8009056:	2201      	movs	r2, #1
 8009058:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800905a:	4b04      	ldr	r3, [pc, #16]	; (800906c <SystemInit+0xac>)
 800905c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009060:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009062:	bf00      	nop
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	e000ed00 	.word	0xe000ed00
 8009070:	58024400 	.word	0x58024400
 8009074:	eaf6ed7f 	.word	0xeaf6ed7f
 8009078:	5c001000 	.word	0x5c001000
 800907c:	ffff0000 	.word	0xffff0000
 8009080:	51008108 	.word	0x51008108

08009084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80090bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009088:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800908a:	e003      	b.n	8009094 <LoopCopyDataInit>

0800908c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800908c:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800908e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009090:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009092:	3104      	adds	r1, #4

08009094 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009094:	480b      	ldr	r0, [pc, #44]	; (80090c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009098:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800909a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800909c:	d3f6      	bcc.n	800908c <CopyDataInit>
  ldr  r2, =_sbss
 800909e:	4a0b      	ldr	r2, [pc, #44]	; (80090cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80090a0:	e002      	b.n	80090a8 <LoopFillZerobss>

080090a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80090a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80090a4:	f842 3b04 	str.w	r3, [r2], #4

080090a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80090a8:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80090aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80090ac:	d3f9      	bcc.n	80090a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80090ae:	f7ff ff87 	bl	8008fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80090b2:	f000 f811 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80090b6:	f7ff f945 	bl	8008344 <main>
  bx  lr    
 80090ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80090bc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80090c0:	08009178 	.word	0x08009178
  ldr  r0, =_sdata
 80090c4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80090c8:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80090cc:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 80090d0:	240006b8 	.word	0x240006b8

080090d4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80090d4:	e7fe      	b.n	80090d4 <ADC3_IRQHandler>
	...

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4e0d      	ldr	r6, [pc, #52]	; (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090de:	1ba4      	subs	r4, r4, r6
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2500      	movs	r5, #0
 80090e4:	42a5      	cmp	r5, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4e0b      	ldr	r6, [pc, #44]	; (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	; (800911c <__libc_init_array+0x44>)
 80090ec:	f000 f820 	bl	8009130 <_init>
 80090f0:	1ba4      	subs	r4, r4, r6
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2500      	movs	r5, #0
 80090f6:	42a5      	cmp	r5, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009100:	4798      	blx	r3
 8009102:	3501      	adds	r5, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800910a:	4798      	blx	r3
 800910c:	3501      	adds	r5, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	08009170 	.word	0x08009170
 8009114:	08009170 	.word	0x08009170
 8009118:	08009170 	.word	0x08009170
 800911c:	08009174 	.word	0x08009174

08009120 <memset>:
 8009120:	4402      	add	r2, r0
 8009122:	4603      	mov	r3, r0
 8009124:	4293      	cmp	r3, r2
 8009126:	d100      	bne.n	800912a <memset+0xa>
 8009128:	4770      	bx	lr
 800912a:	f803 1b01 	strb.w	r1, [r3], #1
 800912e:	e7f9      	b.n	8009124 <memset+0x4>

08009130 <_init>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr

0800913c <_fini>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr
